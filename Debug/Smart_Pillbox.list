
Smart_Pillbox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032d8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08003460  08003460  00013460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080034c0  080034c0  000134c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080034c4  080034c4  000134c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000538  20000000  080034c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020538  2**0
                  CONTENTS
  7 .bss          00000040  20000538  20000538  00020538  2**2
                  ALLOC
  8 ._user_heap_stack 00000080  20000578  20000578  00020538  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020538  2**0
                  CONTENTS, READONLY
 10 .debug_info   00008327  00000000  00000000  00020568  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001e99  00000000  00000000  0002888f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000bc0  00000000  00000000  0002a728  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000a90  00000000  00000000  0002b2e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004815  00000000  00000000  0002bd78  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000296e  00000000  00000000  0003058d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00032efb  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002eec  00000000  00000000  00032f78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000538 	.word	0x20000538
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003448 	.word	0x08003448

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000053c 	.word	0x2000053c
 80001c4:	08003448 	.word	0x08003448

080001c8 <LL_ADC_REG_SetSequencerRanks>:
  *         (5) On STM32F3, ADC channel available only on all ADC instances, but
  *             only one ADC instance is allowed to be connected to VrefInt at the same time.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b089      	sub	sp, #36	; 0x24
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	60f8      	str	r0, [r7, #12]
 80001d0:	60b9      	str	r1, [r7, #8]
 80001d2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80001d4:	68fb      	ldr	r3, [r7, #12]
 80001d6:	3330      	adds	r3, #48	; 0x30
 80001d8:	4619      	mov	r1, r3
 80001da:	68bb      	ldr	r3, [r7, #8]
 80001dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80001e0:	f44f 7240 	mov.w	r2, #768	; 0x300
 80001e4:	61ba      	str	r2, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80001e6:	69ba      	ldr	r2, [r7, #24]
 80001e8:	fa92 f2a2 	rbit	r2, r2
 80001ec:	617a      	str	r2, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80001ee:	697a      	ldr	r2, [r7, #20]
 80001f0:	fab2 f282 	clz	r2, r2
 80001f4:	b2d2      	uxtb	r2, r2
 80001f6:	40d3      	lsrs	r3, r2
 80001f8:	009b      	lsls	r3, r3, #2
 80001fa:	440b      	add	r3, r1
 80001fc:	61fb      	str	r3, [r7, #28]
  
  MODIFY_REG(*preg,
 80001fe:	69fb      	ldr	r3, [r7, #28]
 8000200:	681a      	ldr	r2, [r3, #0]
 8000202:	68bb      	ldr	r3, [r7, #8]
 8000204:	f003 031f 	and.w	r3, r3, #31
 8000208:	211f      	movs	r1, #31
 800020a:	fa01 f303 	lsl.w	r3, r1, r3
 800020e:	43db      	mvns	r3, r3
 8000210:	401a      	ands	r2, r3
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	0e9b      	lsrs	r3, r3, #26
 8000216:	f003 011f 	and.w	r1, r3, #31
 800021a:	68bb      	ldr	r3, [r7, #8]
 800021c:	f003 031f 	and.w	r3, r3, #31
 8000220:	fa01 f303 	lsl.w	r3, r1, r3
 8000224:	431a      	orrs	r2, r3
 8000226:	69fb      	ldr	r3, [r7, #28]
 8000228:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800022a:	bf00      	nop
 800022c:	3724      	adds	r7, #36	; 0x24
 800022e:	46bd      	mov	sp, r7
 8000230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000234:	4770      	bx	lr

08000236 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_181CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_601CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000236:	b480      	push	{r7}
 8000238:	b08d      	sub	sp, #52	; 0x34
 800023a:	af00      	add	r7, sp, #0
 800023c:	60f8      	str	r0, [r7, #12]
 800023e:	60b9      	str	r1, [r7, #8]
 8000240:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	3314      	adds	r3, #20
 8000246:	4619      	mov	r1, r3
 8000248:	68bb      	ldr	r3, [r7, #8]
 800024a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800024e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000252:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000254:	69ba      	ldr	r2, [r7, #24]
 8000256:	fa92 f2a2 	rbit	r2, r2
 800025a:	617a      	str	r2, [r7, #20]
  return result;
 800025c:	697a      	ldr	r2, [r7, #20]
 800025e:	fab2 f282 	clz	r2, r2
 8000262:	b2d2      	uxtb	r2, r2
 8000264:	40d3      	lsrs	r3, r2
 8000266:	009b      	lsls	r3, r3, #2
 8000268:	440b      	add	r3, r1
 800026a:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  MODIFY_REG(*preg,
 800026c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800026e:	681a      	ldr	r2, [r3, #0]
 8000270:	68bb      	ldr	r3, [r7, #8]
 8000272:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8000276:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 800027a:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800027c:	6a39      	ldr	r1, [r7, #32]
 800027e:	fa91 f1a1 	rbit	r1, r1
 8000282:	61f9      	str	r1, [r7, #28]
  return result;
 8000284:	69f9      	ldr	r1, [r7, #28]
 8000286:	fab1 f181 	clz	r1, r1
 800028a:	b2c9      	uxtb	r1, r1
 800028c:	40cb      	lsrs	r3, r1
 800028e:	2107      	movs	r1, #7
 8000290:	fa01 f303 	lsl.w	r3, r1, r3
 8000294:	43db      	mvns	r3, r3
 8000296:	401a      	ands	r2, r3
 8000298:	68bb      	ldr	r3, [r7, #8]
 800029a:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 800029e:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 80002a2:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80002a6:	fa91 f1a1 	rbit	r1, r1
 80002aa:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 80002ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80002ae:	fab1 f181 	clz	r1, r1
 80002b2:	b2c9      	uxtb	r1, r1
 80002b4:	40cb      	lsrs	r3, r1
 80002b6:	6879      	ldr	r1, [r7, #4]
 80002b8:	fa01 f303 	lsl.w	r3, r1, r3
 80002bc:	431a      	orrs	r2, r3
 80002be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002c0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 80002c2:	bf00      	nop
 80002c4:	3734      	adds	r7, #52	; 0x34
 80002c6:	46bd      	mov	sp, r7
 80002c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002cc:	4770      	bx	lr
	...

080002d0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b085      	sub	sp, #20
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	60f8      	str	r0, [r7, #12]
 80002d8:	60b9      	str	r1, [r7, #8]
 80002da:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80002e2:	68b9      	ldr	r1, [r7, #8]
 80002e4:	4b0b      	ldr	r3, [pc, #44]	; (8000314 <LL_ADC_SetChannelSingleDiff+0x44>)
 80002e6:	400b      	ands	r3, r1
 80002e8:	43db      	mvns	r3, r3
 80002ea:	401a      	ands	r2, r3
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	f003 0318 	and.w	r3, r3, #24
 80002f2:	4908      	ldr	r1, [pc, #32]	; (8000314 <LL_ADC_SetChannelSingleDiff+0x44>)
 80002f4:	40d9      	lsrs	r1, r3
 80002f6:	68bb      	ldr	r3, [r7, #8]
 80002f8:	4019      	ands	r1, r3
 80002fa:	4b06      	ldr	r3, [pc, #24]	; (8000314 <LL_ADC_SetChannelSingleDiff+0x44>)
 80002fc:	400b      	ands	r3, r1
 80002fe:	431a      	orrs	r2, r3
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000306:	bf00      	nop
 8000308:	3714      	adds	r7, #20
 800030a:	46bd      	mov	sp, r7
 800030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	0007fffe 	.word	0x0007fffe

08000318 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000318:	b480      	push	{r7}
 800031a:	b083      	sub	sp, #12
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
  /* 1. Set the intermediate state before moving the ADC voltage regulator    */
  /*    to state enable.                                                      */
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	689b      	ldr	r3, [r3, #8]
 8000324:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	609a      	str	r2, [r3, #8]
  /* 2. Set the final state of ADC voltage regulator enable                   */
  /*    (ADVREGEN bits set to 0x01).                                          */
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	689b      	ldr	r3, [r3, #8]
 8000330:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000334:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000338:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN_0);
}
 8000340:	bf00      	nop
 8000342:	370c      	adds	r7, #12
 8000344:	46bd      	mov	sp, r7
 8000346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034a:	4770      	bx	lr

0800034c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800034c:	b480      	push	{r7}
 800034e:	b083      	sub	sp, #12
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	689b      	ldr	r3, [r3, #8]
 8000358:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800035c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000360:	f043 0201 	orr.w	r2, r3, #1
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000368:	bf00      	nop
 800036a:	370c      	adds	r7, #12
 800036c:	46bd      	mov	sp, r7
 800036e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000372:	4770      	bx	lr

08000374 <LL_ADC_StartCalibration>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx, uint32_t SingleDiff)
{
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
 800037c:	6039      	str	r1, [r7, #0]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	689b      	ldr	r3, [r3, #8]
 8000382:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000386:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800038a:	683a      	ldr	r2, [r7, #0]
 800038c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8000390:	4313      	orrs	r3, r2
 8000392:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	609a      	str	r2, [r3, #8]
             ADC_CR_ADCALDIF | ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADCAL | (SingleDiff & ADC_SINGLEDIFF_CALIB_START_MASK));
}
 800039a:	bf00      	nop
 800039c:	370c      	adds	r7, #12
 800039e:	46bd      	mov	sp, r7
 80003a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a4:	4770      	bx	lr

080003a6 <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR       ADCAL          LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
 80003a6:	b480      	push	{r7}
 80003a8:	b083      	sub	sp, #12
 80003aa:	af00      	add	r7, sp, #0
 80003ac:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	689b      	ldr	r3, [r3, #8]
 80003b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80003b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003ba:	bf0c      	ite	eq
 80003bc:	2301      	moveq	r3, #1
 80003be:	2300      	movne	r3, #0
 80003c0:	b2db      	uxtb	r3, r3
}
 80003c2:	4618      	mov	r0, r3
 80003c4:	370c      	adds	r7, #12
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr

080003ce <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80003ce:	b480      	push	{r7}
 80003d0:	b083      	sub	sp, #12
 80003d2:	af00      	add	r7, sp, #0
 80003d4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	689b      	ldr	r3, [r3, #8]
 80003da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80003de:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80003e2:	f043 0204 	orr.w	r2, r3, #4
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80003ea:	bf00      	nop
 80003ec:	370c      	adds	r7, #12
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr

080003f6 <LL_ADC_REG_ReadConversionData8>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData8
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_ADC_REG_ReadConversionData8(ADC_TypeDef *ADCx)
{
 80003f6:	b480      	push	{r7}
 80003f8:	b083      	sub	sp, #12
 80003fa:	af00      	add	r7, sp, #0
 80003fc:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000402:	b2db      	uxtb	r3, r3
}
 8000404:	4618      	mov	r0, r3
 8000406:	370c      	adds	r7, #12
 8000408:	46bd      	mov	sp, r7
 800040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040e:	4770      	bx	lr

08000410 <LL_ADC_IsActiveFlag_ADRDY>:
  * @rmtoll ISR      ADRDY          LL_ADC_IsActiveFlag_ADRDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_ADRDY(ADC_TypeDef *ADCx)
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	f003 0301 	and.w	r3, r3, #1
 8000420:	2b01      	cmp	r3, #1
 8000422:	bf0c      	ite	eq
 8000424:	2301      	moveq	r3, #1
 8000426:	2300      	movne	r3, #0
 8000428:	b2db      	uxtb	r3, r3
}
 800042a:	4618      	mov	r0, r3
 800042c:	370c      	adds	r7, #12
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr

08000436 <LL_ADC_IsActiveFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_IsActiveFlag_EOC
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(ADC_TypeDef *ADCx)
{
 8000436:	b480      	push	{r7}
 8000438:	b083      	sub	sp, #12
 800043a:	af00      	add	r7, sp, #0
 800043c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	f003 0304 	and.w	r3, r3, #4
 8000446:	2b04      	cmp	r3, #4
 8000448:	bf0c      	ite	eq
 800044a:	2301      	moveq	r3, #1
 800044c:	2300      	movne	r3, #0
 800044e:	b2db      	uxtb	r3, r3
}
 8000450:	4618      	mov	r0, r3
 8000452:	370c      	adds	r7, #12
 8000454:	46bd      	mov	sp, r7
 8000456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045a:	4770      	bx	lr

0800045c <LL_ADC_ClearFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_ClearFlag_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
{
 800045c:	b480      	push	{r7}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	2204      	movs	r2, #4
 8000468:	601a      	str	r2, [r3, #0]
}
 800046a:	bf00      	nop
 800046c:	370c      	adds	r7, #12
 800046e:	46bd      	mov	sp, r7
 8000470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000474:	4770      	bx	lr
	...

08000478 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000478:	b480      	push	{r7}
 800047a:	b085      	sub	sp, #20
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000480:	4908      	ldr	r1, [pc, #32]	; (80004a4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000482:	4b08      	ldr	r3, [pc, #32]	; (80004a4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000484:	695a      	ldr	r2, [r3, #20]
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	4313      	orrs	r3, r2
 800048a:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800048c:	4b05      	ldr	r3, [pc, #20]	; (80004a4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800048e:	695a      	ldr	r2, [r3, #20]
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	4013      	ands	r3, r2
 8000494:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000496:	68fb      	ldr	r3, [r7, #12]
}
 8000498:	bf00      	nop
 800049a:	3714      	adds	r7, #20
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr
 80004a4:	40021000 	.word	0x40021000

080004a8 <MX_ADC1_Init>:
const uint32_t ADC_Sampling_Time_Map[ADC_Channel_Num] = {LL_ADC_SAMPLINGTIME_601CYCLES_5, LL_ADC_SAMPLINGTIME_601CYCLES_5};
/* USER CODE END 0 */

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b094      	sub	sp, #80	; 0x50
 80004ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80004ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80004b2:	2200      	movs	r2, #0
 80004b4:	601a      	str	r2, [r3, #0]
 80004b6:	605a      	str	r2, [r3, #4]
 80004b8:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80004ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004be:	2200      	movs	r2, #0
 80004c0:	601a      	str	r2, [r3, #0]
 80004c2:	605a      	str	r2, [r3, #4]
 80004c4:	609a      	str	r2, [r3, #8]
 80004c6:	60da      	str	r2, [r3, #12]
 80004c8:	611a      	str	r2, [r3, #16]
 80004ca:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 80004cc:	f107 0318 	add.w	r3, r7, #24
 80004d0:	2200      	movs	r2, #0
 80004d2:	601a      	str	r2, [r3, #0]
 80004d4:	605a      	str	r2, [r3, #4]
 80004d6:	609a      	str	r2, [r3, #8]
 80004d8:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004da:	463b      	mov	r3, r7
 80004dc:	2200      	movs	r2, #0
 80004de:	601a      	str	r2, [r3, #0]
 80004e0:	605a      	str	r2, [r3, #4]
 80004e2:	609a      	str	r2, [r3, #8]
 80004e4:	60da      	str	r2, [r3, #12]
 80004e6:	611a      	str	r2, [r3, #16]
 80004e8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_ADC12);
 80004ea:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80004ee:	f7ff ffc3 	bl	8000478 <LL_AHB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80004f2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80004f6:	f7ff ffbf 	bl	8000478 <LL_AHB1_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PA0   ------> ADC1_IN1
  PA1   ------> ADC1_IN2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 80004fa:	2303      	movs	r3, #3
 80004fc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80004fe:	2303      	movs	r3, #3
 8000500:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000502:	2300      	movs	r3, #0
 8000504:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000506:	463b      	mov	r3, r7
 8000508:	4619      	mov	r1, r3
 800050a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800050e:	f001 fb54 	bl	8001bba <LL_GPIO_Init>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_8B;
 8000512:	2310      	movs	r3, #16
 8000514:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000516:	2300      	movs	r3, #0
 8000518:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 800051a:	2300      	movs	r3, #0
 800051c:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 800051e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000522:	4619      	mov	r1, r3
 8000524:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000528:	f001 f9d2 	bl	80018d0 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 800052c:	2300      	movs	r3, #0
 800052e:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8000530:	2300      	movs	r3, #0
 8000532:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000534:	2300      	movs	r3, #0
 8000536:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8000538:	2300      	movs	r3, #0
 800053a:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_LIMITED;
 800053c:	2301      	movs	r3, #1
 800053e:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_OVERWRITTEN;
 8000540:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000544:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8000546:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800054a:	4619      	mov	r1, r3
 800054c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000550:	f001 f9e4 	bl	800191c <LL_ADC_REG_Init>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV1;
 8000554:	2300      	movs	r3, #0
 8000556:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8000558:	2300      	movs	r3, #0
 800055a:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 800055c:	f107 0318 	add.w	r3, r7, #24
 8000560:	4619      	mov	r1, r3
 8000562:	481a      	ldr	r0, [pc, #104]	; (80005cc <MX_ADC1_Init+0x124>)
 8000564:	f001 f974 	bl	8001850 <LL_ADC_CommonInit>

  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC1);
 8000568:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800056c:	f7ff fed4 	bl	8000318 <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8000570:	4b17      	ldr	r3, [pc, #92]	; (80005d0 <MX_ADC1_Init+0x128>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	099b      	lsrs	r3, r3, #6
 8000576:	4a17      	ldr	r2, [pc, #92]	; (80005d4 <MX_ADC1_Init+0x12c>)
 8000578:	fba2 2303 	umull	r2, r3, r2, r3
 800057c:	099a      	lsrs	r2, r3, #6
 800057e:	4613      	mov	r3, r2
 8000580:	009b      	lsls	r3, r3, #2
 8000582:	4413      	add	r3, r2
 8000584:	005b      	lsls	r3, r3, #1
 8000586:	461a      	mov	r2, r3
 8000588:	4b13      	ldr	r3, [pc, #76]	; (80005d8 <MX_ADC1_Init+0x130>)
 800058a:	fba3 2302 	umull	r2, r3, r3, r2
 800058e:	08db      	lsrs	r3, r3, #3
 8000590:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8000592:	e002      	b.n	800059a <MX_ADC1_Init+0xf2>
  {
    wait_loop_index--;
 8000594:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000596:	3b01      	subs	r3, #1
 8000598:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 800059a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800059c:	2b00      	cmp	r3, #0
 800059e:	d1f9      	bne.n	8000594 <MX_ADC1_Init+0xec>
  }
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 80005a0:	4a0e      	ldr	r2, [pc, #56]	; (80005dc <MX_ADC1_Init+0x134>)
 80005a2:	2106      	movs	r1, #6
 80005a4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80005a8:	f7ff fe0e 	bl	80001c8 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_601CYCLES_5);
 80005ac:	2207      	movs	r2, #7
 80005ae:	490b      	ldr	r1, [pc, #44]	; (80005dc <MX_ADC1_Init+0x134>)
 80005b0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80005b4:	f7ff fe3f 	bl	8000236 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SINGLE_ENDED);
 80005b8:	227f      	movs	r2, #127	; 0x7f
 80005ba:	4908      	ldr	r1, [pc, #32]	; (80005dc <MX_ADC1_Init+0x134>)
 80005bc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80005c0:	f7ff fe86 	bl	80002d0 <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005c4:	bf00      	nop
 80005c6:	3750      	adds	r7, #80	; 0x50
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	50000300 	.word	0x50000300
 80005d0:	20000000 	.word	0x20000000
 80005d4:	053e2d63 	.word	0x053e2d63
 80005d8:	cccccccd 	.word	0xcccccccd
 80005dc:	04300002 	.word	0x04300002

080005e0 <MX_ADC1_Enable>:

/* USER CODE BEGIN 1 */

/*This function enable ADC*/
void MX_ADC1_Enable(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	LL_ADC_Enable(ADC1);
 80005e4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80005e8:	f7ff feb0 	bl	800034c <LL_ADC_Enable>
	while(!LL_ADC_IsActiveFlag_ADRDY(ADC1));
 80005ec:	bf00      	nop
 80005ee:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80005f2:	f7ff ff0d 	bl	8000410 <LL_ADC_IsActiveFlag_ADRDY>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d0f8      	beq.n	80005ee <MX_ADC1_Enable+0xe>

	return;
 80005fc:	bf00      	nop
}
 80005fe:	bd80      	pop	{r7, pc}

08000600 <MX_ADC1_Calibration>:
/*This Function start the ADC calibration and wait into the cycle until calibration is in progress*/
void MX_ADC1_Calibration(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
	LL_ADC_StartCalibration(ADC1, LL_ADC_SINGLE_ENDED);
 8000604:	217f      	movs	r1, #127	; 0x7f
 8000606:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800060a:	f7ff feb3 	bl	8000374 <LL_ADC_StartCalibration>
	while(LL_ADC_IsCalibrationOnGoing(ADC1));
 800060e:	bf00      	nop
 8000610:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000614:	f7ff fec7 	bl	80003a6 <LL_ADC_IsCalibrationOnGoing>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d1f8      	bne.n	8000610 <MX_ADC1_Calibration+0x10>

	return;
 800061e:	bf00      	nop
}
 8000620:	bd80      	pop	{r7, pc}
	...

08000624 <MX_ADC1_SetChannel>:
 * just use one of the following arguments:
 * Channel 1: ADC_Channel_1
 * Channel 2: ADC_Channel_2
 */
void MX_ADC1_SetChannel(uint32_t Channel)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
	LL_ADC_REG_SetSequencerRanks(ADC1,LL_ADC_REG_RANK_1, ADC_Channel_Map[Channel]);
 800062c:	4a0d      	ldr	r2, [pc, #52]	; (8000664 <MX_ADC1_SetChannel+0x40>)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000634:	461a      	mov	r2, r3
 8000636:	2106      	movs	r1, #6
 8000638:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800063c:	f7ff fdc4 	bl	80001c8 <LL_ADC_REG_SetSequencerRanks>
	LL_ADC_SetChannelSamplingTime(ADC1,ADC_Channel_Map[Channel],ADC_Sampling_Time_Map[Channel]);
 8000640:	4a08      	ldr	r2, [pc, #32]	; (8000664 <MX_ADC1_SetChannel+0x40>)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000648:	4a07      	ldr	r2, [pc, #28]	; (8000668 <MX_ADC1_SetChannel+0x44>)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000650:	461a      	mov	r2, r3
 8000652:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000656:	f7ff fdee 	bl	8000236 <LL_ADC_SetChannelSamplingTime>

	return;
 800065a:	bf00      	nop
}
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	080034b0 	.word	0x080034b0
 8000668:	080034b8 	.word	0x080034b8

0800066c <MX_ADC1_StartConversion>:

/*This function start the ADC conversion process*/
void MX_ADC1_StartConversion(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
	LL_ADC_REG_StartConversion(ADC1);
 8000670:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000674:	f7ff feab 	bl	80003ce <LL_ADC_REG_StartConversion>
	/*This cycle waits until the end of conversion flag is active*/
	while(!LL_ADC_IsActiveFlag_EOC(ADC1));
 8000678:	bf00      	nop
 800067a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800067e:	f7ff feda 	bl	8000436 <LL_ADC_IsActiveFlag_EOC>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d0f8      	beq.n	800067a <MX_ADC1_StartConversion+0xe>
	/*When ADC finish the conversion just clear the EOC flag*/
	LL_ADC_ClearFlag_EOC(ADC1);
 8000688:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800068c:	f7ff fee6 	bl	800045c <LL_ADC_ClearFlag_EOC>

	return;
 8000690:	bf00      	nop
}
 8000692:	bd80      	pop	{r7, pc}

08000694 <MX_ADC1_GetValue>:

/*This function get the ADC value on a 8 bits format*/
uint16_t MX_ADC1_GetValue(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
	uint16_t ADC_value;
	ADC_value=LL_ADC_REG_ReadConversionData8(ADC1);
 800069a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800069e:	f7ff feaa 	bl	80003f6 <LL_ADC_REG_ReadConversionData8>
 80006a2:	4603      	mov	r3, r0
 80006a4:	80fb      	strh	r3, [r7, #6]
	return ADC_value;
 80006a6:	88fb      	ldrh	r3, [r7, #6]
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <LL_AHB1_GRP1_EnableClock>:
{
 80006b0:	b480      	push	{r7}
 80006b2:	b085      	sub	sp, #20
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80006b8:	4908      	ldr	r1, [pc, #32]	; (80006dc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80006ba:	4b08      	ldr	r3, [pc, #32]	; (80006dc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80006bc:	695a      	ldr	r2, [r3, #20]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	4313      	orrs	r3, r2
 80006c2:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80006c4:	4b05      	ldr	r3, [pc, #20]	; (80006dc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80006c6:	695a      	ldr	r2, [r3, #20]
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	4013      	ands	r3, r2
 80006cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006ce:	68fb      	ldr	r3, [r7, #12]
}
 80006d0:	bf00      	nop
 80006d2:	3714      	adds	r7, #20
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	40021000 	.word	0x40021000

080006e0 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	691a      	ldr	r2, [r3, #16]
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	401a      	ands	r2, r3
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	429a      	cmp	r2, r3
 80006f6:	bf0c      	ite	eq
 80006f8:	2301      	moveq	r3, #1
 80006fa:	2300      	movne	r3, #0
 80006fc:	b2db      	uxtb	r3, r3
}
 80006fe:	4618      	mov	r0, r3
 8000700:	370c      	adds	r7, #12
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr

0800070a <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800070a:	b480      	push	{r7}
 800070c:	b083      	sub	sp, #12
 800070e:	af00      	add	r7, sp, #0
 8000710:	6078      	str	r0, [r7, #4]
 8000712:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	683a      	ldr	r2, [r7, #0]
 8000718:	619a      	str	r2, [r3, #24]
}
 800071a:	bf00      	nop
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr

08000726 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000726:	b480      	push	{r7}
 8000728:	b083      	sub	sp, #12
 800072a:	af00      	add	r7, sp, #0
 800072c:	6078      	str	r0, [r7, #4]
 800072e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	683a      	ldr	r2, [r7, #0]
 8000734:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000736:	bf00      	nop
 8000738:	370c      	adds	r7, #12
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
	...

08000744 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b086      	sub	sp, #24
 8000748:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074a:	463b      	mov	r3, r7
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
 8000756:	611a      	str	r2, [r3, #16]
 8000758:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800075a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800075e:	f7ff ffa7 	bl	80006b0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000762:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000766:	f7ff ffa3 	bl	80006b0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800076a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800076e:	f7ff ff9f 	bl	80006b0 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(GPIOA, LCD_RESET_Pin|LCD_A0_Pin);
 8000772:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000776:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800077a:	f7ff ffc6 	bl	800070a <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(LCD_CS_N_GPIO_Port, LCD_CS_N_Pin);
 800077e:	2140      	movs	r1, #64	; 0x40
 8000780:	483b      	ldr	r0, [pc, #236]	; (8000870 <MX_GPIO_Init+0x12c>)
 8000782:	f7ff ffc2 	bl	800070a <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 8000786:	2180      	movs	r1, #128	; 0x80
 8000788:	483a      	ldr	r0, [pc, #232]	; (8000874 <MX_GPIO_Init+0x130>)
 800078a:	f7ff ffcc 	bl	8000726 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 800078e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000792:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000796:	f7ff ffc6 	bl	8000726 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED_R_GPIO_Port, LED_R_Pin);
 800079a:	2110      	movs	r1, #16
 800079c:	4834      	ldr	r0, [pc, #208]	; (8000870 <MX_GPIO_Init+0x12c>)
 800079e:	f7ff ffc2 	bl	8000726 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = J_RIGHT_Pin|J_LEFT_Pin;
 80007a2:	2303      	movs	r3, #3
 80007a4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80007a6:	2300      	movs	r3, #0
 80007a8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007aa:	2300      	movs	r3, #0
 80007ac:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ae:	463b      	mov	r3, r7
 80007b0:	4619      	mov	r1, r3
 80007b2:	4830      	ldr	r0, [pc, #192]	; (8000874 <MX_GPIO_Init+0x130>)
 80007b4:	f001 fa01 	bl	8001bba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = J_UP_Pin;
 80007b8:	2310      	movs	r3, #16
 80007ba:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80007bc:	2300      	movs	r3, #0
 80007be:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007c0:	2300      	movs	r3, #0
 80007c2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(J_UP_GPIO_Port, &GPIO_InitStruct);
 80007c4:	463b      	mov	r3, r7
 80007c6:	4619      	mov	r1, r3
 80007c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007cc:	f001 f9f5 	bl	8001bba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LCD_RESET_Pin|LCD_A0_Pin;
 80007d0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80007d4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80007d6:	2301      	movs	r3, #1
 80007d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80007da:	2300      	movs	r3, #0
 80007dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80007e2:	2301      	movs	r3, #1
 80007e4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e6:	463b      	mov	r3, r7
 80007e8:	4619      	mov	r1, r3
 80007ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ee:	f001 f9e4 	bl	8001bba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = J_DOWN_Pin|J_CENTER_Pin;
 80007f2:	2321      	movs	r3, #33	; 0x21
 80007f4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80007f6:	2300      	movs	r3, #0
 80007f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007fa:	2300      	movs	r3, #0
 80007fc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007fe:	463b      	mov	r3, r7
 8000800:	4619      	mov	r1, r3
 8000802:	481b      	ldr	r0, [pc, #108]	; (8000870 <MX_GPIO_Init+0x12c>)
 8000804:	f001 f9d9 	bl	8001bba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_G_Pin;
 8000808:	2380      	movs	r3, #128	; 0x80
 800080a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800080c:	2301      	movs	r3, #1
 800080e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000810:	2300      	movs	r3, #0
 8000812:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000818:	2300      	movs	r3, #0
 800081a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED_G_GPIO_Port, &GPIO_InitStruct);
 800081c:	463b      	mov	r3, r7
 800081e:	4619      	mov	r1, r3
 8000820:	4814      	ldr	r0, [pc, #80]	; (8000874 <MX_GPIO_Init+0x130>)
 8000822:	f001 f9ca 	bl	8001bba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_B_Pin;
 8000826:	f44f 7300 	mov.w	r3, #512	; 0x200
 800082a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800082c:	2301      	movs	r3, #1
 800082e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000830:	2300      	movs	r3, #0
 8000832:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000838:	2300      	movs	r3, #0
 800083a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 800083c:	463b      	mov	r3, r7
 800083e:	4619      	mov	r1, r3
 8000840:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000844:	f001 f9b9 	bl	8001bba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_R_Pin|LCD_CS_N_Pin;
 8000848:	2350      	movs	r3, #80	; 0x50
 800084a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800084c:	2301      	movs	r3, #1
 800084e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000850:	2300      	movs	r3, #0
 8000852:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000858:	2300      	movs	r3, #0
 800085a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800085c:	463b      	mov	r3, r7
 800085e:	4619      	mov	r1, r3
 8000860:	4803      	ldr	r0, [pc, #12]	; (8000870 <MX_GPIO_Init+0x12c>)
 8000862:	f001 f9aa 	bl	8001bba <LL_GPIO_Init>

}
 8000866:	bf00      	nop
 8000868:	3718      	adds	r7, #24
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	48000400 	.word	0x48000400
 8000874:	48000800 	.word	0x48000800

08000878 <MX_Joystick_Up>:

/* USER CODE BEGIN 2 */
short MX_Joystick_Up(){
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
	/* Deteccion de Joystick Up */
	short v = LL_GPIO_IsInputPinSet(GPIOA,J_UP_Pin);
 800087e:	2110      	movs	r1, #16
 8000880:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000884:	f7ff ff2c 	bl	80006e0 <LL_GPIO_IsInputPinSet>
 8000888:	4603      	mov	r3, r0
 800088a:	80fb      	strh	r3, [r7, #6]
	return v;
 800088c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000890:	4618      	mov	r0, r3
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}

08000898 <MX_Joystick_Down>:
short MX_Joystick_Down(){
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
	/* Deteccion de Joystick Down */
	short v = LL_GPIO_IsInputPinSet(GPIOB,J_DOWN_Pin);
 800089e:	2101      	movs	r1, #1
 80008a0:	4805      	ldr	r0, [pc, #20]	; (80008b8 <MX_Joystick_Down+0x20>)
 80008a2:	f7ff ff1d 	bl	80006e0 <LL_GPIO_IsInputPinSet>
 80008a6:	4603      	mov	r3, r0
 80008a8:	80fb      	strh	r3, [r7, #6]
	return v;
 80008aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	48000400 	.word	0x48000400

080008bc <MX_Joystick_Right>:
short MX_Joystick_Right(){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
	/* Deteccion de Joystick Right */
	short v = LL_GPIO_IsInputPinSet(GPIOC,J_RIGHT_Pin);
 80008c2:	2101      	movs	r1, #1
 80008c4:	4805      	ldr	r0, [pc, #20]	; (80008dc <MX_Joystick_Right+0x20>)
 80008c6:	f7ff ff0b 	bl	80006e0 <LL_GPIO_IsInputPinSet>
 80008ca:	4603      	mov	r3, r0
 80008cc:	80fb      	strh	r3, [r7, #6]
	return v;
 80008ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	48000800 	.word	0x48000800

080008e0 <MX_Joystick_Left>:
short MX_Joystick_Left(){
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
	/* Deteccion de Joystick Left */
	short v = LL_GPIO_IsInputPinSet(GPIOC,J_LEFT_Pin);
 80008e6:	2102      	movs	r1, #2
 80008e8:	4805      	ldr	r0, [pc, #20]	; (8000900 <MX_Joystick_Left+0x20>)
 80008ea:	f7ff fef9 	bl	80006e0 <LL_GPIO_IsInputPinSet>
 80008ee:	4603      	mov	r3, r0
 80008f0:	80fb      	strh	r3, [r7, #6]
	return v;
 80008f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	48000800 	.word	0x48000800

08000904 <MX_Joystick_Center>:
short MX_Joystick_Center(){
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
	/* Deteccion de Joystick Center */
	short v = LL_GPIO_IsInputPinSet(GPIOB,J_CENTER_Pin);
 800090a:	2120      	movs	r1, #32
 800090c:	4805      	ldr	r0, [pc, #20]	; (8000924 <MX_Joystick_Center+0x20>)
 800090e:	f7ff fee7 	bl	80006e0 <LL_GPIO_IsInputPinSet>
 8000912:	4603      	mov	r3, r0
 8000914:	80fb      	strh	r3, [r7, #6]
	return v;
 8000916:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800091a:	4618      	mov	r0, r3
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	48000400 	.word	0x48000400

08000928 <MX_RGB_Red>:
void MX_RGB_Red(short v){
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	80fb      	strh	r3, [r7, #6]
	/* Activacion o desactivacion led R */
	if (v == 1)
 8000932:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000936:	2b01      	cmp	r3, #1
 8000938:	d104      	bne.n	8000944 <MX_RGB_Red+0x1c>
		LL_GPIO_SetOutputPin(GPIOB,LED_R_Pin);
 800093a:	2110      	movs	r1, #16
 800093c:	4807      	ldr	r0, [pc, #28]	; (800095c <MX_RGB_Red+0x34>)
 800093e:	f7ff fee4 	bl	800070a <LL_GPIO_SetOutputPin>
	else if (v == 0)
		LL_GPIO_ResetOutputPin(GPIOB,LED_R_Pin);
}
 8000942:	e007      	b.n	8000954 <MX_RGB_Red+0x2c>
	else if (v == 0)
 8000944:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d103      	bne.n	8000954 <MX_RGB_Red+0x2c>
		LL_GPIO_ResetOutputPin(GPIOB,LED_R_Pin);
 800094c:	2110      	movs	r1, #16
 800094e:	4803      	ldr	r0, [pc, #12]	; (800095c <MX_RGB_Red+0x34>)
 8000950:	f7ff fee9 	bl	8000726 <LL_GPIO_ResetOutputPin>
}
 8000954:	bf00      	nop
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	48000400 	.word	0x48000400

08000960 <MX_RGB_Green>:
void MX_RGB_Green(short v){
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	80fb      	strh	r3, [r7, #6]
	/* Activacion o desactivacion led G */
	if (v == 1)
 800096a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800096e:	2b01      	cmp	r3, #1
 8000970:	d104      	bne.n	800097c <MX_RGB_Green+0x1c>
		LL_GPIO_SetOutputPin(GPIOC,LED_G_Pin);
 8000972:	2180      	movs	r1, #128	; 0x80
 8000974:	4807      	ldr	r0, [pc, #28]	; (8000994 <MX_RGB_Green+0x34>)
 8000976:	f7ff fec8 	bl	800070a <LL_GPIO_SetOutputPin>
	else if (v == 0)
		LL_GPIO_ResetOutputPin(GPIOC,LED_G_Pin);
}
 800097a:	e007      	b.n	800098c <MX_RGB_Green+0x2c>
	else if (v == 0)
 800097c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d103      	bne.n	800098c <MX_RGB_Green+0x2c>
		LL_GPIO_ResetOutputPin(GPIOC,LED_G_Pin);
 8000984:	2180      	movs	r1, #128	; 0x80
 8000986:	4803      	ldr	r0, [pc, #12]	; (8000994 <MX_RGB_Green+0x34>)
 8000988:	f7ff fecd 	bl	8000726 <LL_GPIO_ResetOutputPin>
}
 800098c:	bf00      	nop
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	48000800 	.word	0x48000800

08000998 <MX_RGB_Blue>:
void MX_RGB_Blue(short v){
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	4603      	mov	r3, r0
 80009a0:	80fb      	strh	r3, [r7, #6]
	/* Activacion o desactivacion led B */
	if (v == 1)
 80009a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d106      	bne.n	80009b8 <MX_RGB_Blue+0x20>
		LL_GPIO_SetOutputPin(GPIOA,LED_B_Pin);
 80009aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009b2:	f7ff feaa 	bl	800070a <LL_GPIO_SetOutputPin>
	else if (v == 0)
		LL_GPIO_ResetOutputPin(GPIOA,LED_B_Pin);
}
 80009b6:	e009      	b.n	80009cc <MX_RGB_Blue+0x34>
	else if (v == 0)
 80009b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d105      	bne.n	80009cc <MX_RGB_Blue+0x34>
		LL_GPIO_ResetOutputPin(GPIOA,LED_B_Pin);
 80009c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c8:	f7ff fead 	bl	8000726 <LL_GPIO_ResetOutputPin>
}
 80009cc:	bf00      	nop
 80009ce:	3708      	adds	r7, #8
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	601a      	str	r2, [r3, #0]
}
 80009e8:	bf00      	nop
 80009ea:	370c      	adds	r7, #12
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	601a      	str	r2, [r3, #0]
}
 8000a08:	bf00      	nop
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr

08000a14 <LL_I2C_SetMasterAddressingMode>:
  *         @arg @ref LL_I2C_ADDRESSING_MODE_7BIT
  *         @arg @ref LL_I2C_ADDRESSING_MODE_10BIT
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMasterAddressingMode(I2C_TypeDef *I2Cx, uint32_t AddressingMode)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_ADD10, AddressingMode);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	431a      	orrs	r2, r3
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	605a      	str	r2, [r3, #4]
}
 8000a2e:	bf00      	nop
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr

08000a3a <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	b085      	sub	sp, #20
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	60f8      	str	r0, [r7, #12]
 8000a42:	60b9      	str	r1, [r7, #8]
 8000a44:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	68db      	ldr	r3, [r3, #12]
 8000a4a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000a4e:	f023 0306 	bic.w	r3, r3, #6
 8000a52:	68b9      	ldr	r1, [r7, #8]
 8000a54:	687a      	ldr	r2, [r7, #4]
 8000a56:	430a      	orrs	r2, r1
 8000a58:	431a      	orrs	r2, r3
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	60da      	str	r2, [r3, #12]
}
 8000a5e:	bf00      	nop
 8000a60:	3714      	adds	r7, #20
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr

08000a6a <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	b083      	sub	sp, #12
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	68db      	ldr	r3, [r3, #12]
 8000a76:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	60da      	str	r2, [r3, #12]
}
 8000a7e:	bf00      	nop
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr

08000a8a <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	b083      	sub	sp, #12
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	605a      	str	r2, [r3, #4]
}
 8000a9e:	bf00      	nop
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
	...

08000aac <LL_AHB1_GRP1_EnableClock>:
{
 8000aac:	b480      	push	{r7}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000ab4:	4908      	ldr	r1, [pc, #32]	; (8000ad8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000ab6:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000ab8:	695a      	ldr	r2, [r3, #20]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000ac0:	4b05      	ldr	r3, [pc, #20]	; (8000ad8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000ac2:	695a      	ldr	r2, [r3, #20]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	4013      	ands	r3, r2
 8000ac8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000aca:	68fb      	ldr	r3, [r7, #12]
}
 8000acc:	bf00      	nop
 8000ace:	3714      	adds	r7, #20
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	40021000 	.word	0x40021000

08000adc <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b085      	sub	sp, #20
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000ae4:	4908      	ldr	r1, [pc, #32]	; (8000b08 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000ae6:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000ae8:	69da      	ldr	r2, [r3, #28]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4313      	orrs	r3, r2
 8000aee:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000af0:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000af2:	69da      	ldr	r2, [r3, #28]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	4013      	ands	r3, r2
 8000af8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000afa:	68fb      	ldr	r3, [r7, #12]
}
 8000afc:	bf00      	nop
 8000afe:	3714      	adds	r7, #20
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	40021000 	.word	0x40021000

08000b0c <MX_I2C1_Init>:

/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08e      	sub	sp, #56	; 0x38
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8000b12:	f107 031c 	add.w	r3, r7, #28
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
 8000b1e:	60da      	str	r2, [r3, #12]
 8000b20:	611a      	str	r2, [r3, #16]
 8000b22:	615a      	str	r2, [r3, #20]
 8000b24:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b26:	1d3b      	adds	r3, r7, #4
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]
 8000b34:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000b36:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000b3a:	f7ff ffb7 	bl	8000aac <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB8   ------> I2C1_SCL
  PB9   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 8000b3e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b42:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b44:	2302      	movs	r3, #2
 8000b46:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000b48:	2303      	movs	r3, #3
 8000b4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b50:	2300      	movs	r3, #0
 8000b52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8000b54:	2304      	movs	r3, #4
 8000b56:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b58:	1d3b      	adds	r3, r7, #4
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	481a      	ldr	r0, [pc, #104]	; (8000bc8 <MX_I2C1_Init+0xbc>)
 8000b5e:	f001 f82c 	bl	8001bba <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8000b62:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000b66:	f7ff ffb9 	bl	8000adc <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8000b6a:	4818      	ldr	r0, [pc, #96]	; (8000bcc <MX_I2C1_Init+0xc0>)
 8000b6c:	f7ff ff8d 	bl	8000a8a <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 8000b70:	4816      	ldr	r0, [pc, #88]	; (8000bcc <MX_I2C1_Init+0xc0>)
 8000b72:	f7ff ff7a 	bl	8000a6a <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8000b76:	4815      	ldr	r0, [pc, #84]	; (8000bcc <MX_I2C1_Init+0xc0>)
 8000b78:	f7ff ff3c 	bl	80009f4 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8000b7c:	4813      	ldr	r0, [pc, #76]	; (8000bcc <MX_I2C1_Init+0xc0>)
 8000b7e:	f7ff ff29 	bl	80009d4 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8000b82:	2300      	movs	r3, #0
 8000b84:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x00101D7C;
 8000b86:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <MX_I2C1_Init+0xc4>)
 8000b88:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 8000b92:	2300      	movs	r3, #0
 8000b94:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8000b96:	2300      	movs	r3, #0
 8000b98:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_10BIT;
 8000b9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b9e:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8000ba0:	f107 031c 	add.w	r3, r7, #28
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4809      	ldr	r0, [pc, #36]	; (8000bcc <MX_I2C1_Init+0xc0>)
 8000ba8:	f001 f91a 	bl	8001de0 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8000bac:	2200      	movs	r2, #0
 8000bae:	2100      	movs	r1, #0
 8000bb0:	4806      	ldr	r0, [pc, #24]	; (8000bcc <MX_I2C1_Init+0xc0>)
 8000bb2:	f7ff ff42 	bl	8000a3a <LL_I2C_SetOwnAddress2>
  LL_I2C_SetMasterAddressingMode(I2C1, LL_I2C_ADDRESSING_MODE_10BIT);
 8000bb6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bba:	4804      	ldr	r0, [pc, #16]	; (8000bcc <MX_I2C1_Init+0xc0>)
 8000bbc:	f7ff ff2a 	bl	8000a14 <LL_I2C_SetMasterAddressingMode>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bc0:	bf00      	nop
 8000bc2:	3738      	adds	r7, #56	; 0x38
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	48000400 	.word	0x48000400
 8000bcc:	40005400 	.word	0x40005400
 8000bd0:	00101d7c 	.word	0x00101d7c

08000bd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f003 0307 	and.w	r3, r3, #7
 8000be2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be4:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <__NVIC_SetPriorityGrouping+0x44>)
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bea:	68ba      	ldr	r2, [r7, #8]
 8000bec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c06:	4a04      	ldr	r2, [pc, #16]	; (8000c18 <__NVIC_SetPriorityGrouping+0x44>)
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	60d3      	str	r3, [r2, #12]
}
 8000c0c:	bf00      	nop
 8000c0e:	3714      	adds	r7, #20
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c20:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <__NVIC_GetPriorityGrouping+0x18>)
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	0a1b      	lsrs	r3, r3, #8
 8000c26:	f003 0307 	and.w	r3, r3, #7
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	6039      	str	r1, [r7, #0]
 8000c42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	db0a      	blt.n	8000c62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c4c:	490d      	ldr	r1, [pc, #52]	; (8000c84 <__NVIC_SetPriority+0x4c>)
 8000c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c52:	683a      	ldr	r2, [r7, #0]
 8000c54:	b2d2      	uxtb	r2, r2
 8000c56:	0112      	lsls	r2, r2, #4
 8000c58:	b2d2      	uxtb	r2, r2
 8000c5a:	440b      	add	r3, r1
 8000c5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c60:	e00a      	b.n	8000c78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c62:	4909      	ldr	r1, [pc, #36]	; (8000c88 <__NVIC_SetPriority+0x50>)
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	f003 030f 	and.w	r3, r3, #15
 8000c6a:	3b04      	subs	r3, #4
 8000c6c:	683a      	ldr	r2, [r7, #0]
 8000c6e:	b2d2      	uxtb	r2, r2
 8000c70:	0112      	lsls	r2, r2, #4
 8000c72:	b2d2      	uxtb	r2, r2
 8000c74:	440b      	add	r3, r1
 8000c76:	761a      	strb	r2, [r3, #24]
}
 8000c78:	bf00      	nop
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	e000e100 	.word	0xe000e100
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b089      	sub	sp, #36	; 0x24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	f003 0307 	and.w	r3, r3, #7
 8000c9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ca0:	69fb      	ldr	r3, [r7, #28]
 8000ca2:	f1c3 0307 	rsb	r3, r3, #7
 8000ca6:	2b04      	cmp	r3, #4
 8000ca8:	bf28      	it	cs
 8000caa:	2304      	movcs	r3, #4
 8000cac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	3304      	adds	r3, #4
 8000cb2:	2b06      	cmp	r3, #6
 8000cb4:	d902      	bls.n	8000cbc <NVIC_EncodePriority+0x30>
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	3b03      	subs	r3, #3
 8000cba:	e000      	b.n	8000cbe <NVIC_EncodePriority+0x32>
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	69bb      	ldr	r3, [r7, #24]
 8000cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc8:	1e5a      	subs	r2, r3, #1
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	401a      	ands	r2, r3
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cda:	1e59      	subs	r1, r3, #1
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce0:	4313      	orrs	r3, r2
         );
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3724      	adds	r7, #36	; 0x24
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
	...

08000cf0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000cf4:	4a05      	ldr	r2, [pc, #20]	; (8000d0c <LL_RCC_HSI_Enable+0x1c>)
 8000cf6:	4b05      	ldr	r3, [pc, #20]	; (8000d0c <LL_RCC_HSI_Enable+0x1c>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f043 0301 	orr.w	r3, r3, #1
 8000cfe:	6013      	str	r3, [r2, #0]
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	40021000 	.word	0x40021000

08000d10 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000d14:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <LL_RCC_HSI_IsReady+0x20>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f003 0302 	and.w	r3, r3, #2
 8000d1c:	2b02      	cmp	r3, #2
 8000d1e:	bf0c      	ite	eq
 8000d20:	2301      	moveq	r3, #1
 8000d22:	2300      	movne	r3, #0
 8000d24:	b2db      	uxtb	r3, r3
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	40021000 	.word	0x40021000

08000d34 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000d3c:	4907      	ldr	r1, [pc, #28]	; (8000d5c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000d3e:	4b07      	ldr	r3, [pc, #28]	; (8000d5c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	00db      	lsls	r3, r3, #3
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	600b      	str	r3, [r1, #0]
}
 8000d4e:	bf00      	nop
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	40021000 	.word	0x40021000

08000d60 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8000d64:	4a05      	ldr	r2, [pc, #20]	; (8000d7c <LL_RCC_LSI_Enable+0x1c>)
 8000d66:	4b05      	ldr	r3, [pc, #20]	; (8000d7c <LL_RCC_LSI_Enable+0x1c>)
 8000d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d6a:	f043 0301 	orr.w	r3, r3, #1
 8000d6e:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	40021000 	.word	0x40021000

08000d80 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY));
 8000d84:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <LL_RCC_LSI_IsReady+0x20>)
 8000d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d88:	f003 0302 	and.w	r3, r3, #2
 8000d8c:	2b02      	cmp	r3, #2
 8000d8e:	bf0c      	ite	eq
 8000d90:	2301      	moveq	r3, #1
 8000d92:	2300      	movne	r3, #0
 8000d94:	b2db      	uxtb	r3, r3
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	40021000 	.word	0x40021000

08000da4 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000dac:	4906      	ldr	r1, [pc, #24]	; (8000dc8 <LL_RCC_SetSysClkSource+0x24>)
 8000dae:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <LL_RCC_SetSysClkSource+0x24>)
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	f023 0203 	bic.w	r2, r3, #3
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	604b      	str	r3, [r1, #4]
}
 8000dbc:	bf00      	nop
 8000dbe:	370c      	adds	r7, #12
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	40021000 	.word	0x40021000

08000dcc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000dd0:	4b04      	ldr	r3, [pc, #16]	; (8000de4 <LL_RCC_GetSysClkSource+0x18>)
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f003 030c 	and.w	r3, r3, #12
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	40021000 	.word	0x40021000

08000de8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000df0:	4906      	ldr	r1, [pc, #24]	; (8000e0c <LL_RCC_SetAHBPrescaler+0x24>)
 8000df2:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <LL_RCC_SetAHBPrescaler+0x24>)
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	604b      	str	r3, [r1, #4]
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	40021000 	.word	0x40021000

08000e10 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000e18:	4906      	ldr	r1, [pc, #24]	; (8000e34 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000e1a:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	604b      	str	r3, [r1, #4]
}
 8000e28:	bf00      	nop
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	40021000 	.word	0x40021000

08000e38 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000e40:	4906      	ldr	r1, [pc, #24]	; (8000e5c <LL_RCC_SetAPB2Prescaler+0x24>)
 8000e42:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <LL_RCC_SetAPB2Prescaler+0x24>)
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	604b      	str	r3, [r1, #4]
}
 8000e50:	bf00      	nop
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	40021000 	.word	0x40021000

08000e60 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 8000e68:	4908      	ldr	r1, [pc, #32]	; (8000e8c <LL_RCC_SetI2CClockSource+0x2c>)
 8000e6a:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <LL_RCC_SetI2CClockSource+0x2c>)
 8000e6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	0e1b      	lsrs	r3, r3, #24
 8000e72:	43db      	mvns	r3, r3
 8000e74:	401a      	ands	r2, r3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000e80:	bf00      	nop
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	40021000 	.word	0x40021000

08000e90 <LL_RCC_SetADCClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
#if defined(RCC_CFGR2_ADCPRE34)
  MODIFY_REG(RCC->CFGR2, (ADCxSource >> 16U), (ADCxSource & 0x0000FFFFU));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_ADCPRE12, ADCxSource);
 8000e98:	4906      	ldr	r1, [pc, #24]	; (8000eb4 <LL_RCC_SetADCClockSource+0x24>)
 8000e9a:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <LL_RCC_SetADCClockSource+0x24>)
 8000e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e9e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_ADCPRE34 */
}
 8000ea8:	bf00      	nop
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	40021000 	.word	0x40021000

08000eb8 <LL_RCC_SetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV32
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRTCClockSource(uint32_t Source)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8000ec0:	4906      	ldr	r1, [pc, #24]	; (8000edc <LL_RCC_SetRTCClockSource+0x24>)
 8000ec2:	4b06      	ldr	r3, [pc, #24]	; (8000edc <LL_RCC_SetRTCClockSource+0x24>)
 8000ec4:	6a1b      	ldr	r3, [r3, #32]
 8000ec6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	620b      	str	r3, [r1, #32]
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	40021000 	.word	0x40021000

08000ee0 <LL_RCC_GetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSE
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV32
  */
__STATIC_INLINE uint32_t LL_RCC_GetRTCClockSource(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8000ee4:	4b04      	ldr	r3, [pc, #16]	; (8000ef8 <LL_RCC_GetRTCClockSource+0x18>)
 8000ee6:	6a1b      	ldr	r3, [r3, #32]
 8000ee8:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	40021000 	.word	0x40021000

08000efc <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000f00:	4a05      	ldr	r2, [pc, #20]	; (8000f18 <LL_RCC_EnableRTC+0x1c>)
 8000f02:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <LL_RCC_EnableRTC+0x1c>)
 8000f04:	6a1b      	ldr	r3, [r3, #32]
 8000f06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f0a:	6213      	str	r3, [r2, #32]
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	40021000 	.word	0x40021000

08000f1c <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000f20:	4a05      	ldr	r2, [pc, #20]	; (8000f38 <LL_RCC_ForceBackupDomainReset+0x1c>)
 8000f22:	4b05      	ldr	r3, [pc, #20]	; (8000f38 <LL_RCC_ForceBackupDomainReset+0x1c>)
 8000f24:	6a1b      	ldr	r3, [r3, #32]
 8000f26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f2a:	6213      	str	r3, [r2, #32]
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	40021000 	.word	0x40021000

08000f3c <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000f40:	4a05      	ldr	r2, [pc, #20]	; (8000f58 <LL_RCC_ReleaseBackupDomainReset+0x1c>)
 8000f42:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <LL_RCC_ReleaseBackupDomainReset+0x1c>)
 8000f44:	6a1b      	ldr	r3, [r3, #32]
 8000f46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f4a:	6213      	str	r3, [r2, #32]
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	40021000 	.word	0x40021000

08000f5c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000f60:	4a05      	ldr	r2, [pc, #20]	; (8000f78 <LL_RCC_PLL_Enable+0x1c>)
 8000f62:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <LL_RCC_PLL_Enable+0x1c>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f6a:	6013      	str	r3, [r2, #0]
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	40021000 	.word	0x40021000

08000f7c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000f80:	4b07      	ldr	r3, [pc, #28]	; (8000fa0 <LL_RCC_PLL_IsReady+0x24>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000f8c:	bf0c      	ite	eq
 8000f8e:	2301      	moveq	r3, #1
 8000f90:	2300      	movne	r3, #0
 8000f92:	b2db      	uxtb	r3, r3
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	40021000 	.word	0x40021000

08000fa4 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, (Source & RCC_CFGR_PLLSRC) | PLLMul);
 8000fae:	480e      	ldr	r0, [pc, #56]	; (8000fe8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000fb0:	4b0d      	ldr	r3, [pc, #52]	; (8000fe8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	430b      	orrs	r3, r1
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	6043      	str	r3, [r0, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, (Source & RCC_CFGR2_PREDIV));
 8000fc6:	4908      	ldr	r1, [pc, #32]	; (8000fe8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000fc8:	4b07      	ldr	r3, [pc, #28]	; (8000fe8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fcc:	f023 020f 	bic.w	r2, r3, #15
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f003 030f 	and.w	r3, r3, #15
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8000fda:	bf00      	nop
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	40021000 	.word	0x40021000

08000fec <LL_APB1_GRP1_EnableClock>:
{
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000ff4:	4908      	ldr	r1, [pc, #32]	; (8001018 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000ff6:	4b08      	ldr	r3, [pc, #32]	; (8001018 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000ff8:	69da      	ldr	r2, [r3, #28]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001000:	4b05      	ldr	r3, [pc, #20]	; (8001018 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001002:	69da      	ldr	r2, [r3, #28]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4013      	ands	r3, r2
 8001008:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800100a:	68fb      	ldr	r3, [r7, #12]
}
 800100c:	bf00      	nop
 800100e:	3714      	adds	r7, #20
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	40021000 	.word	0x40021000

0800101c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800101c:	b480      	push	{r7}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001024:	4908      	ldr	r1, [pc, #32]	; (8001048 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001026:	4b08      	ldr	r3, [pc, #32]	; (8001048 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001028:	699a      	ldr	r2, [r3, #24]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4313      	orrs	r3, r2
 800102e:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001030:	4b05      	ldr	r3, [pc, #20]	; (8001048 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001032:	699a      	ldr	r2, [r3, #24]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4013      	ands	r3, r2
 8001038:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800103a:	68fb      	ldr	r3, [r7, #12]
}
 800103c:	bf00      	nop
 800103e:	3714      	adds	r7, #20
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	40021000 	.word	0x40021000

0800104c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001054:	4906      	ldr	r1, [pc, #24]	; (8001070 <LL_FLASH_SetLatency+0x24>)
 8001056:	4b06      	ldr	r3, [pc, #24]	; (8001070 <LL_FLASH_SetLatency+0x24>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f023 0207 	bic.w	r2, r3, #7
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4313      	orrs	r3, r2
 8001062:	600b      	str	r3, [r1, #0]
}
 8001064:	bf00      	nop
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	40022000 	.word	0x40022000

08001074 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001078:	4b04      	ldr	r3, [pc, #16]	; (800108c <LL_FLASH_GetLatency+0x18>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f003 0307 	and.w	r3, r3, #7
}
 8001080:	4618      	mov	r0, r3
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	40022000 	.word	0x40022000

08001090 <LL_PWR_EnableBkUpAccess>:
  * @brief  Enable access to the backup domain
  * @rmtoll CR    DBP       LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8001094:	4a05      	ldr	r2, [pc, #20]	; (80010ac <LL_PWR_EnableBkUpAccess+0x1c>)
 8001096:	4b05      	ldr	r3, [pc, #20]	; (80010ac <LL_PWR_EnableBkUpAccess+0x1c>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800109e:	6013      	str	r3, [r2, #0]
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	40007000 	.word	0x40007000

080010b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010b0:	b590      	push	{r4, r7, lr}
 80010b2:	b087      	sub	sp, #28
 80010b4:	af02      	add	r7, sp, #8

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f7ff ffb0 	bl	800101c <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80010bc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80010c0:	f7ff ff94 	bl	8000fec <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c4:	2003      	movs	r0, #3
 80010c6:	f7ff fd85 	bl	8000bd4 <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 80010ca:	f7ff fda7 	bl	8000c1c <__NVIC_GetPriorityGrouping>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2200      	movs	r2, #0
 80010d2:	210f      	movs	r1, #15
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff fdd9 	bl	8000c8c <NVIC_EncodePriority>
 80010da:	4603      	mov	r3, r0
 80010dc:	4619      	mov	r1, r3
 80010de:	f04f 30ff 	mov.w	r0, #4294967295
 80010e2:	f7ff fda9 	bl	8000c38 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010e6:	f000 f83b 	bl	8001160 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ea:	f7ff fb2b 	bl	8000744 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_TEMPSen_Init();
 80010ee:	f002 f94e 	bl	800338e <HAL_TEMPSen_Init>
  HAL_RTC_Init();
 80010f2:	f002 f946 	bl	8003382 <HAL_RTC_Init>
  HAL_LCD_Init();
 80010f6:	f001 ff23 	bl	8002f40 <HAL_LCD_Init>
  //TEST fer
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_POT_Init();
 80010fa:	f002 f8bf 	bl	800327c <HAL_POT_Init>
  //HAL_LCD_MENU(0,0,0,0);


  HAL_LCD_Write_AsciiString("Iniciando",36,1);
 80010fe:	2201      	movs	r2, #1
 8001100:	2124      	movs	r1, #36	; 0x24
 8001102:	4816      	ldr	r0, [pc, #88]	; (800115c <main+0xac>)
 8001104:	f002 f858 	bl	80031b8 <HAL_LCD_Write_AsciiString>
  LL_mDelay(1000);
 8001108:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800110c:	f001 fa8c 	bl	8002628 <LL_mDelay>
  HAL_LCD_Clear();
 8001110:	f001 ff8f 	bl	8003032 <HAL_LCD_Clear>

  while (1)
  {
	  short btnu = MX_Joystick_Up();
 8001114:	f7ff fbb0 	bl	8000878 <MX_Joystick_Up>
 8001118:	4603      	mov	r3, r0
 800111a:	81fb      	strh	r3, [r7, #14]
	  short btnd = MX_Joystick_Down();
 800111c:	f7ff fbbc 	bl	8000898 <MX_Joystick_Down>
 8001120:	4603      	mov	r3, r0
 8001122:	81bb      	strh	r3, [r7, #12]
	  short btnl = MX_Joystick_Left();
 8001124:	f7ff fbdc 	bl	80008e0 <MX_Joystick_Left>
 8001128:	4603      	mov	r3, r0
 800112a:	817b      	strh	r3, [r7, #10]
	  short btnr = MX_Joystick_Right();
 800112c:	f7ff fbc6 	bl	80008bc <MX_Joystick_Right>
 8001130:	4603      	mov	r3, r0
 8001132:	813b      	strh	r3, [r7, #8]
	  short btnc = MX_Joystick_Center();
 8001134:	f7ff fbe6 	bl	8000904 <MX_Joystick_Center>
 8001138:	4603      	mov	r3, r0
 800113a:	80fb      	strh	r3, [r7, #6]
	  //POT1_Value = HAL_POT_Percentage(POT1_Channel);

	  fsm(btnu, btnd, btnl, btnr, btnc);
 800113c:	f9b7 4008 	ldrsh.w	r4, [r7, #8]
 8001140:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001144:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001148:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800114c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001150:	9300      	str	r3, [sp, #0]
 8001152:	4623      	mov	r3, r4
 8001154:	f001 feae 	bl	8002eb4 <fsm>
  {
 8001158:	e7dc      	b.n	8001114 <main+0x64>
 800115a:	bf00      	nop
 800115c:	08003460 	.word	0x08003460

08001160 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8001164:	2002      	movs	r0, #2
 8001166:	f7ff ff71 	bl	800104c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 800116a:	bf00      	nop
 800116c:	f7ff ff82 	bl	8001074 <LL_FLASH_GetLatency>
 8001170:	4603      	mov	r3, r0
 8001172:	2b02      	cmp	r3, #2
 8001174:	d1fa      	bne.n	800116c <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 8001176:	f7ff fdbb 	bl	8000cf0 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 800117a:	bf00      	nop
 800117c:	f7ff fdc8 	bl	8000d10 <LL_RCC_HSI_IsReady>
 8001180:	4603      	mov	r3, r0
 8001182:	2b01      	cmp	r3, #1
 8001184:	d1fa      	bne.n	800117c <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8001186:	2010      	movs	r0, #16
 8001188:	f7ff fdd4 	bl	8000d34 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_LSI_Enable();
 800118c:	f7ff fde8 	bl	8000d60 <LL_RCC_LSI_Enable>

   /* Wait till LSI is ready */
  while(LL_RCC_LSI_IsReady() != 1)
 8001190:	bf00      	nop
 8001192:	f7ff fdf5 	bl	8000d80 <LL_RCC_LSI_IsReady>
 8001196:	4603      	mov	r3, r0
 8001198:	2b01      	cmp	r3, #1
 800119a:	d1fa      	bne.n	8001192 <SystemClock_Config+0x32>
  {

  }
  LL_PWR_EnableBkUpAccess();
 800119c:	f7ff ff78 	bl	8001090 <LL_PWR_EnableBkUpAccess>
  if(LL_RCC_GetRTCClockSource() != LL_RCC_RTC_CLKSOURCE_LSI)
 80011a0:	f7ff fe9e 	bl	8000ee0 <LL_RCC_GetRTCClockSource>
 80011a4:	4603      	mov	r3, r0
 80011a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011aa:	d007      	beq.n	80011bc <SystemClock_Config+0x5c>
  {
    LL_RCC_ForceBackupDomainReset();
 80011ac:	f7ff feb6 	bl	8000f1c <LL_RCC_ForceBackupDomainReset>
    LL_RCC_ReleaseBackupDomainReset();
 80011b0:	f7ff fec4 	bl	8000f3c <LL_RCC_ReleaseBackupDomainReset>
    LL_RCC_SetRTCClockSource(LL_RCC_RTC_CLKSOURCE_LSI);
 80011b4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011b8:	f7ff fe7e 	bl	8000eb8 <LL_RCC_SetRTCClockSource>
  }
  LL_RCC_EnableRTC();
 80011bc:	f7ff fe9e 	bl	8000efc <LL_RCC_EnableRTC>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI_DIV_2, LL_RCC_PLL_MUL_16);
 80011c0:	f44f 1160 	mov.w	r1, #3670016	; 0x380000
 80011c4:	2000      	movs	r0, #0
 80011c6:	f7ff feed 	bl	8000fa4 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80011ca:	f7ff fec7 	bl	8000f5c <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80011ce:	bf00      	nop
 80011d0:	f7ff fed4 	bl	8000f7c <LL_RCC_PLL_IsReady>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d1fa      	bne.n	80011d0 <SystemClock_Config+0x70>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80011da:	2000      	movs	r0, #0
 80011dc:	f7ff fe04 	bl	8000de8 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 80011e0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80011e4:	f7ff fe14 	bl	8000e10 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_16);
 80011e8:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 80011ec:	f7ff fe24 	bl	8000e38 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80011f0:	2002      	movs	r0, #2
 80011f2:	f7ff fdd7 	bl	8000da4 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80011f6:	bf00      	nop
 80011f8:	f7ff fde8 	bl	8000dcc <LL_RCC_GetSysClkSource>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b08      	cmp	r3, #8
 8001200:	d1fa      	bne.n	80011f8 <SystemClock_Config+0x98>
  {

  }
  LL_Init1msTick(64000000);
 8001202:	4808      	ldr	r0, [pc, #32]	; (8001224 <SystemClock_Config+0xc4>)
 8001204:	f001 fa02 	bl	800260c <LL_Init1msTick>
  LL_SetSystemCoreClock(64000000);
 8001208:	4806      	ldr	r0, [pc, #24]	; (8001224 <SystemClock_Config+0xc4>)
 800120a:	f001 fa31 	bl	8002670 <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 800120e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001212:	f7ff fe25 	bl	8000e60 <LL_RCC_SetI2CClockSource>
  LL_RCC_SetADCClockSource(LL_RCC_ADC12_CLKSRC_PLL_DIV_1);
 8001216:	f44f 7080 	mov.w	r0, #256	; 0x100
 800121a:	f7ff fe39 	bl	8000e90 <LL_RCC_SetADCClockSource>
}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	03d09000 	.word	0x03d09000

08001228 <LL_RCC_EnableRTC>:
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800122c:	4a05      	ldr	r2, [pc, #20]	; (8001244 <LL_RCC_EnableRTC+0x1c>)
 800122e:	4b05      	ldr	r3, [pc, #20]	; (8001244 <LL_RCC_EnableRTC+0x1c>)
 8001230:	6a1b      	ldr	r3, [r3, #32]
 8001232:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001236:	6213      	str	r3, [r2, #32]
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	40021000 	.word	0x40021000

08001248 <LL_RTC_EnableInitMode>:
  * @rmtoll ISR          INIT          LL_RTC_EnableInitMode
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableInitMode(RTC_TypeDef *RTCx)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  /* Set the Initialization mode */
  WRITE_REG(RTCx->ISR, RTC_INIT_MASK);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f04f 32ff 	mov.w	r2, #4294967295
 8001256:	60da      	str	r2, [r3, #12]
}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <LL_RTC_DisableInitMode>:
  * @rmtoll ISR          INIT          LL_RTC_DisableInitMode
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableInitMode(RTC_TypeDef *RTCx)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* Exit Initialization mode */
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001272:	60da      	str	r2, [r3, #12]
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <LL_RTC_SetAsynchPrescaler>:
  * @param  RTCx RTC Instance
  * @param  AsynchPrescaler Value between Min_Data = 0 and Max_Data = 0x7F
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetAsynchPrescaler(RTC_TypeDef *RTCx, uint32_t AsynchPrescaler)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_PRER_PREDIV_A_Pos);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	691b      	ldr	r3, [r3, #16]
 800128e:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	041b      	lsls	r3, r3, #16
 8001296:	431a      	orrs	r2, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	611a      	str	r2, [r3, #16]
}
 800129c:	bf00      	nop
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <LL_RTC_SetSynchPrescaler>:
  * @param  RTCx RTC Instance
  * @param  SynchPrescaler Value between Min_Data = 0 and Max_Data = 0x7FFF
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetSynchPrescaler(RTC_TypeDef *RTCx, uint32_t SynchPrescaler)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	691b      	ldr	r3, [r3, #16]
 80012b6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80012ba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80012be:	683a      	ldr	r2, [r7, #0]
 80012c0:	431a      	orrs	r2, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	611a      	str	r2, [r3, #16]
}
 80012c6:	bf00      	nop
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80012d2:	b480      	push	{r7}
 80012d4:	b083      	sub	sp, #12
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	22ff      	movs	r2, #255	; 0xff
 80012de:	625a      	str	r2, [r3, #36]	; 0x24
}
 80012e0:	bf00      	nop
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	22ca      	movs	r2, #202	; 0xca
 80012f8:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2253      	movs	r2, #83	; 0x53
 80012fe:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001300:	bf00      	nop
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <LL_RTC_BAK_SetRegister>:
  *         (*) value not defined in all devices.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_RTC_BAK_SetRegister(RTC_TypeDef *RTCx, uint32_t BackupRegister, uint32_t Data)
{
 800130c:	b480      	push	{r7}
 800130e:	b087      	sub	sp, #28
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]

  tmp = (uint32_t)(&(RTCx->BKP0R));
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	3350      	adds	r3, #80	; 0x50
 8001320:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	697a      	ldr	r2, [r7, #20]
 8001328:	4413      	add	r3, r2
 800132a:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	601a      	str	r2, [r3, #0]
}
 8001332:	bf00      	nop
 8001334:	371c      	adds	r7, #28
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr

0800133e <LL_RTC_BAK_GetRegister>:
  *
  *         (*) value not defined in all devices.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_BAK_GetRegister(RTC_TypeDef *RTCx, uint32_t BackupRegister)
{
 800133e:	b480      	push	{r7}
 8001340:	b085      	sub	sp, #20
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
 8001346:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8001348:	2300      	movs	r3, #0
 800134a:	60fb      	str	r3, [r7, #12]

  tmp = (uint32_t)(&(RTCx->BKP0R));
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3350      	adds	r3, #80	; 0x50
 8001350:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	68fa      	ldr	r2, [r7, #12]
 8001358:	4413      	add	r3, r2
 800135a:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	681b      	ldr	r3, [r3, #0]
}
 8001360:	4618      	mov	r0, r3
 8001362:	3714      	adds	r7, #20
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <LL_RTC_IsActiveFlag_INIT>:
  * @rmtoll ISR          INITF         LL_RTC_IsActiveFlag_INIT
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_INIT(RTC_TypeDef *RTCx)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF));
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800137c:	2b40      	cmp	r3, #64	; 0x40
 800137e:	bf0c      	ite	eq
 8001380:	2301      	moveq	r3, #1
 8001382:	2300      	movne	r3, #0
 8001384:	b2db      	uxtb	r3, r3
}
 8001386:	4618      	mov	r0, r3
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr

08001392 <LL_RTC_IsActiveFlag_RS>:
  * @rmtoll ISR          RSF           LL_RTC_IsActiveFlag_RS
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_RS(RTC_TypeDef *RTCx)
{
 8001392:	b480      	push	{r7}
 8001394:	b083      	sub	sp, #12
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ISR, RTC_ISR_RSF) == (RTC_ISR_RSF));
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	68db      	ldr	r3, [r3, #12]
 800139e:	f003 0320 	and.w	r3, r3, #32
 80013a2:	2b20      	cmp	r3, #32
 80013a4:	bf0c      	ite	eq
 80013a6:	2301      	moveq	r3, #1
 80013a8:	2300      	movne	r3, #0
 80013aa:	b2db      	uxtb	r3, r3
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <LL_RTC_ClearFlag_RS>:
  * @rmtoll ISR          RSF           LL_RTC_ClearFlag_RS
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_ClearFlag_RS(RTC_TypeDef *RTCx)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, (~((RTC_ISR_RSF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTCx->ISR & RTC_ISR_INIT)));
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013c8:	f063 02a0 	orn	r2, r3, #160	; 0xa0
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	60da      	str	r2, [r3, #12]
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <MX_RTC_Init>:

/* USER CODE END 0 */

/* RTC init function */
void MX_RTC_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  LL_RTC_InitTypeDef RTC_InitStruct = {0};
 80013e2:	f107 030c 	add.w	r3, r7, #12
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	609a      	str	r2, [r3, #8]
  LL_RTC_TimeTypeDef RTC_TimeStruct = {0};
 80013ee:	1d3b      	adds	r3, r7, #4
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
  LL_RTC_DateTypeDef RTC_DateStruct = {0};
 80013f6:	2300      	movs	r3, #0
 80013f8:	603b      	str	r3, [r7, #0]

  /* Peripheral clock enable */
  LL_RCC_EnableRTC();
 80013fa:	f7ff ff15 	bl	8001228 <LL_RCC_EnableRTC>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC and set the Time and Date
  */
  RTC_InitStruct.HourFormat = LL_RTC_HOURFORMAT_24HOUR;
 80013fe:	2300      	movs	r3, #0
 8001400:	60fb      	str	r3, [r7, #12]
  RTC_InitStruct.AsynchPrescaler = 127;
 8001402:	237f      	movs	r3, #127	; 0x7f
 8001404:	613b      	str	r3, [r7, #16]
  RTC_InitStruct.SynchPrescaler = 255;
 8001406:	23ff      	movs	r3, #255	; 0xff
 8001408:	617b      	str	r3, [r7, #20]
  LL_RTC_Init(RTC, &RTC_InitStruct);
 800140a:	f107 030c 	add.w	r3, r7, #12
 800140e:	4619      	mov	r1, r3
 8001410:	481f      	ldr	r0, [pc, #124]	; (8001490 <MX_RTC_Init+0xb4>)
 8001412:	f000 fe53 	bl	80020bc <LL_RTC_Init>
  LL_RTC_SetAsynchPrescaler(RTC, 127);
 8001416:	217f      	movs	r1, #127	; 0x7f
 8001418:	481d      	ldr	r0, [pc, #116]	; (8001490 <MX_RTC_Init+0xb4>)
 800141a:	f7ff ff31 	bl	8001280 <LL_RTC_SetAsynchPrescaler>
  LL_RTC_SetSynchPrescaler(RTC, 255);
 800141e:	21ff      	movs	r1, #255	; 0xff
 8001420:	481b      	ldr	r0, [pc, #108]	; (8001490 <MX_RTC_Init+0xb4>)
 8001422:	f7ff ff41 	bl	80012a8 <LL_RTC_SetSynchPrescaler>
  /** Initialize RTC and set the Time and Date
  */
  if(LL_RTC_BAK_GetRegister(RTC, LL_RTC_BKP_DR0) != 0x32F2){
 8001426:	2100      	movs	r1, #0
 8001428:	4819      	ldr	r0, [pc, #100]	; (8001490 <MX_RTC_Init+0xb4>)
 800142a:	f7ff ff88 	bl	800133e <LL_RTC_BAK_GetRegister>
 800142e:	4602      	mov	r2, r0
 8001430:	f243 23f2 	movw	r3, #13042	; 0x32f2
 8001434:	429a      	cmp	r2, r3
 8001436:	d01d      	beq.n	8001474 <MX_RTC_Init+0x98>

  RTC_TimeStruct.Hours = 0;
 8001438:	2300      	movs	r3, #0
 800143a:	723b      	strb	r3, [r7, #8]
  RTC_TimeStruct.Minutes = 0;
 800143c:	2300      	movs	r3, #0
 800143e:	727b      	strb	r3, [r7, #9]
  RTC_TimeStruct.Seconds = 0;
 8001440:	2300      	movs	r3, #0
 8001442:	72bb      	strb	r3, [r7, #10]
  LL_RTC_TIME_Init(RTC, LL_RTC_FORMAT_BIN, &RTC_TimeStruct);
 8001444:	1d3b      	adds	r3, r7, #4
 8001446:	461a      	mov	r2, r3
 8001448:	2100      	movs	r1, #0
 800144a:	4811      	ldr	r0, [pc, #68]	; (8001490 <MX_RTC_Init+0xb4>)
 800144c:	f000 fe66 	bl	800211c <LL_RTC_TIME_Init>
  RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_MONDAY;
 8001450:	2301      	movs	r3, #1
 8001452:	703b      	strb	r3, [r7, #0]
  RTC_DateStruct.Month = LL_RTC_MONTH_JANUARY;
 8001454:	2301      	movs	r3, #1
 8001456:	707b      	strb	r3, [r7, #1]
  RTC_DateStruct.Year = 0;
 8001458:	2300      	movs	r3, #0
 800145a:	70fb      	strb	r3, [r7, #3]
  LL_RTC_DATE_Init(RTC, LL_RTC_FORMAT_BIN, &RTC_DateStruct);
 800145c:	463b      	mov	r3, r7
 800145e:	461a      	mov	r2, r3
 8001460:	2100      	movs	r1, #0
 8001462:	480b      	ldr	r0, [pc, #44]	; (8001490 <MX_RTC_Init+0xb4>)
 8001464:	f000 ff00 	bl	8002268 <LL_RTC_DATE_Init>
    LL_RTC_BAK_SetRegister(RTC,LL_RTC_BKP_DR0,0x32F2);
 8001468:	f243 22f2 	movw	r2, #13042	; 0x32f2
 800146c:	2100      	movs	r1, #0
 800146e:	4808      	ldr	r0, [pc, #32]	; (8001490 <MX_RTC_Init+0xb4>)
 8001470:	f7ff ff4c 	bl	800130c <LL_RTC_BAK_SetRegister>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  LL_RTC_DisableWriteProtection(RTC);
 8001474:	4806      	ldr	r0, [pc, #24]	; (8001490 <MX_RTC_Init+0xb4>)
 8001476:	f7ff ff39 	bl	80012ec <LL_RTC_DisableWriteProtection>
  MX_RTC_Enter_InitMode();
 800147a:	f000 f80b 	bl	8001494 <MX_RTC_Enter_InitMode>

  MX_RTC_Exit_InitMode();
 800147e:	f000 f819 	bl	80014b4 <MX_RTC_Exit_InitMode>
  LL_RTC_EnableWriteProtection(RTC);
 8001482:	4803      	ldr	r0, [pc, #12]	; (8001490 <MX_RTC_Init+0xb4>)
 8001484:	f7ff ff25 	bl	80012d2 <LL_RTC_EnableWriteProtection>
  /* USER CODE END RTC_Init 2 */

}
 8001488:	bf00      	nop
 800148a:	3718      	adds	r7, #24
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40002800 	.word	0x40002800

08001494 <MX_RTC_Enter_InitMode>:

/* USER CODE BEGIN 1 */

/*This functions is to start the RTC initialization mode*/
void MX_RTC_Enter_InitMode(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
	LL_RTC_EnableInitMode(RTC);
 8001498:	4805      	ldr	r0, [pc, #20]	; (80014b0 <MX_RTC_Enter_InitMode+0x1c>)
 800149a:	f7ff fed5 	bl	8001248 <LL_RTC_EnableInitMode>
	while (!LL_RTC_IsActiveFlag_INIT(RTC));
 800149e:	bf00      	nop
 80014a0:	4803      	ldr	r0, [pc, #12]	; (80014b0 <MX_RTC_Enter_InitMode+0x1c>)
 80014a2:	f7ff ff63 	bl	800136c <LL_RTC_IsActiveFlag_INIT>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d0f9      	beq.n	80014a0 <MX_RTC_Enter_InitMode+0xc>

	return;
 80014ac:	bf00      	nop
}
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40002800 	.word	0x40002800

080014b4 <MX_RTC_Exit_InitMode>:

/*This functions is to finish the RTC initialization mode*/
void MX_RTC_Exit_InitMode (void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
	LL_RTC_DisableInitMode(RTC);
 80014b8:	4807      	ldr	r0, [pc, #28]	; (80014d8 <MX_RTC_Exit_InitMode+0x24>)
 80014ba:	f7ff fed3 	bl	8001264 <LL_RTC_DisableInitMode>
	LL_RTC_ClearFlag_RS(RTC);
 80014be:	4806      	ldr	r0, [pc, #24]	; (80014d8 <MX_RTC_Exit_InitMode+0x24>)
 80014c0:	f7ff ff7a 	bl	80013b8 <LL_RTC_ClearFlag_RS>
	while (!LL_RTC_IsActiveFlag_RS(RTC));
 80014c4:	bf00      	nop
 80014c6:	4804      	ldr	r0, [pc, #16]	; (80014d8 <MX_RTC_Exit_InitMode+0x24>)
 80014c8:	f7ff ff63 	bl	8001392 <LL_RTC_IsActiveFlag_RS>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d0f9      	beq.n	80014c6 <MX_RTC_Exit_InitMode+0x12>
}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40002800 	.word	0x40002800

080014dc <LL_AHB1_GRP1_EnableClock>:
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80014e4:	4908      	ldr	r1, [pc, #32]	; (8001508 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80014e6:	4b08      	ldr	r3, [pc, #32]	; (8001508 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80014e8:	695a      	ldr	r2, [r3, #20]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80014f0:	4b05      	ldr	r3, [pc, #20]	; (8001508 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80014f2:	695a      	ldr	r2, [r3, #20]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	4013      	ands	r3, r2
 80014f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014fa:	68fb      	ldr	r3, [r7, #12]
}
 80014fc:	bf00      	nop
 80014fe:	3714      	adds	r7, #20
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	40021000 	.word	0x40021000

0800150c <LL_APB2_GRP1_EnableClock>:
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001514:	4908      	ldr	r1, [pc, #32]	; (8001538 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001516:	4b08      	ldr	r3, [pc, #32]	; (8001538 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001518:	699a      	ldr	r2, [r3, #24]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4313      	orrs	r3, r2
 800151e:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001520:	4b05      	ldr	r3, [pc, #20]	; (8001538 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001522:	699a      	ldr	r2, [r3, #24]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4013      	ands	r3, r2
 8001528:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800152a:	68fb      	ldr	r3, [r7, #12]
}
 800152c:	bf00      	nop
 800152e:	3714      	adds	r7, #20
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	40021000 	.word	0x40021000

0800153c <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	601a      	str	r2, [r3, #0]
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f023 0210 	bic.w	r2, r3, #16
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	431a      	orrs	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	605a      	str	r2, [r3, #4]
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <LL_SPI_DisableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_DisableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 8001582:	b480      	push	{r7}
 8001584:	b083      	sub	sp, #12
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f023 0208 	bic.w	r2, r3, #8
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	605a      	str	r2, [r3, #4]
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 80015a2:	b480      	push	{r7}
 80015a4:	b083      	sub	sp, #12
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d101      	bne.n	80015ba <LL_SPI_IsActiveFlag_TXE+0x18>
 80015b6:	2301      	movs	r3, #1
 80015b8:	e000      	b.n	80015bc <LL_SPI_IsActiveFlag_TXE+0x1a>
 80015ba:	2300      	movs	r3, #0
}
 80015bc:	4618      	mov	r0, r3
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <LL_SPI_IsActiveFlag_BSY>:
  * @rmtoll SR           BSY           LL_SPI_IsActiveFlag_BSY
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_BSY(SPI_TypeDef *SPIx)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015d8:	2b80      	cmp	r3, #128	; 0x80
 80015da:	d101      	bne.n	80015e0 <LL_SPI_IsActiveFlag_BSY+0x18>
 80015dc:	2301      	movs	r3, #1
 80015de:	e000      	b.n	80015e2 <LL_SPI_IsActiveFlag_BSY+0x1a>
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 80015ee:	b480      	push	{r7}
 80015f0:	b085      	sub	sp, #20
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
 80015f6:	460b      	mov	r3, r1
 80015f8:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	330c      	adds	r3, #12
 80015fe:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	78fa      	ldrb	r2, [r7, #3]
 8001604:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8001606:	bf00      	nop
 8001608:	3714      	adds	r7, #20
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <LL_GPIO_SetOutputPin>:
{
 8001612:	b480      	push	{r7}
 8001614:	b083      	sub	sp, #12
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
 800161a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	683a      	ldr	r2, [r7, #0]
 8001620:	619a      	str	r2, [r3, #24]
}
 8001622:	bf00      	nop
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <LL_GPIO_ResetOutputPin>:
{
 800162e:	b480      	push	{r7}
 8001630:	b083      	sub	sp, #12
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
 8001636:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	683a      	ldr	r2, [r7, #0]
 800163c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800163e:	bf00      	nop
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
	...

0800164c <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b090      	sub	sp, #64	; 0x40
 8001650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001652:	f107 0318 	add.w	r3, r7, #24
 8001656:	2228      	movs	r2, #40	; 0x28
 8001658:	2100      	movs	r1, #0
 800165a:	4618      	mov	r0, r3
 800165c:	f001 feec 	bl	8003438 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001660:	463b      	mov	r3, r7
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	605a      	str	r2, [r3, #4]
 8001668:	609a      	str	r2, [r3, #8]
 800166a:	60da      	str	r2, [r3, #12]
 800166c:	611a      	str	r2, [r3, #16]
 800166e:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8001670:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001674:	f7ff ff4a 	bl	800150c <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001678:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800167c:	f7ff ff2e 	bl	80014dc <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8001680:	2320      	movs	r3, #32
 8001682:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001684:	2302      	movs	r3, #2
 8001686:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001688:	2303      	movs	r3, #3
 800168a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001690:	2301      	movs	r3, #1
 8001692:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001694:	2305      	movs	r3, #5
 8001696:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001698:	463b      	mov	r3, r7
 800169a:	4619      	mov	r1, r3
 800169c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016a0:	f000 fa8b 	bl	8001bba <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 80016a4:	2380      	movs	r3, #128	; 0x80
 80016a6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80016a8:	2302      	movs	r3, #2
 80016aa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80016ac:	2303      	movs	r3, #3
 80016ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80016b4:	2302      	movs	r3, #2
 80016b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80016b8:	2305      	movs	r3, #5
 80016ba:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016bc:	463b      	mov	r3, r7
 80016be:	4619      	mov	r1, r3
 80016c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016c4:	f000 fa79 	bl	8001bba <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80016c8:	2300      	movs	r3, #0
 80016ca:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80016cc:	f44f 7382 	mov.w	r3, #260	; 0x104
 80016d0:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80016d2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80016d6:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80016d8:	2302      	movs	r3, #2
 80016da:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80016dc:	2301      	movs	r3, #1
 80016de:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80016e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV256;
 80016e6:	2338      	movs	r3, #56	; 0x38
 80016e8:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80016ea:	2300      	movs	r3, #0
 80016ec:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80016ee:	2300      	movs	r3, #0
 80016f0:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 80016f2:	2307      	movs	r3, #7
 80016f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 80016f6:	f107 0318 	add.w	r3, r7, #24
 80016fa:	4619      	mov	r1, r3
 80016fc:	4808      	ldr	r0, [pc, #32]	; (8001720 <MX_SPI1_Init+0xd4>)
 80016fe:	f000 ff13 	bl	8002528 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8001702:	2100      	movs	r1, #0
 8001704:	4806      	ldr	r0, [pc, #24]	; (8001720 <MX_SPI1_Init+0xd4>)
 8001706:	f7ff ff29 	bl	800155c <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI1);
 800170a:	4805      	ldr	r0, [pc, #20]	; (8001720 <MX_SPI1_Init+0xd4>)
 800170c:	f7ff ff39 	bl	8001582 <LL_SPI_DisableNSSPulseMgt>
  /* USER CODE BEGIN SPI1_Init 2 */
 LL_SPI_Enable(SPI1);
 8001710:	4803      	ldr	r0, [pc, #12]	; (8001720 <MX_SPI1_Init+0xd4>)
 8001712:	f7ff ff13 	bl	800153c <LL_SPI_Enable>
  /* USER CODE END SPI1_Init 2 */

}
 8001716:	bf00      	nop
 8001718:	3740      	adds	r7, #64	; 0x40
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40013000 	.word	0x40013000

08001724 <MX_SPI1_Send>:

/* USER CODE BEGIN 1 */
void MX_SPI1_Send(uint8_t tx)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	71fb      	strb	r3, [r7, #7]
	/*This functions sends a command/data of 8 bits, if A0=0, we send a command
	, if A0=1, we send a data*/

	/*Check BSY flag, SPI is not busy */
	while (LL_SPI_IsActiveFlag_BSY(SPI1));
 800172e:	bf00      	nop
 8001730:	480a      	ldr	r0, [pc, #40]	; (800175c <MX_SPI1_Send+0x38>)
 8001732:	f7ff ff49 	bl	80015c8 <LL_SPI_IsActiveFlag_BSY>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d1f9      	bne.n	8001730 <MX_SPI1_Send+0xc>

	/*Send data of 8 bits*/
	LL_SPI_TransmitData8(SPI1, tx);
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	4619      	mov	r1, r3
 8001740:	4806      	ldr	r0, [pc, #24]	; (800175c <MX_SPI1_Send+0x38>)
 8001742:	f7ff ff54 	bl	80015ee <LL_SPI_TransmitData8>

	/*Wait until the Tx Buffer is empty*/
	while (!LL_SPI_IsActiveFlag_TXE(SPI1));
 8001746:	bf00      	nop
 8001748:	4804      	ldr	r0, [pc, #16]	; (800175c <MX_SPI1_Send+0x38>)
 800174a:	f7ff ff2a 	bl	80015a2 <LL_SPI_IsActiveFlag_TXE>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d0f9      	beq.n	8001748 <MX_SPI1_Send+0x24>

	return;
 8001754:	bf00      	nop

}
 8001756:	3708      	adds	r7, #8
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40013000 	.word	0x40013000

08001760 <MX_SPI1_CS_Enable>:
void MX_SPI1_CS_Enable(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
	/*Pin PB6 is configured as CHIP SELECT signal of SPI1,
	CPOL=1, therefore, it is active in LOW
	PB6   ------> SPI1_CS_N*/

	LL_GPIO_ResetOutputPin(LCD_CS_N_GPIO_Port,LCD_CS_N_Pin );
 8001764:	2140      	movs	r1, #64	; 0x40
 8001766:	4802      	ldr	r0, [pc, #8]	; (8001770 <MX_SPI1_CS_Enable+0x10>)
 8001768:	f7ff ff61 	bl	800162e <LL_GPIO_ResetOutputPin>
}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}
 8001770:	48000400 	.word	0x48000400

08001774 <MX_SPI1_CS_Disable>:
void MX_SPI1_CS_Disable(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
	/*Pin PB6 is configured as CHIP SELECT signal of SPI1,
	CPOL=1, therefore, it is disable in HIGH
	PB6   ------> SPI1_CS_N*/

	LL_GPIO_SetOutputPin(LCD_CS_N_GPIO_Port,LCD_CS_N_Pin);
 8001778:	2140      	movs	r1, #64	; 0x40
 800177a:	4802      	ldr	r0, [pc, #8]	; (8001784 <MX_SPI1_CS_Disable+0x10>)
 800177c:	f7ff ff49 	bl	8001612 <LL_GPIO_SetOutputPin>
}
 8001780:	bf00      	nop
 8001782:	bd80      	pop	{r7, pc}
 8001784:	48000400 	.word	0x48000400

08001788 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800178c:	e7fe      	b.n	800178c <NMI_Handler+0x4>

0800178e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001792:	e7fe      	b.n	8001792 <HardFault_Handler+0x4>

08001794 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001798:	e7fe      	b.n	8001798 <MemManage_Handler+0x4>

0800179a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800179a:	b480      	push	{r7}
 800179c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800179e:	e7fe      	b.n	800179e <BusFault_Handler+0x4>

080017a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017a4:	e7fe      	b.n	80017a4 <UsageFault_Handler+0x4>

080017a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017a6:	b480      	push	{r7}
 80017a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017c2:	b480      	push	{r7}
 80017c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
	...

080017e0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017e4:	4a06      	ldr	r2, [pc, #24]	; (8001800 <SystemInit+0x20>)
 80017e6:	4b06      	ldr	r3, [pc, #24]	; (8001800 <SystemInit+0x20>)
 80017e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017f4:	bf00      	nop
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	e000ed00 	.word	0xe000ed00

08001804 <LL_ADC_REG_SetSequencerLength>:
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	f023 020f 	bic.w	r2, r3, #15
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	431a      	orrs	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800181e:	bf00      	nop
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr

0800182a <LL_ADC_IsEnabled>:
{
 800182a:	b480      	push	{r7}
 800182c:	b083      	sub	sp, #12
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	2b01      	cmp	r3, #1
 800183c:	bf0c      	ite	eq
 800183e:	2301      	moveq	r3, #1
 8001840:	2300      	movne	r3, #0
 8001842:	b2db      	uxtb	r3, r3
}
 8001844:	4618      	mov	r0, r3
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8001850:	b590      	push	{r4, r7, lr}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800185a:	2300      	movs	r3, #0
 800185c:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 800185e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001862:	f7ff ffe2 	bl	800182a <LL_ADC_IsEnabled>
 8001866:	4604      	mov	r4, r0
 8001868:	4817      	ldr	r0, [pc, #92]	; (80018c8 <LL_ADC_CommonInit+0x78>)
 800186a:	f7ff ffde 	bl	800182a <LL_ADC_IsEnabled>
 800186e:	4603      	mov	r3, r0
 8001870:	4323      	orrs	r3, r4
 8001872:	2b00      	cmp	r3, #0
 8001874:	d120      	bne.n	80018b8 <LL_ADC_CommonInit+0x68>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d012      	beq.n	80018a4 <LL_ADC_CommonInit+0x54>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	689a      	ldr	r2, [r3, #8]
 8001882:	4b12      	ldr	r3, [pc, #72]	; (80018cc <LL_ADC_CommonInit+0x7c>)
 8001884:	4013      	ands	r3, r2
 8001886:	683a      	ldr	r2, [r7, #0]
 8001888:	6811      	ldr	r1, [r2, #0]
 800188a:	683a      	ldr	r2, [r7, #0]
 800188c:	6852      	ldr	r2, [r2, #4]
 800188e:	4311      	orrs	r1, r2
 8001890:	683a      	ldr	r2, [r7, #0]
 8001892:	6892      	ldr	r2, [r2, #8]
 8001894:	4311      	orrs	r1, r2
 8001896:	683a      	ldr	r2, [r7, #0]
 8001898:	68d2      	ldr	r2, [r2, #12]
 800189a:	430a      	orrs	r2, r1
 800189c:	431a      	orrs	r2, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	609a      	str	r2, [r3, #8]
 80018a2:	e00b      	b.n	80018bc <LL_ADC_CommonInit+0x6c>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689a      	ldr	r2, [r3, #8]
 80018a8:	4b08      	ldr	r3, [pc, #32]	; (80018cc <LL_ADC_CommonInit+0x7c>)
 80018aa:	4013      	ands	r3, r2
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	6812      	ldr	r2, [r2, #0]
 80018b0:	431a      	orrs	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	609a      	str	r2, [r3, #8]
 80018b6:	e001      	b.n	80018bc <LL_ADC_CommonInit+0x6c>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 80018bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3714      	adds	r7, #20
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd90      	pop	{r4, r7, pc}
 80018c6:	bf00      	nop
 80018c8:	50000100 	.word	0x50000100
 80018cc:	fffc30e0 	.word	0xfffc30e0

080018d0 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80018da:	2300      	movs	r3, #0
 80018dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f7ff ffa3 	bl	800182a <LL_ADC_IsEnabled>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d111      	bne.n	800190e <LL_ADC_Init+0x3e>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018f2:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80018f6:	683a      	ldr	r2, [r7, #0]
 80018f8:	6811      	ldr	r1, [r2, #0]
 80018fa:	683a      	ldr	r2, [r7, #0]
 80018fc:	6852      	ldr	r2, [r2, #4]
 80018fe:	4311      	orrs	r1, r2
 8001900:	683a      	ldr	r2, [r7, #0]
 8001902:	6892      	ldr	r2, [r2, #8]
 8001904:	430a      	orrs	r2, r1
 8001906:	431a      	orrs	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	60da      	str	r2, [r3, #12]
 800190c:	e001      	b.n	8001912 <LL_ADC_Init+0x42>
    
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8001912:	7bfb      	ldrb	r3, [r7, #15]
}
 8001914:	4618      	mov	r0, r3
 8001916:	3710      	adds	r7, #16
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001926:	2300      	movs	r3, #0
 8001928:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f7ff ff7d 	bl	800182a <LL_ADC_IsEnabled>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d132      	bne.n	800199c <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 serie, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d015      	beq.n	800196a <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	68da      	ldr	r2, [r3, #12]
 8001942:	4b1a      	ldr	r3, [pc, #104]	; (80019ac <LL_ADC_REG_Init+0x90>)
 8001944:	4013      	ands	r3, r2
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	6811      	ldr	r1, [r2, #0]
 800194a:	683a      	ldr	r2, [r7, #0]
 800194c:	6892      	ldr	r2, [r2, #8]
 800194e:	4311      	orrs	r1, r2
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	68d2      	ldr	r2, [r2, #12]
 8001954:	4311      	orrs	r1, r2
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	6912      	ldr	r2, [r2, #16]
 800195a:	4311      	orrs	r1, r2
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	6952      	ldr	r2, [r2, #20]
 8001960:	430a      	orrs	r2, r1
 8001962:	431a      	orrs	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	60da      	str	r2, [r3, #12]
 8001968:	e011      	b.n	800198e <LL_ADC_REG_Init+0x72>
                 | ADC_REG_InitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	68da      	ldr	r2, [r3, #12]
 800196e:	4b0f      	ldr	r3, [pc, #60]	; (80019ac <LL_ADC_REG_Init+0x90>)
 8001970:	4013      	ands	r3, r2
 8001972:	683a      	ldr	r2, [r7, #0]
 8001974:	6811      	ldr	r1, [r2, #0]
 8001976:	683a      	ldr	r2, [r7, #0]
 8001978:	68d2      	ldr	r2, [r2, #12]
 800197a:	4311      	orrs	r1, r2
 800197c:	683a      	ldr	r2, [r7, #0]
 800197e:	6912      	ldr	r2, [r2, #16]
 8001980:	4311      	orrs	r1, r2
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	6952      	ldr	r2, [r2, #20]
 8001986:	430a      	orrs	r2, r1
 8001988:	431a      	orrs	r2, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	60da      	str	r2, [r3, #12]
                 | ADC_REG_InitStruct->Overrun
                );
    }
    
    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	4619      	mov	r1, r3
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f7ff ff35 	bl	8001804 <LL_ADC_REG_SetSequencerLength>
 800199a:	e001      	b.n	80019a0 <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80019a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	fff0c03c 	.word	0xfff0c03c

080019b0 <LL_GPIO_SetPinMode>:
{
 80019b0:	b480      	push	{r7}
 80019b2:	b089      	sub	sp, #36	; 0x24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	fa93 f3a3 	rbit	r3, r3
 80019ca:	613b      	str	r3, [r7, #16]
  return result;
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	fab3 f383 	clz	r3, r3
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	2103      	movs	r1, #3
 80019d8:	fa01 f303 	lsl.w	r3, r1, r3
 80019dc:	43db      	mvns	r3, r3
 80019de:	401a      	ands	r2, r3
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	fa93 f3a3 	rbit	r3, r3
 80019ea:	61bb      	str	r3, [r7, #24]
  return result;
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	fab3 f383 	clz	r3, r3
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	6879      	ldr	r1, [r7, #4]
 80019f8:	fa01 f303 	lsl.w	r3, r1, r3
 80019fc:	431a      	orrs	r2, r3
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	601a      	str	r2, [r3, #0]
}
 8001a02:	bf00      	nop
 8001a04:	3724      	adds	r7, #36	; 0x24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <LL_GPIO_SetPinOutputType>:
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b085      	sub	sp, #20
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	60f8      	str	r0, [r7, #12]
 8001a16:	60b9      	str	r1, [r7, #8]
 8001a18:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	685a      	ldr	r2, [r3, #4]
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	43db      	mvns	r3, r3
 8001a22:	401a      	ands	r2, r3
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	6879      	ldr	r1, [r7, #4]
 8001a28:	fb01 f303 	mul.w	r3, r1, r3
 8001a2c:	431a      	orrs	r2, r3
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	605a      	str	r2, [r3, #4]
}
 8001a32:	bf00      	nop
 8001a34:	3714      	adds	r7, #20
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <LL_GPIO_SetPinSpeed>:
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b089      	sub	sp, #36	; 0x24
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	60f8      	str	r0, [r7, #12]
 8001a46:	60b9      	str	r1, [r7, #8]
 8001a48:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	689a      	ldr	r2, [r3, #8]
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	fa93 f3a3 	rbit	r3, r3
 8001a58:	613b      	str	r3, [r7, #16]
  return result;
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	fab3 f383 	clz	r3, r3
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	2103      	movs	r1, #3
 8001a66:	fa01 f303 	lsl.w	r3, r1, r3
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	401a      	ands	r2, r3
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	fa93 f3a3 	rbit	r3, r3
 8001a78:	61bb      	str	r3, [r7, #24]
  return result;
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	fab3 f383 	clz	r3, r3
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	6879      	ldr	r1, [r7, #4]
 8001a86:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8a:	431a      	orrs	r2, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	609a      	str	r2, [r3, #8]
}
 8001a90:	bf00      	nop
 8001a92:	3724      	adds	r7, #36	; 0x24
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <LL_GPIO_SetPinPull>:
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b089      	sub	sp, #36	; 0x24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	68da      	ldr	r2, [r3, #12]
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	fa93 f3a3 	rbit	r3, r3
 8001ab6:	613b      	str	r3, [r7, #16]
  return result;
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	fab3 f383 	clz	r3, r3
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	2103      	movs	r1, #3
 8001ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	401a      	ands	r2, r3
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	fa93 f3a3 	rbit	r3, r3
 8001ad6:	61bb      	str	r3, [r7, #24]
  return result;
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	fab3 f383 	clz	r3, r3
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	6879      	ldr	r1, [r7, #4]
 8001ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae8:	431a      	orrs	r2, r3
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	60da      	str	r2, [r3, #12]
}
 8001aee:	bf00      	nop
 8001af0:	3724      	adds	r7, #36	; 0x24
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr

08001afa <LL_GPIO_SetAFPin_0_7>:
{
 8001afa:	b480      	push	{r7}
 8001afc:	b089      	sub	sp, #36	; 0x24
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	60f8      	str	r0, [r7, #12]
 8001b02:	60b9      	str	r1, [r7, #8]
 8001b04:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	6a1a      	ldr	r2, [r3, #32]
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	fa93 f3a3 	rbit	r3, r3
 8001b14:	613b      	str	r3, [r7, #16]
  return result;
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	fab3 f383 	clz	r3, r3
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	210f      	movs	r1, #15
 8001b22:	fa01 f303 	lsl.w	r3, r1, r3
 8001b26:	43db      	mvns	r3, r3
 8001b28:	401a      	ands	r2, r3
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	fa93 f3a3 	rbit	r3, r3
 8001b34:	61bb      	str	r3, [r7, #24]
  return result;
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	fab3 f383 	clz	r3, r3
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	6879      	ldr	r1, [r7, #4]
 8001b42:	fa01 f303 	lsl.w	r3, r1, r3
 8001b46:	431a      	orrs	r2, r3
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	621a      	str	r2, [r3, #32]
}
 8001b4c:	bf00      	nop
 8001b4e:	3724      	adds	r7, #36	; 0x24
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <LL_GPIO_SetAFPin_8_15>:
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b089      	sub	sp, #36	; 0x24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	0a1b      	lsrs	r3, r3, #8
 8001b6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	fa93 f3a3 	rbit	r3, r3
 8001b74:	613b      	str	r3, [r7, #16]
  return result;
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	fab3 f383 	clz	r3, r3
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	210f      	movs	r1, #15
 8001b82:	fa01 f303 	lsl.w	r3, r1, r3
 8001b86:	43db      	mvns	r3, r3
 8001b88:	401a      	ands	r2, r3
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	0a1b      	lsrs	r3, r3, #8
 8001b8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	fa93 f3a3 	rbit	r3, r3
 8001b96:	61bb      	str	r3, [r7, #24]
  return result;
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	fab3 f383 	clz	r3, r3
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	6879      	ldr	r1, [r7, #4]
 8001ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba8:	431a      	orrs	r2, r3
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001bae:	bf00      	nop
 8001bb0:	3724      	adds	r7, #36	; 0x24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr

08001bba <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b088      	sub	sp, #32
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
 8001bc2:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	fa93 f3a3 	rbit	r3, r3
 8001bd0:	613b      	str	r3, [r7, #16]
  return result;
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	fab3 f383 	clz	r3, r3
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001bdc:	e051      	b.n	8001c82 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	2101      	movs	r1, #1
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bea:	4013      	ands	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d043      	beq.n	8001c7c <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d003      	beq.n	8001c04 <LL_GPIO_Init+0x4a>
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d10e      	bne.n	8001c22 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	461a      	mov	r2, r3
 8001c0a:	69b9      	ldr	r1, [r7, #24]
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f7ff ff16 	bl	8001a3e <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	6819      	ldr	r1, [r3, #0]
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f7ff fef6 	bl	8001a0e <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	461a      	mov	r2, r3
 8001c28:	69b9      	ldr	r1, [r7, #24]
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f7ff ff36 	bl	8001a9c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d11a      	bne.n	8001c6e <LL_GPIO_Init+0xb4>
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	fa93 f3a3 	rbit	r3, r3
 8001c42:	60bb      	str	r3, [r7, #8]
  return result;
 8001c44:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001c46:	fab3 f383 	clz	r3, r3
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	2b07      	cmp	r3, #7
 8001c4e:	d807      	bhi.n	8001c60 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	695b      	ldr	r3, [r3, #20]
 8001c54:	461a      	mov	r2, r3
 8001c56:	69b9      	ldr	r1, [r7, #24]
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f7ff ff4e 	bl	8001afa <LL_GPIO_SetAFPin_0_7>
 8001c5e:	e006      	b.n	8001c6e <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	695b      	ldr	r3, [r3, #20]
 8001c64:	461a      	mov	r2, r3
 8001c66:	69b9      	ldr	r1, [r7, #24]
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f7ff ff75 	bl	8001b58 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	461a      	mov	r2, r3
 8001c74:	69b9      	ldr	r1, [r7, #24]
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f7ff fe9a 	bl	80019b0 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	fa22 f303 	lsr.w	r3, r2, r3
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d1a6      	bne.n	8001bde <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3720      	adds	r7, #32
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <LL_I2C_Enable>:
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	b083      	sub	sp, #12
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f043 0201 	orr.w	r2, r3, #1
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	601a      	str	r2, [r3, #0]
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <LL_I2C_Disable>:
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f023 0201 	bic.w	r2, r3, #1
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	601a      	str	r2, [r3, #0]
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr

08001cda <LL_I2C_ConfigFilters>:
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b085      	sub	sp, #20
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	60f8      	str	r0, [r7, #12]
 8001ce2:	60b9      	str	r1, [r7, #8]
 8001ce4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	0219      	lsls	r1, r3, #8
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	430b      	orrs	r3, r1
 8001cf6:	431a      	orrs	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	601a      	str	r2, [r3, #0]
}
 8001cfc:	bf00      	nop
 8001cfe:	3714      	adds	r7, #20
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <LL_I2C_SetOwnAddress1>:
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001d1c:	f023 0307 	bic.w	r3, r3, #7
 8001d20:	68b9      	ldr	r1, [r7, #8]
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	430a      	orrs	r2, r1
 8001d26:	431a      	orrs	r2, r3
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	609a      	str	r2, [r3, #8]
}
 8001d2c:	bf00      	nop
 8001d2e:	3714      	adds	r7, #20
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <LL_I2C_EnableOwnAddress1>:
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	609a      	str	r2, [r3, #8]
}
 8001d4c:	bf00      	nop
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <LL_I2C_DisableOwnAddress1>:
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	609a      	str	r2, [r3, #8]
}
 8001d6c:	bf00      	nop
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <LL_I2C_SetTiming>:
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	683a      	ldr	r2, [r7, #0]
 8001d86:	611a      	str	r2, [r3, #16]
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <LL_I2C_SetMode>:
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	431a      	orrs	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	601a      	str	r2, [r3, #0]
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
 8001dc2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	431a      	orrs	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	605a      	str	r2, [r3, #4]
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f7ff ff65 	bl	8001cba <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	6899      	ldr	r1, [r3, #8]
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	461a      	mov	r2, r3
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f7ff ff6d 	bl	8001cda <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	4619      	mov	r1, r3
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f7ff ffb6 	bl	8001d78 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f7ff ff44 	bl	8001c9a <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f7ff ffa0 	bl	8001d58 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	6919      	ldr	r1, [r3, #16]
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	461a      	mov	r2, r3
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f7ff ff70 	bl	8001d08 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d002      	beq.n	8001e36 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f7ff ff81 	bl	8001d38 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f7ff ffa9 	bl	8001d94 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	695b      	ldr	r3, [r3, #20]
 8001e46:	4619      	mov	r1, r3
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f7ff ffb6 	bl	8001dba <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3708      	adds	r7, #8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <LL_RTC_SetHourFormat>:
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_FMT, HourFormat);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	431a      	orrs	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	609a      	str	r2, [r3, #8]
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr

08001e7e <LL_RTC_GetHourFormat>:
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b083      	sub	sp, #12
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->CR, RTC_CR_FMT));
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr

08001e9a <LL_RTC_EnableInitMode>:
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	b083      	sub	sp, #12
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, RTC_INIT_MASK);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ea8:	60da      	str	r2, [r3, #12]
}
 8001eaa:	bf00      	nop
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr

08001eb6 <LL_RTC_DisableInitMode>:
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	b083      	sub	sp, #12
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ec4:	60da      	str	r2, [r3, #12]
}
 8001ec6:	bf00      	nop
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr

08001ed2 <LL_RTC_IsShadowRegBypassEnabled>:
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	b083      	sub	sp, #12
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->CR, RTC_CR_BYPSHAD) == (RTC_CR_BYPSHAD));
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f003 0320 	and.w	r3, r3, #32
 8001ee2:	2b20      	cmp	r3, #32
 8001ee4:	bf0c      	ite	eq
 8001ee6:	2301      	moveq	r3, #1
 8001ee8:	2300      	movne	r3, #0
 8001eea:	b2db      	uxtb	r3, r3
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <LL_RTC_SetAsynchPrescaler>:
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_PRER_PREDIV_A_Pos);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	041b      	lsls	r3, r3, #16
 8001f0e:	431a      	orrs	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	611a      	str	r2, [r3, #16]
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <LL_RTC_SetSynchPrescaler>:
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001f32:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001f36:	683a      	ldr	r2, [r7, #0]
 8001f38:	431a      	orrs	r2, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	611a      	str	r2, [r3, #16]
}
 8001f3e:	bf00      	nop
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr

08001f4a <LL_RTC_EnableWriteProtection>:
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	b083      	sub	sp, #12
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	22ff      	movs	r2, #255	; 0xff
 8001f56:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <LL_RTC_DisableWriteProtection>:
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	22ca      	movs	r2, #202	; 0xca
 8001f70:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2253      	movs	r2, #83	; 0x53
 8001f76:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <LL_RTC_TIME_Config>:
{
 8001f84:	b480      	push	{r7}
 8001f86:	b087      	sub	sp, #28
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
 8001f90:	603b      	str	r3, [r7, #0]
  uint32_t temp = 0U;
 8001f92:	2300      	movs	r3, #0
 8001f94:	617b      	str	r3, [r7, #20]
         (((Hours & 0xF0U) << (RTC_TR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_TR_HU_Pos))     | \
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	041b      	lsls	r3, r3, #16
 8001f9a:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
  temp = Format12_24                                                                                    | \
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	431a      	orrs	r2, r3
         (((Minutes & 0xF0U) << (RTC_TR_MNT_Pos - 4U)) | ((Minutes & 0x0FU) << RTC_TR_MNU_Pos)) | \
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	021b      	lsls	r3, r3, #8
 8001fa6:	b29b      	uxth	r3, r3
         (((Hours & 0xF0U) << (RTC_TR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_TR_HU_Pos))     | \
 8001fa8:	431a      	orrs	r2, r3
         (((Seconds & 0xF0U) << (RTC_TR_ST_Pos - 4U)) | ((Seconds & 0x0FU) << RTC_TR_SU_Pos));
 8001faa:	6a3b      	ldr	r3, [r7, #32]
 8001fac:	b2db      	uxtb	r3, r3
  temp = Format12_24                                                                                    | \
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
 8001fba:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001fbe:	697a      	ldr	r2, [r7, #20]
 8001fc0:	431a      	orrs	r2, r3
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	601a      	str	r2, [r3, #0]
}
 8001fc6:	bf00      	nop
 8001fc8:	371c      	adds	r7, #28
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
	...

08001fd4 <LL_RTC_DATE_Config>:
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b087      	sub	sp, #28
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	60b9      	str	r1, [r7, #8]
 8001fde:	607a      	str	r2, [r7, #4]
 8001fe0:	603b      	str	r3, [r7, #0]
  uint32_t temp = 0U;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	617b      	str	r3, [r7, #20]
  temp = (WeekDay << RTC_DR_WDU_Pos)                                                        | \
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	035a      	lsls	r2, r3, #13
         (((Year & 0xF0U) << (RTC_DR_YT_Pos - 4U)) | ((Year & 0x0FU) << RTC_DR_YU_Pos))   | \
 8001fea:	6a3b      	ldr	r3, [r7, #32]
 8001fec:	041b      	lsls	r3, r3, #16
 8001fee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  temp = (WeekDay << RTC_DR_WDU_Pos)                                                        | \
 8001ff2:	431a      	orrs	r2, r3
         (((Month & 0xF0U) << (RTC_DR_MT_Pos - 4U)) | ((Month & 0x0FU) << RTC_DR_MU_Pos)) | \
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	021b      	lsls	r3, r3, #8
 8001ff8:	b29b      	uxth	r3, r3
         (((Year & 0xF0U) << (RTC_DR_YT_Pos - 4U)) | ((Year & 0x0FU) << RTC_DR_YU_Pos))   | \
 8001ffa:	431a      	orrs	r2, r3
         (((Day & 0xF0U) << (RTC_DR_DT_Pos - 4U)) | ((Day & 0x0FU) << RTC_DR_DU_Pos));
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	b2db      	uxtb	r3, r3
  temp = (WeekDay << RTC_DR_WDU_Pos)                                                        | \
 8002000:	4313      	orrs	r3, r2
 8002002:	617b      	str	r3, [r7, #20]
  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	685a      	ldr	r2, [r3, #4]
 8002008:	4b05      	ldr	r3, [pc, #20]	; (8002020 <LL_RTC_DATE_Config+0x4c>)
 800200a:	4013      	ands	r3, r2
 800200c:	697a      	ldr	r2, [r7, #20]
 800200e:	431a      	orrs	r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	605a      	str	r2, [r3, #4]
}
 8002014:	bf00      	nop
 8002016:	371c      	adds	r7, #28
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	ff0000c0 	.word	0xff0000c0

08002024 <LL_RTC_IsActiveFlag_INIT>:
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF));
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002034:	2b40      	cmp	r3, #64	; 0x40
 8002036:	bf0c      	ite	eq
 8002038:	2301      	moveq	r3, #1
 800203a:	2300      	movne	r3, #0
 800203c:	b2db      	uxtb	r3, r3
}
 800203e:	4618      	mov	r0, r3
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr

0800204a <LL_RTC_IsActiveFlag_RS>:
{
 800204a:	b480      	push	{r7}
 800204c:	b083      	sub	sp, #12
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ISR, RTC_ISR_RSF) == (RTC_ISR_RSF));
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	f003 0320 	and.w	r3, r3, #32
 800205a:	2b20      	cmp	r3, #32
 800205c:	bf0c      	ite	eq
 800205e:	2301      	moveq	r3, #1
 8002060:	2300      	movne	r3, #0
 8002062:	b2db      	uxtb	r3, r3
}
 8002064:	4618      	mov	r0, r3
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <LL_RTC_ClearFlag_RS>:
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, (~((RTC_ISR_RSF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTCx->ISR & RTC_ISR_INIT)));
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002080:	f063 02a0 	orn	r2, r3, #160	; 0xa0
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	60da      	str	r2, [r3, #12]
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <LL_SYSTICK_IsActiveCounterFlag>:
  * @note   It can be used in timeout function on application side.
  * @rmtoll STK_CTRL     COUNTFLAG     LL_SYSTICK_IsActiveCounterFlag
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 8002098:	4b07      	ldr	r3, [pc, #28]	; (80020b8 <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020a4:	bf0c      	ite	eq
 80020a6:	2301      	moveq	r3, #1
 80020a8:	2300      	movne	r3, #0
 80020aa:	b2db      	uxtb	r3, r3
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	e000e010 	.word	0xe000e010

080020bc <LL_RTC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized
  */
ErrorStatus LL_RTC_Init(RTC_TypeDef *RTCx, LL_RTC_InitTypeDef *RTC_InitStruct)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_RTC_HOURFORMAT(RTC_InitStruct->HourFormat));
  assert_param(IS_LL_RTC_ASYNCH_PREDIV(RTC_InitStruct->AsynchPrescaler));
  assert_param(IS_LL_RTC_SYNCH_PREDIV(RTC_InitStruct->SynchPrescaler));

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f7ff ff4a 	bl	8001f64 <LL_RTC_DisableWriteProtection>

  /* Set Initialization mode */
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f000 f96d 	bl	80023b0 <LL_RTC_EnterInitMode>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d016      	beq.n	800210a <LL_RTC_Init+0x4e>
  {
    /* Set Hour Format */
    LL_RTC_SetHourFormat(RTCx, RTC_InitStruct->HourFormat);
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4619      	mov	r1, r3
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f7ff feb8 	bl	8001e58 <LL_RTC_SetHourFormat>

    /* Configure Synchronous and Asynchronous prescaler factor */
    LL_RTC_SetSynchPrescaler(RTCx, RTC_InitStruct->SynchPrescaler);
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	4619      	mov	r1, r3
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f7ff ff16 	bl	8001f20 <LL_RTC_SetSynchPrescaler>
    LL_RTC_SetAsynchPrescaler(RTCx, RTC_InitStruct->AsynchPrescaler);
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	4619      	mov	r1, r3
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f7ff fefc 	bl	8001ef8 <LL_RTC_SetAsynchPrescaler>

    /* Exit Initialization mode */
    LL_RTC_DisableInitMode(RTCx);
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f7ff fed8 	bl	8001eb6 <LL_RTC_DisableInitMode>

    status = SUCCESS;
 8002106:	2300      	movs	r3, #0
 8002108:	73fb      	strb	r3, [r7, #15]
  }
  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f7ff ff1d 	bl	8001f4a <LL_RTC_EnableWriteProtection>

  return status;
 8002110:	7bfb      	ldrb	r3, [r7, #15]
}
 8002112:	4618      	mov	r0, r3
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
	...

0800211c <LL_RTC_TIME_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Time register is configured
  *          - ERROR: RTC Time register is not configured
  */
ErrorStatus LL_RTC_TIME_Init(RTC_TypeDef *RTCx, uint32_t RTC_Format, LL_RTC_TimeTypeDef *RTC_TimeStruct)
{
 800211c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800211e:	b089      	sub	sp, #36	; 0x24
 8002120:	af02      	add	r7, sp, #8
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
  ErrorStatus status = ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));
  assert_param(IS_LL_RTC_FORMAT(RTC_Format));

  if (RTC_Format == LL_RTC_FORMAT_BIN)
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d109      	bne.n	8002146 <LL_RTC_TIME_Init+0x2a>
  {
    if (LL_RTC_GetHourFormat(RTCx) != LL_RTC_HOURFORMAT_24HOUR)
 8002132:	68f8      	ldr	r0, [r7, #12]
 8002134:	f7ff fea3 	bl	8001e7e <LL_RTC_GetHourFormat>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d10c      	bne.n	8002158 <LL_RTC_TIME_Init+0x3c>
      assert_param(IS_LL_RTC_HOUR12(RTC_TimeStruct->Hours));
      assert_param(IS_LL_RTC_TIME_FORMAT(RTC_TimeStruct->TimeFormat));
    }
    else
    {
      RTC_TimeStruct->TimeFormat = 0x00U;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	e008      	b.n	8002158 <LL_RTC_TIME_Init+0x3c>
    assert_param(IS_LL_RTC_MINUTES(RTC_TimeStruct->Minutes));
    assert_param(IS_LL_RTC_SECONDS(RTC_TimeStruct->Seconds));
  }
  else
  {
    if (LL_RTC_GetHourFormat(RTCx) != LL_RTC_HOURFORMAT_24HOUR)
 8002146:	68f8      	ldr	r0, [r7, #12]
 8002148:	f7ff fe99 	bl	8001e7e <LL_RTC_GetHourFormat>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d102      	bne.n	8002158 <LL_RTC_TIME_Init+0x3c>
      assert_param(IS_LL_RTC_HOUR12(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Hours)));
      assert_param(IS_LL_RTC_TIME_FORMAT(RTC_TimeStruct->TimeFormat));
    }
    else
    {
      RTC_TimeStruct->TimeFormat = 0x00U;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
    assert_param(IS_LL_RTC_MINUTES(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Minutes)));
    assert_param(IS_LL_RTC_SECONDS(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Seconds)));
  }

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
 8002158:	68f8      	ldr	r0, [r7, #12]
 800215a:	f7ff ff03 	bl	8001f64 <LL_RTC_DisableWriteProtection>

  /* Set Initialization mode */
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 800215e:	68f8      	ldr	r0, [r7, #12]
 8002160:	f000 f926 	bl	80023b0 <LL_RTC_EnterInitMode>
 8002164:	4603      	mov	r3, r0
 8002166:	2b01      	cmp	r3, #1
 8002168:	d073      	beq.n	8002252 <LL_RTC_TIME_Init+0x136>
  {
    /* Check the input parameters format */
    if (RTC_Format != LL_RTC_FORMAT_BIN)
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d00f      	beq.n	8002190 <LL_RTC_TIME_Init+0x74>
    {
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, RTC_TimeStruct->Hours,
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6819      	ldr	r1, [r3, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	791b      	ldrb	r3, [r3, #4]
 8002178:	461a      	mov	r2, r3
                         RTC_TimeStruct->Minutes, RTC_TimeStruct->Seconds);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	795b      	ldrb	r3, [r3, #5]
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, RTC_TimeStruct->Hours,
 800217e:	4618      	mov	r0, r3
                         RTC_TimeStruct->Minutes, RTC_TimeStruct->Seconds);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	799b      	ldrb	r3, [r3, #6]
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, RTC_TimeStruct->Hours,
 8002184:	9300      	str	r3, [sp, #0]
 8002186:	4603      	mov	r3, r0
 8002188:	68f8      	ldr	r0, [r7, #12]
 800218a:	f7ff fefb 	bl	8001f84 <LL_RTC_TIME_Config>
 800218e:	e04f      	b.n	8002230 <LL_RTC_TIME_Init+0x114>
    }
    else
    {
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681c      	ldr	r4, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	791b      	ldrb	r3, [r3, #4]
 8002198:	4a32      	ldr	r2, [pc, #200]	; (8002264 <LL_RTC_TIME_Init+0x148>)
 800219a:	fba2 2303 	umull	r2, r3, r2, r3
 800219e:	08db      	lsrs	r3, r3, #3
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	011b      	lsls	r3, r3, #4
 80021a4:	b2d8      	uxtb	r0, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	791a      	ldrb	r2, [r3, #4]
 80021aa:	4b2e      	ldr	r3, [pc, #184]	; (8002264 <LL_RTC_TIME_Init+0x148>)
 80021ac:	fba3 1302 	umull	r1, r3, r3, r2
 80021b0:	08d9      	lsrs	r1, r3, #3
 80021b2:	460b      	mov	r3, r1
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	440b      	add	r3, r1
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	4303      	orrs	r3, r0
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	461d      	mov	r5, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Minutes),
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	795b      	ldrb	r3, [r3, #5]
 80021c8:	4a26      	ldr	r2, [pc, #152]	; (8002264 <LL_RTC_TIME_Init+0x148>)
 80021ca:	fba2 2303 	umull	r2, r3, r2, r3
 80021ce:	08db      	lsrs	r3, r3, #3
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	011b      	lsls	r3, r3, #4
 80021d4:	b2d8      	uxtb	r0, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	795a      	ldrb	r2, [r3, #5]
 80021da:	4b22      	ldr	r3, [pc, #136]	; (8002264 <LL_RTC_TIME_Init+0x148>)
 80021dc:	fba3 1302 	umull	r1, r3, r3, r2
 80021e0:	08d9      	lsrs	r1, r3, #3
 80021e2:	460b      	mov	r3, r1
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	440b      	add	r3, r1
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	4303      	orrs	r3, r0
 80021f0:	b2db      	uxtb	r3, r3
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 80021f2:	461e      	mov	r6, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Seconds));
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	799b      	ldrb	r3, [r3, #6]
 80021f8:	4a1a      	ldr	r2, [pc, #104]	; (8002264 <LL_RTC_TIME_Init+0x148>)
 80021fa:	fba2 2303 	umull	r2, r3, r2, r3
 80021fe:	08db      	lsrs	r3, r3, #3
 8002200:	b2db      	uxtb	r3, r3
 8002202:	011b      	lsls	r3, r3, #4
 8002204:	b2d8      	uxtb	r0, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	799a      	ldrb	r2, [r3, #6]
 800220a:	4b16      	ldr	r3, [pc, #88]	; (8002264 <LL_RTC_TIME_Init+0x148>)
 800220c:	fba3 1302 	umull	r1, r3, r3, r2
 8002210:	08d9      	lsrs	r1, r3, #3
 8002212:	460b      	mov	r3, r1
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	440b      	add	r3, r1
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	b2db      	uxtb	r3, r3
 800221e:	4303      	orrs	r3, r0
 8002220:	b2db      	uxtb	r3, r3
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 8002222:	9300      	str	r3, [sp, #0]
 8002224:	4633      	mov	r3, r6
 8002226:	462a      	mov	r2, r5
 8002228:	4621      	mov	r1, r4
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	f7ff feaa 	bl	8001f84 <LL_RTC_TIME_Config>
    }

    /* Exit Initialization mode */
    LL_RTC_DisableInitMode(RTCx);
 8002230:	68f8      	ldr	r0, [r7, #12]
 8002232:	f7ff fe40 	bl	8001eb6 <LL_RTC_DisableInitMode>

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if (LL_RTC_IsShadowRegBypassEnabled(RTCx) == 0U)
 8002236:	68f8      	ldr	r0, [r7, #12]
 8002238:	f7ff fe4b 	bl	8001ed2 <LL_RTC_IsShadowRegBypassEnabled>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d105      	bne.n	800224e <LL_RTC_TIME_Init+0x132>
    {
      status = LL_RTC_WaitForSynchro(RTCx);
 8002242:	68f8      	ldr	r0, [r7, #12]
 8002244:	f000 f8e9 	bl	800241a <LL_RTC_WaitForSynchro>
 8002248:	4603      	mov	r3, r0
 800224a:	75fb      	strb	r3, [r7, #23]
 800224c:	e001      	b.n	8002252 <LL_RTC_TIME_Init+0x136>
    }
    else
    {
      status = SUCCESS;
 800224e:	2300      	movs	r3, #0
 8002250:	75fb      	strb	r3, [r7, #23]
    }
  }
  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);
 8002252:	68f8      	ldr	r0, [r7, #12]
 8002254:	f7ff fe79 	bl	8001f4a <LL_RTC_EnableWriteProtection>

  return status;
 8002258:	7dfb      	ldrb	r3, [r7, #23]
}
 800225a:	4618      	mov	r0, r3
 800225c:	371c      	adds	r7, #28
 800225e:	46bd      	mov	sp, r7
 8002260:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002262:	bf00      	nop
 8002264:	cccccccd 	.word	0xcccccccd

08002268 <LL_RTC_DATE_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Day register is configured
  *          - ERROR: RTC Day register is not configured
  */
ErrorStatus LL_RTC_DATE_Init(RTC_TypeDef *RTCx, uint32_t RTC_Format, LL_RTC_DateTypeDef *RTC_DateStruct)
{
 8002268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800226a:	b089      	sub	sp, #36	; 0x24
 800226c:	af02      	add	r7, sp, #8
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
  ErrorStatus status = ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));
  assert_param(IS_LL_RTC_FORMAT(RTC_Format));

  if ((RTC_Format == LL_RTC_FORMAT_BIN) && ((RTC_DateStruct->Month & 0x10U) == 0x10U))
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d10e      	bne.n	800229c <LL_RTC_DATE_Init+0x34>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	785b      	ldrb	r3, [r3, #1]
 8002282:	f003 0310 	and.w	r3, r3, #16
 8002286:	2b00      	cmp	r3, #0
 8002288:	d008      	beq.n	800229c <LL_RTC_DATE_Init+0x34>
  {
    RTC_DateStruct->Month = (RTC_DateStruct->Month & (uint32_t)~(0x10U)) + 0x0AU;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	785b      	ldrb	r3, [r3, #1]
 800228e:	f023 0310 	bic.w	r3, r3, #16
 8002292:	b2db      	uxtb	r3, r3
 8002294:	330a      	adds	r3, #10
 8002296:	b2da      	uxtb	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	705a      	strb	r2, [r3, #1]
    assert_param(IS_LL_RTC_DAY(__LL_RTC_CONVERT_BCD2BIN(RTC_DateStruct->Day)));
  }
  assert_param(IS_LL_RTC_WEEKDAY(RTC_DateStruct->WeekDay));

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
 800229c:	68f8      	ldr	r0, [r7, #12]
 800229e:	f7ff fe61 	bl	8001f64 <LL_RTC_DisableWriteProtection>

  /* Set Initialization mode */
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 80022a2:	68f8      	ldr	r0, [r7, #12]
 80022a4:	f000 f884 	bl	80023b0 <LL_RTC_EnterInitMode>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d075      	beq.n	800239a <LL_RTC_DATE_Init+0x132>
  {
    /* Check the input parameters format */
    if (RTC_Format != LL_RTC_FORMAT_BIN)
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d010      	beq.n	80022d6 <LL_RTC_DATE_Init+0x6e>
    {
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, RTC_DateStruct->Day, RTC_DateStruct->Month, RTC_DateStruct->Year);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	4619      	mov	r1, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	789b      	ldrb	r3, [r3, #2]
 80022be:	461a      	mov	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	785b      	ldrb	r3, [r3, #1]
 80022c4:	4618      	mov	r0, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	78db      	ldrb	r3, [r3, #3]
 80022ca:	9300      	str	r3, [sp, #0]
 80022cc:	4603      	mov	r3, r0
 80022ce:	68f8      	ldr	r0, [r7, #12]
 80022d0:	f7ff fe80 	bl	8001fd4 <LL_RTC_DATE_Config>
 80022d4:	e050      	b.n	8002378 <LL_RTC_DATE_Init+0x110>
    }
    else
    {
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	461c      	mov	r4, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	789b      	ldrb	r3, [r3, #2]
 80022e0:	4a32      	ldr	r2, [pc, #200]	; (80023ac <LL_RTC_DATE_Init+0x144>)
 80022e2:	fba2 2303 	umull	r2, r3, r2, r3
 80022e6:	08db      	lsrs	r3, r3, #3
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	011b      	lsls	r3, r3, #4
 80022ec:	b2d8      	uxtb	r0, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	789a      	ldrb	r2, [r3, #2]
 80022f2:	4b2e      	ldr	r3, [pc, #184]	; (80023ac <LL_RTC_DATE_Init+0x144>)
 80022f4:	fba3 1302 	umull	r1, r3, r3, r2
 80022f8:	08d9      	lsrs	r1, r3, #3
 80022fa:	460b      	mov	r3, r1
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	440b      	add	r3, r1
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	b2db      	uxtb	r3, r3
 8002306:	4303      	orrs	r3, r0
 8002308:	b2db      	uxtb	r3, r3
 800230a:	461d      	mov	r5, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Month), __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Year));
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	785b      	ldrb	r3, [r3, #1]
 8002310:	4a26      	ldr	r2, [pc, #152]	; (80023ac <LL_RTC_DATE_Init+0x144>)
 8002312:	fba2 2303 	umull	r2, r3, r2, r3
 8002316:	08db      	lsrs	r3, r3, #3
 8002318:	b2db      	uxtb	r3, r3
 800231a:	011b      	lsls	r3, r3, #4
 800231c:	b2d8      	uxtb	r0, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	785a      	ldrb	r2, [r3, #1]
 8002322:	4b22      	ldr	r3, [pc, #136]	; (80023ac <LL_RTC_DATE_Init+0x144>)
 8002324:	fba3 1302 	umull	r1, r3, r3, r2
 8002328:	08d9      	lsrs	r1, r3, #3
 800232a:	460b      	mov	r3, r1
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	440b      	add	r3, r1
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	b2db      	uxtb	r3, r3
 8002336:	4303      	orrs	r3, r0
 8002338:	b2db      	uxtb	r3, r3
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 800233a:	461e      	mov	r6, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Month), __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Year));
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	78db      	ldrb	r3, [r3, #3]
 8002340:	4a1a      	ldr	r2, [pc, #104]	; (80023ac <LL_RTC_DATE_Init+0x144>)
 8002342:	fba2 2303 	umull	r2, r3, r2, r3
 8002346:	08db      	lsrs	r3, r3, #3
 8002348:	b2db      	uxtb	r3, r3
 800234a:	011b      	lsls	r3, r3, #4
 800234c:	b2d8      	uxtb	r0, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	78da      	ldrb	r2, [r3, #3]
 8002352:	4b16      	ldr	r3, [pc, #88]	; (80023ac <LL_RTC_DATE_Init+0x144>)
 8002354:	fba3 1302 	umull	r1, r3, r3, r2
 8002358:	08d9      	lsrs	r1, r3, #3
 800235a:	460b      	mov	r3, r1
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	440b      	add	r3, r1
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	b2db      	uxtb	r3, r3
 8002366:	4303      	orrs	r3, r0
 8002368:	b2db      	uxtb	r3, r3
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 800236a:	9300      	str	r3, [sp, #0]
 800236c:	4633      	mov	r3, r6
 800236e:	462a      	mov	r2, r5
 8002370:	4621      	mov	r1, r4
 8002372:	68f8      	ldr	r0, [r7, #12]
 8002374:	f7ff fe2e 	bl	8001fd4 <LL_RTC_DATE_Config>
    }

    /* Exit Initialization mode */
    LL_RTC_DisableInitMode(RTCx);
 8002378:	68f8      	ldr	r0, [r7, #12]
 800237a:	f7ff fd9c 	bl	8001eb6 <LL_RTC_DisableInitMode>

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if (LL_RTC_IsShadowRegBypassEnabled(RTCx) == 0U)
 800237e:	68f8      	ldr	r0, [r7, #12]
 8002380:	f7ff fda7 	bl	8001ed2 <LL_RTC_IsShadowRegBypassEnabled>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d105      	bne.n	8002396 <LL_RTC_DATE_Init+0x12e>
    {
      status = LL_RTC_WaitForSynchro(RTCx);
 800238a:	68f8      	ldr	r0, [r7, #12]
 800238c:	f000 f845 	bl	800241a <LL_RTC_WaitForSynchro>
 8002390:	4603      	mov	r3, r0
 8002392:	75fb      	strb	r3, [r7, #23]
 8002394:	e001      	b.n	800239a <LL_RTC_DATE_Init+0x132>
    }
    else
    {
      status = SUCCESS;
 8002396:	2300      	movs	r3, #0
 8002398:	75fb      	strb	r3, [r7, #23]
    }
  }
  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);
 800239a:	68f8      	ldr	r0, [r7, #12]
 800239c:	f7ff fdd5 	bl	8001f4a <LL_RTC_EnableWriteProtection>

  return status;
 80023a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	371c      	adds	r7, #28
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023aa:	bf00      	nop
 80023ac:	cccccccd 	.word	0xcccccccd

080023b0 <LL_RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode
  */
ErrorStatus LL_RTC_EnterInitMode(RTC_TypeDef *RTCx)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t timeout = RTC_INITMODE_TIMEOUT;
 80023b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023bc:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = SUCCESS;
 80023be:	2300      	movs	r3, #0
 80023c0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp = 0U;
 80023c2:	2300      	movs	r3, #0
 80023c4:	613b      	str	r3, [r7, #16]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Check if the Initialization mode is set */
  if (LL_RTC_IsActiveFlag_INIT(RTCx) == 0U)
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f7ff fe2c 	bl	8002024 <LL_RTC_IsActiveFlag_INIT>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d11e      	bne.n	8002410 <LL_RTC_EnterInitMode+0x60>
  {
    /* Set the Initialization mode */
    LL_RTC_EnableInitMode(RTCx);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f7ff fd61 	bl	8001e9a <LL_RTC_EnableInitMode>

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f7ff fe23 	bl	8002024 <LL_RTC_IsActiveFlag_INIT>
 80023de:	6138      	str	r0, [r7, #16]
    while ((timeout != 0U) && (tmp != 1U))
 80023e0:	e010      	b.n	8002404 <LL_RTC_EnterInitMode+0x54>
    {
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 80023e2:	f7ff fe57 	bl	8002094 <LL_SYSTICK_IsActiveCounterFlag>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d102      	bne.n	80023f2 <LL_RTC_EnterInitMode+0x42>
      {
        timeout --;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	3b01      	subs	r3, #1
 80023f0:	60fb      	str	r3, [r7, #12]
      }
      tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f7ff fe16 	bl	8002024 <LL_RTC_IsActiveFlag_INIT>
 80023f8:	6138      	str	r0, [r7, #16]
      if (timeout == 0U)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d101      	bne.n	8002404 <LL_RTC_EnterInitMode+0x54>
      {
        status = ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	75fb      	strb	r3, [r7, #23]
    while ((timeout != 0U) && (tmp != 1U))
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d002      	beq.n	8002410 <LL_RTC_EnterInitMode+0x60>
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d1e8      	bne.n	80023e2 <LL_RTC_EnterInitMode+0x32>
      }
    }
  }
  return status;
 8002410:	7dfb      	ldrb	r3, [r7, #23]
}
 8002412:	4618      	mov	r0, r3
 8002414:	3718      	adds	r7, #24
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <LL_RTC_WaitForSynchro>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus LL_RTC_WaitForSynchro(RTC_TypeDef *RTCx)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b086      	sub	sp, #24
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
  __IO uint32_t timeout = RTC_SYNCHRO_TIMEOUT;
 8002422:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002426:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = SUCCESS;
 8002428:	2300      	movs	r3, #0
 800242a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp = 0U;
 800242c:	2300      	movs	r3, #0
 800242e:	613b      	str	r3, [r7, #16]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Clear RSF flag */
  LL_RTC_ClearFlag_RS(RTCx);
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f7ff fe1d 	bl	8002070 <LL_RTC_ClearFlag_RS>

  /* Wait the registers to be synchronised */
  tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f7ff fe07 	bl	800204a <LL_RTC_IsActiveFlag_RS>
 800243c:	6138      	str	r0, [r7, #16]
  while ((timeout != 0U) && (tmp != 0U))
 800243e:	e010      	b.n	8002462 <LL_RTC_WaitForSynchro+0x48>
  {
    if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8002440:	f7ff fe28 	bl	8002094 <LL_SYSTICK_IsActiveCounterFlag>
 8002444:	4603      	mov	r3, r0
 8002446:	2b01      	cmp	r3, #1
 8002448:	d102      	bne.n	8002450 <LL_RTC_WaitForSynchro+0x36>
    {
      timeout--;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	3b01      	subs	r3, #1
 800244e:	60fb      	str	r3, [r7, #12]
    }
    tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f7ff fdfa 	bl	800204a <LL_RTC_IsActiveFlag_RS>
 8002456:	6138      	str	r0, [r7, #16]
    if (timeout == 0U)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <LL_RTC_WaitForSynchro+0x48>
    {
      status = ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	75fb      	strb	r3, [r7, #23]
  while ((timeout != 0U) && (tmp != 0U))
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d002      	beq.n	800246e <LL_RTC_WaitForSynchro+0x54>
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1e8      	bne.n	8002440 <LL_RTC_WaitForSynchro+0x26>
    }
  }

  if (status != ERROR)
 800246e:	7dfb      	ldrb	r3, [r7, #23]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d01e      	beq.n	80024b2 <LL_RTC_WaitForSynchro+0x98>
  {
    timeout = RTC_SYNCHRO_TIMEOUT;
 8002474:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002478:	60fb      	str	r3, [r7, #12]
    tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f7ff fde5 	bl	800204a <LL_RTC_IsActiveFlag_RS>
 8002480:	6138      	str	r0, [r7, #16]
    while ((timeout != 0U) && (tmp != 1U))
 8002482:	e010      	b.n	80024a6 <LL_RTC_WaitForSynchro+0x8c>
    {
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8002484:	f7ff fe06 	bl	8002094 <LL_SYSTICK_IsActiveCounterFlag>
 8002488:	4603      	mov	r3, r0
 800248a:	2b01      	cmp	r3, #1
 800248c:	d102      	bne.n	8002494 <LL_RTC_WaitForSynchro+0x7a>
      {
        timeout--;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	3b01      	subs	r3, #1
 8002492:	60fb      	str	r3, [r7, #12]
      }
      tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f7ff fdd8 	bl	800204a <LL_RTC_IsActiveFlag_RS>
 800249a:	6138      	str	r0, [r7, #16]
      if (timeout == 0U)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <LL_RTC_WaitForSynchro+0x8c>
      {
        status = ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	75fb      	strb	r3, [r7, #23]
    while ((timeout != 0U) && (tmp != 1U))
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d002      	beq.n	80024b2 <LL_RTC_WaitForSynchro+0x98>
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d1e8      	bne.n	8002484 <LL_RTC_WaitForSynchro+0x6a>
      }
    }
  }

  return (status);
 80024b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3718      	adds	r7, #24
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <LL_SPI_IsEnabled>:
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024cc:	2b40      	cmp	r3, #64	; 0x40
 80024ce:	d101      	bne.n	80024d4 <LL_SPI_IsEnabled+0x18>
 80024d0:	2301      	movs	r3, #1
 80024d2:	e000      	b.n	80024d6 <LL_SPI_IsEnabled+0x1a>
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr

080024e2 <LL_SPI_SetRxFIFOThreshold>:
{
 80024e2:	b480      	push	{r7}
 80024e4:	b083      	sub	sp, #12
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
 80024ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	431a      	orrs	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	605a      	str	r2, [r3, #4]
}
 80024fc:	bf00      	nop
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <LL_SPI_SetCRCPolynomial>:
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	b29b      	uxth	r3, r3
 8002516:	461a      	mov	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	611a      	str	r2, [r3, #16]
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f7ff ffc0 	bl	80024bc <LL_SPI_IsEnabled>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d145      	bne.n	80025ce <LL_SPI_Init+0xa6>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800254a:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 800254e:	683a      	ldr	r2, [r7, #0]
 8002550:	6811      	ldr	r1, [r2, #0]
 8002552:	683a      	ldr	r2, [r7, #0]
 8002554:	6852      	ldr	r2, [r2, #4]
 8002556:	4311      	orrs	r1, r2
 8002558:	683a      	ldr	r2, [r7, #0]
 800255a:	68d2      	ldr	r2, [r2, #12]
 800255c:	4311      	orrs	r1, r2
 800255e:	683a      	ldr	r2, [r7, #0]
 8002560:	6912      	ldr	r2, [r2, #16]
 8002562:	4311      	orrs	r1, r2
 8002564:	683a      	ldr	r2, [r7, #0]
 8002566:	6952      	ldr	r2, [r2, #20]
 8002568:	4311      	orrs	r1, r2
 800256a:	683a      	ldr	r2, [r7, #0]
 800256c:	6992      	ldr	r2, [r2, #24]
 800256e:	4311      	orrs	r1, r2
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	69d2      	ldr	r2, [r2, #28]
 8002574:	4311      	orrs	r1, r2
 8002576:	683a      	ldr	r2, [r7, #0]
 8002578:	6a12      	ldr	r2, [r2, #32]
 800257a:	430a      	orrs	r2, r1
 800257c:	431a      	orrs	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800258a:	f023 0304 	bic.w	r3, r3, #4
 800258e:	683a      	ldr	r2, [r7, #0]
 8002590:	6891      	ldr	r1, [r2, #8]
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	6952      	ldr	r2, [r2, #20]
 8002596:	0c12      	lsrs	r2, r2, #16
 8002598:	430a      	orrs	r2, r1
 800259a:	431a      	orrs	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	605a      	str	r2, [r3, #4]
               SPI_CR2_DS | SPI_CR2_SSOE,
               SPI_InitStruct->DataWidth | (SPI_InitStruct->NSS >> 16U));

    /* Set Rx FIFO to Quarter (1 Byte) in case of 8 Bits mode. No DataPacking by default */
    if (SPI_InitStruct->DataWidth < LL_SPI_DATAWIDTH_9BIT)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025a8:	d204      	bcs.n	80025b4 <LL_SPI_Init+0x8c>
    {
      LL_SPI_SetRxFIFOThreshold(SPIx, LL_SPI_RX_FIFO_TH_QUARTER);
 80025aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f7ff ff97 	bl	80024e2 <LL_SPI_SetRxFIFOThreshold>

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	6a1b      	ldr	r3, [r3, #32]
 80025b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025bc:	d105      	bne.n	80025ca <LL_SPI_Init+0xa2>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c2:	4619      	mov	r1, r3
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f7ff ff9f 	bl	8002508 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 80025ca:	2300      	movs	r3, #0
 80025cc:	73fb      	strb	r3, [r7, #15]

#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2S_SUPPORT */
  return status;
 80025ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3710      	adds	r7, #16
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80025e2:	4909      	ldr	r1, [pc, #36]	; (8002608 <LL_InitTick+0x30>)
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ec:	3b01      	subs	r3, #1
 80025ee:	604b      	str	r3, [r1, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80025f0:	4b05      	ldr	r3, [pc, #20]	; (8002608 <LL_InitTick+0x30>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025f6:	4b04      	ldr	r3, [pc, #16]	; (8002608 <LL_InitTick+0x30>)
 80025f8:	2205      	movs	r2, #5
 80025fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80025fc:	bf00      	nop
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr
 8002608:	e000e010 	.word	0xe000e010

0800260c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002614:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f7ff ffdd 	bl	80025d8 <LL_InitTick>
}
 800261e:	bf00      	nop
 8002620:	3708      	adds	r7, #8
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
	...

08002628 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8002630:	4b0e      	ldr	r3, [pc, #56]	; (800266c <LL_mDelay+0x44>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8002636:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800263e:	d00c      	beq.n	800265a <LL_mDelay+0x32>
  {
    Delay++;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	3301      	adds	r3, #1
 8002644:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8002646:	e008      	b.n	800265a <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8002648:	4b08      	ldr	r3, [pc, #32]	; (800266c <LL_mDelay+0x44>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d002      	beq.n	800265a <LL_mDelay+0x32>
    {
      Delay--;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	3b01      	subs	r3, #1
 8002658:	607b      	str	r3, [r7, #4]
  while (Delay)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d1f3      	bne.n	8002648 <LL_mDelay+0x20>
    }
  }
}
 8002660:	bf00      	nop
 8002662:	3714      	adds	r7, #20
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr
 800266c:	e000e010 	.word	0xe000e010

08002670 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002678:	4a04      	ldr	r2, [pc, #16]	; (800268c <LL_SetSystemCoreClock+0x1c>)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6013      	str	r3, [r2, #0]
}
 800267e:	bf00      	nop
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	20000000 	.word	0x20000000

08002690 <estado_Anterior>:

// Variables almacenamiento tiempo
uint8_t Horas, Minutos, IntervaloH1, IntervaloH2, IntervaloH3, IntervaloM1, IntervaloM2, IntervaloM3;

// Estado anterior
void estado_Anterior(short btnU, short btnD, short btnL, short btnR, short btnC){
 8002690:	b490      	push	{r4, r7}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	4604      	mov	r4, r0
 8002698:	4608      	mov	r0, r1
 800269a:	4611      	mov	r1, r2
 800269c:	461a      	mov	r2, r3
 800269e:	4623      	mov	r3, r4
 80026a0:	80fb      	strh	r3, [r7, #6]
 80026a2:	4603      	mov	r3, r0
 80026a4:	80bb      	strh	r3, [r7, #4]
 80026a6:	460b      	mov	r3, r1
 80026a8:	807b      	strh	r3, [r7, #2]
 80026aa:	4613      	mov	r3, r2
 80026ac:	803b      	strh	r3, [r7, #0]
	btnUa = btnU;
 80026ae:	4a0a      	ldr	r2, [pc, #40]	; (80026d8 <estado_Anterior+0x48>)
 80026b0:	88fb      	ldrh	r3, [r7, #6]
 80026b2:	8013      	strh	r3, [r2, #0]
	btnDa = btnD;
 80026b4:	4a09      	ldr	r2, [pc, #36]	; (80026dc <estado_Anterior+0x4c>)
 80026b6:	88bb      	ldrh	r3, [r7, #4]
 80026b8:	8013      	strh	r3, [r2, #0]
	btnLa = btnL;
 80026ba:	4a09      	ldr	r2, [pc, #36]	; (80026e0 <estado_Anterior+0x50>)
 80026bc:	887b      	ldrh	r3, [r7, #2]
 80026be:	8013      	strh	r3, [r2, #0]
	btnRa = btnR;
 80026c0:	4a08      	ldr	r2, [pc, #32]	; (80026e4 <estado_Anterior+0x54>)
 80026c2:	883b      	ldrh	r3, [r7, #0]
 80026c4:	8013      	strh	r3, [r2, #0]
	btnCa = btnC;
 80026c6:	4a08      	ldr	r2, [pc, #32]	; (80026e8 <estado_Anterior+0x58>)
 80026c8:	8a3b      	ldrh	r3, [r7, #16]
 80026ca:	8013      	strh	r3, [r2, #0]
}
 80026cc:	bf00      	nop
 80026ce:	3708      	adds	r7, #8
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bc90      	pop	{r4, r7}
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	20000564 	.word	0x20000564
 80026dc:	20000560 	.word	0x20000560
 80026e0:	20000562 	.word	0x20000562
 80026e4:	2000055c 	.word	0x2000055c
 80026e8:	20000568 	.word	0x20000568

080026ec <EDO_0>:

// Funciones por estado
void EDO_0(short btnU, short btnD, short btnL, short btnR, short btnC){
 80026ec:	b590      	push	{r4, r7, lr}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af02      	add	r7, sp, #8
 80026f2:	4604      	mov	r4, r0
 80026f4:	4608      	mov	r0, r1
 80026f6:	4611      	mov	r1, r2
 80026f8:	461a      	mov	r2, r3
 80026fa:	4623      	mov	r3, r4
 80026fc:	80fb      	strh	r3, [r7, #6]
 80026fe:	4603      	mov	r3, r0
 8002700:	80bb      	strh	r3, [r7, #4]
 8002702:	460b      	mov	r3, r1
 8002704:	807b      	strh	r3, [r7, #2]
 8002706:	4613      	mov	r3, r2
 8002708:	803b      	strh	r3, [r7, #0]
	// Configuracion de reloj
	// Codigo de estado inicio
	if(first == 0){
 800270a:	4b45      	ldr	r3, [pc, #276]	; (8002820 <EDO_0+0x134>)
 800270c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d116      	bne.n	8002742 <EDO_0+0x56>
		// Mostrado de valores fijos
		HAL_LCD_Write_AsciiString("Configuracion",24,0);
 8002714:	2200      	movs	r2, #0
 8002716:	2118      	movs	r1, #24
 8002718:	4842      	ldr	r0, [pc, #264]	; (8002824 <EDO_0+0x138>)
 800271a:	f000 fd4d 	bl	80031b8 <HAL_LCD_Write_AsciiString>
		HAL_LCD_Write_AsciiString("Reloj",48,1);
 800271e:	2201      	movs	r2, #1
 8002720:	2130      	movs	r1, #48	; 0x30
 8002722:	4841      	ldr	r0, [pc, #260]	; (8002828 <EDO_0+0x13c>)
 8002724:	f000 fd48 	bl	80031b8 <HAL_LCD_Write_AsciiString>
		HAL_LCD_Write_ascii(':',60,2);
 8002728:	2202      	movs	r2, #2
 800272a:	213c      	movs	r1, #60	; 0x3c
 800272c:	203a      	movs	r0, #58	; 0x3a
 800272e:	f000 fcd7 	bl	80030e0 <HAL_LCD_Write_ascii>
		HAL_LCD_Write_AsciiString(">Aceptar<",36,3);
 8002732:	2203      	movs	r2, #3
 8002734:	2124      	movs	r1, #36	; 0x24
 8002736:	483d      	ldr	r0, [pc, #244]	; (800282c <EDO_0+0x140>)
 8002738:	f000 fd3e 	bl	80031b8 <HAL_LCD_Write_AsciiString>
		first = 1;
 800273c:	4b38      	ldr	r3, [pc, #224]	; (8002820 <EDO_0+0x134>)
 800273e:	2201      	movs	r2, #1
 8002740:	801a      	strh	r2, [r3, #0]
	}
	Horas = HAL_POT_Percentage(POT1_Channel)*23/100;
 8002742:	2000      	movs	r0, #0
 8002744:	f000 fdbc 	bl	80032c0 <HAL_POT_Percentage>
 8002748:	4603      	mov	r3, r0
 800274a:	461a      	mov	r2, r3
 800274c:	4613      	mov	r3, r2
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	4413      	add	r3, r2
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	1a9b      	subs	r3, r3, r2
 8002756:	4a36      	ldr	r2, [pc, #216]	; (8002830 <EDO_0+0x144>)
 8002758:	fb82 1203 	smull	r1, r2, r2, r3
 800275c:	1152      	asrs	r2, r2, #5
 800275e:	17db      	asrs	r3, r3, #31
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	b2da      	uxtb	r2, r3
 8002764:	4b33      	ldr	r3, [pc, #204]	; (8002834 <EDO_0+0x148>)
 8002766:	701a      	strb	r2, [r3, #0]
	Minutos = HAL_POT_Percentage(POT2_Channel)*59/100;
 8002768:	2001      	movs	r0, #1
 800276a:	f000 fda9 	bl	80032c0 <HAL_POT_Percentage>
 800276e:	4603      	mov	r3, r0
 8002770:	461a      	mov	r2, r3
 8002772:	4613      	mov	r3, r2
 8002774:	011b      	lsls	r3, r3, #4
 8002776:	1a9b      	subs	r3, r3, r2
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	1a9b      	subs	r3, r3, r2
 800277c:	4a2c      	ldr	r2, [pc, #176]	; (8002830 <EDO_0+0x144>)
 800277e:	fb82 1203 	smull	r1, r2, r2, r3
 8002782:	1152      	asrs	r2, r2, #5
 8002784:	17db      	asrs	r3, r3, #31
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	b2da      	uxtb	r2, r3
 800278a:	4b2b      	ldr	r3, [pc, #172]	; (8002838 <EDO_0+0x14c>)
 800278c:	701a      	strb	r2, [r3, #0]
	HAL_LCD_Write_Number(&Horas,48,2);
 800278e:	2202      	movs	r2, #2
 8002790:	2130      	movs	r1, #48	; 0x30
 8002792:	4828      	ldr	r0, [pc, #160]	; (8002834 <EDO_0+0x148>)
 8002794:	f000 fd40 	bl	8003218 <HAL_LCD_Write_Number>
	HAL_LCD_Write_Number(&Minutos,67,2);
 8002798:	2202      	movs	r2, #2
 800279a:	2143      	movs	r1, #67	; 0x43
 800279c:	4826      	ldr	r0, [pc, #152]	; (8002838 <EDO_0+0x14c>)
 800279e:	f000 fd3b 	bl	8003218 <HAL_LCD_Write_Number>
	if(btnC == 1 && btnC != btnCa && inicio == 0){
 80027a2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d114      	bne.n	80027d4 <EDO_0+0xe8>
 80027aa:	4b24      	ldr	r3, [pc, #144]	; (800283c <EDO_0+0x150>)
 80027ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027b0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d00d      	beq.n	80027d4 <EDO_0+0xe8>
 80027b8:	4b21      	ldr	r3, [pc, #132]	; (8002840 <EDO_0+0x154>)
 80027ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d108      	bne.n	80027d4 <EDO_0+0xe8>
		// Cambio de estado
		EA = E1;
 80027c2:	4b20      	ldr	r3, [pc, #128]	; (8002844 <EDO_0+0x158>)
 80027c4:	2201      	movs	r2, #1
 80027c6:	701a      	strb	r2, [r3, #0]
		HAL_LCD_Clear();
 80027c8:	f000 fc33 	bl	8003032 <HAL_LCD_Clear>
		first = 0;
 80027cc:	4b14      	ldr	r3, [pc, #80]	; (8002820 <EDO_0+0x134>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	801a      	strh	r2, [r3, #0]
 80027d2:	e012      	b.n	80027fa <EDO_0+0x10e>
	}
	else if(btnC == 1 && btnC != btnCa){
 80027d4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d10e      	bne.n	80027fa <EDO_0+0x10e>
 80027dc:	4b17      	ldr	r3, [pc, #92]	; (800283c <EDO_0+0x150>)
 80027de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027e2:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d007      	beq.n	80027fa <EDO_0+0x10e>
		// Cambio de estado
		first = 0;
 80027ea:	4b0d      	ldr	r3, [pc, #52]	; (8002820 <EDO_0+0x134>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	801a      	strh	r2, [r3, #0]
		EA = E1;
 80027f0:	4b14      	ldr	r3, [pc, #80]	; (8002844 <EDO_0+0x158>)
 80027f2:	2201      	movs	r2, #1
 80027f4:	701a      	strb	r2, [r3, #0]
		HAL_LCD_Clear();
 80027f6:	f000 fc1c 	bl	8003032 <HAL_LCD_Clear>
	}
	estado_Anterior(btnU, btnD, btnL, btnR, btnC);
 80027fa:	f9b7 4000 	ldrsh.w	r4, [r7]
 80027fe:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002802:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002806:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800280a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800280e:	9300      	str	r3, [sp, #0]
 8002810:	4623      	mov	r3, r4
 8002812:	f7ff ff3d 	bl	8002690 <estado_Anterior>
}
 8002816:	bf00      	nop
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	bd90      	pop	{r4, r7, pc}
 800281e:	bf00      	nop
 8002820:	20000558 	.word	0x20000558
 8002824:	0800346c 	.word	0x0800346c
 8002828:	0800347c 	.word	0x0800347c
 800282c:	08003484 	.word	0x08003484
 8002830:	51eb851f 	.word	0x51eb851f
 8002834:	20000577 	.word	0x20000577
 8002838:	20000570 	.word	0x20000570
 800283c:	20000568 	.word	0x20000568
 8002840:	2000055a 	.word	0x2000055a
 8002844:	20000554 	.word	0x20000554

08002848 <EDO_1>:

void EDO_1(short btnU, short btnD, short btnL, short btnR, short btnC){
 8002848:	b590      	push	{r4, r7, lr}
 800284a:	b085      	sub	sp, #20
 800284c:	af02      	add	r7, sp, #8
 800284e:	4604      	mov	r4, r0
 8002850:	4608      	mov	r0, r1
 8002852:	4611      	mov	r1, r2
 8002854:	461a      	mov	r2, r3
 8002856:	4623      	mov	r3, r4
 8002858:	80fb      	strh	r3, [r7, #6]
 800285a:	4603      	mov	r3, r0
 800285c:	80bb      	strh	r3, [r7, #4]
 800285e:	460b      	mov	r3, r1
 8002860:	807b      	strh	r3, [r7, #2]
 8002862:	4613      	mov	r3, r2
 8002864:	803b      	strh	r3, [r7, #0]
	// Configuracion pastillas
	// Codigo de estado inicio
	if(first == 0){
 8002866:	4bbc      	ldr	r3, [pc, #752]	; (8002b58 <EDO_1+0x310>)
 8002868:	f9b3 3000 	ldrsh.w	r3, [r3]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d125      	bne.n	80028bc <EDO_1+0x74>
		// Mostrado de valores fijos
		HAL_LCD_Write_AsciiString("Pastilla  A B C",18,0);
 8002870:	2200      	movs	r2, #0
 8002872:	2112      	movs	r1, #18
 8002874:	48b9      	ldr	r0, [pc, #740]	; (8002b5c <EDO_1+0x314>)
 8002876:	f000 fc9f 	bl	80031b8 <HAL_LCD_Write_AsciiString>
		HAL_LCD_Write_AsciiString("Intervalo",36,1);
 800287a:	2201      	movs	r2, #1
 800287c:	2124      	movs	r1, #36	; 0x24
 800287e:	48b8      	ldr	r0, [pc, #736]	; (8002b60 <EDO_1+0x318>)
 8002880:	f000 fc9a 	bl	80031b8 <HAL_LCD_Write_AsciiString>
		HAL_LCD_Write_AsciiString(":",60,2);
 8002884:	2202      	movs	r2, #2
 8002886:	213c      	movs	r1, #60	; 0x3c
 8002888:	48b6      	ldr	r0, [pc, #728]	; (8002b64 <EDO_1+0x31c>)
 800288a:	f000 fc95 	bl	80031b8 <HAL_LCD_Write_AsciiString>
		HAL_LCD_Write_AsciiString(">Aceptar<",36,3);
 800288e:	2203      	movs	r2, #3
 8002890:	2124      	movs	r1, #36	; 0x24
 8002892:	48b5      	ldr	r0, [pc, #724]	; (8002b68 <EDO_1+0x320>)
 8002894:	f000 fc90 	bl	80031b8 <HAL_LCD_Write_AsciiString>
		// > en A la primera vez
		HAL_LCD_Write_ascii('>',72,0);
 8002898:	2200      	movs	r2, #0
 800289a:	2148      	movs	r1, #72	; 0x48
 800289c:	203e      	movs	r0, #62	; 0x3e
 800289e:	f000 fc1f 	bl	80030e0 <HAL_LCD_Write_ascii>
		HAL_LCD_Write_ascii(' ',84,0);
 80028a2:	2200      	movs	r2, #0
 80028a4:	2154      	movs	r1, #84	; 0x54
 80028a6:	2020      	movs	r0, #32
 80028a8:	f000 fc1a 	bl	80030e0 <HAL_LCD_Write_ascii>
		HAL_LCD_Write_ascii(' ',96,0);
 80028ac:	2200      	movs	r2, #0
 80028ae:	2160      	movs	r1, #96	; 0x60
 80028b0:	2020      	movs	r0, #32
 80028b2:	f000 fc15 	bl	80030e0 <HAL_LCD_Write_ascii>
		first = 1;
 80028b6:	4ba8      	ldr	r3, [pc, #672]	; (8002b58 <EDO_1+0x310>)
 80028b8:	2201      	movs	r2, #1
 80028ba:	801a      	strh	r2, [r3, #0]
	}
	// Obtencion horas y minutos
	Horas = HAL_POT_Percentage(POT1_Channel)*23/100;
 80028bc:	2000      	movs	r0, #0
 80028be:	f000 fcff 	bl	80032c0 <HAL_POT_Percentage>
 80028c2:	4603      	mov	r3, r0
 80028c4:	461a      	mov	r2, r3
 80028c6:	4613      	mov	r3, r2
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	4413      	add	r3, r2
 80028cc:	00db      	lsls	r3, r3, #3
 80028ce:	1a9b      	subs	r3, r3, r2
 80028d0:	4aa6      	ldr	r2, [pc, #664]	; (8002b6c <EDO_1+0x324>)
 80028d2:	fb82 1203 	smull	r1, r2, r2, r3
 80028d6:	1152      	asrs	r2, r2, #5
 80028d8:	17db      	asrs	r3, r3, #31
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	b2da      	uxtb	r2, r3
 80028de:	4ba4      	ldr	r3, [pc, #656]	; (8002b70 <EDO_1+0x328>)
 80028e0:	701a      	strb	r2, [r3, #0]
	Minutos = HAL_POT_Percentage(POT2_Channel)*59/100;
 80028e2:	2001      	movs	r0, #1
 80028e4:	f000 fcec 	bl	80032c0 <HAL_POT_Percentage>
 80028e8:	4603      	mov	r3, r0
 80028ea:	461a      	mov	r2, r3
 80028ec:	4613      	mov	r3, r2
 80028ee:	011b      	lsls	r3, r3, #4
 80028f0:	1a9b      	subs	r3, r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	1a9b      	subs	r3, r3, r2
 80028f6:	4a9d      	ldr	r2, [pc, #628]	; (8002b6c <EDO_1+0x324>)
 80028f8:	fb82 1203 	smull	r1, r2, r2, r3
 80028fc:	1152      	asrs	r2, r2, #5
 80028fe:	17db      	asrs	r3, r3, #31
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	b2da      	uxtb	r2, r3
 8002904:	4b9b      	ldr	r3, [pc, #620]	; (8002b74 <EDO_1+0x32c>)
 8002906:	701a      	strb	r2, [r3, #0]
	// Mostrado valor seleccionado
	HAL_LCD_Write_Number(&Horas,48,2);
 8002908:	2202      	movs	r2, #2
 800290a:	2130      	movs	r1, #48	; 0x30
 800290c:	4898      	ldr	r0, [pc, #608]	; (8002b70 <EDO_1+0x328>)
 800290e:	f000 fc83 	bl	8003218 <HAL_LCD_Write_Number>
	HAL_LCD_Write_Number(&Minutos,67,2);
 8002912:	2202      	movs	r2, #2
 8002914:	2143      	movs	r1, #67	; 0x43
 8002916:	4897      	ldr	r0, [pc, #604]	; (8002b74 <EDO_1+0x32c>)
 8002918:	f000 fc7e 	bl	8003218 <HAL_LCD_Write_Number>

	if(Puntero == 0){
 800291c:	4b96      	ldr	r3, [pc, #600]	; (8002b78 <EDO_1+0x330>)
 800291e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d108      	bne.n	8002938 <EDO_1+0xf0>
		// Si el puntero esta en A carga los valores a A
		IntervaloH1 = Horas;
 8002926:	4b92      	ldr	r3, [pc, #584]	; (8002b70 <EDO_1+0x328>)
 8002928:	781a      	ldrb	r2, [r3, #0]
 800292a:	4b94      	ldr	r3, [pc, #592]	; (8002b7c <EDO_1+0x334>)
 800292c:	701a      	strb	r2, [r3, #0]
		IntervaloM1 = Minutos;
 800292e:	4b91      	ldr	r3, [pc, #580]	; (8002b74 <EDO_1+0x32c>)
 8002930:	781a      	ldrb	r2, [r3, #0]
 8002932:	4b93      	ldr	r3, [pc, #588]	; (8002b80 <EDO_1+0x338>)
 8002934:	701a      	strb	r2, [r3, #0]
 8002936:	e01a      	b.n	800296e <EDO_1+0x126>
	}
	else if(Puntero == 1){
 8002938:	4b8f      	ldr	r3, [pc, #572]	; (8002b78 <EDO_1+0x330>)
 800293a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d108      	bne.n	8002954 <EDO_1+0x10c>
		// Si el puntero esta en B carga los valores a B
		IntervaloH2 = Horas;
 8002942:	4b8b      	ldr	r3, [pc, #556]	; (8002b70 <EDO_1+0x328>)
 8002944:	781a      	ldrb	r2, [r3, #0]
 8002946:	4b8f      	ldr	r3, [pc, #572]	; (8002b84 <EDO_1+0x33c>)
 8002948:	701a      	strb	r2, [r3, #0]
		IntervaloM2 = Minutos;
 800294a:	4b8a      	ldr	r3, [pc, #552]	; (8002b74 <EDO_1+0x32c>)
 800294c:	781a      	ldrb	r2, [r3, #0]
 800294e:	4b8e      	ldr	r3, [pc, #568]	; (8002b88 <EDO_1+0x340>)
 8002950:	701a      	strb	r2, [r3, #0]
 8002952:	e00c      	b.n	800296e <EDO_1+0x126>
	}
	else if(Puntero == 2){
 8002954:	4b88      	ldr	r3, [pc, #544]	; (8002b78 <EDO_1+0x330>)
 8002956:	f9b3 3000 	ldrsh.w	r3, [r3]
 800295a:	2b02      	cmp	r3, #2
 800295c:	d107      	bne.n	800296e <EDO_1+0x126>
		// Si el puntero esta en C carga los valores a C
		IntervaloH3 = Horas;
 800295e:	4b84      	ldr	r3, [pc, #528]	; (8002b70 <EDO_1+0x328>)
 8002960:	781a      	ldrb	r2, [r3, #0]
 8002962:	4b8a      	ldr	r3, [pc, #552]	; (8002b8c <EDO_1+0x344>)
 8002964:	701a      	strb	r2, [r3, #0]
		IntervaloM3 = Minutos;
 8002966:	4b83      	ldr	r3, [pc, #524]	; (8002b74 <EDO_1+0x32c>)
 8002968:	781a      	ldrb	r2, [r3, #0]
 800296a:	4b89      	ldr	r3, [pc, #548]	; (8002b90 <EDO_1+0x348>)
 800296c:	701a      	strb	r2, [r3, #0]
	}
	// Puntero
	if(btnL == 1 && btnL != btnLa && btnR == 0){
 800296e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d156      	bne.n	8002a24 <EDO_1+0x1dc>
 8002976:	4b87      	ldr	r3, [pc, #540]	; (8002b94 <EDO_1+0x34c>)
 8002978:	f9b3 3000 	ldrsh.w	r3, [r3]
 800297c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002980:	429a      	cmp	r2, r3
 8002982:	d04f      	beq.n	8002a24 <EDO_1+0x1dc>
 8002984:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d14b      	bne.n	8002a24 <EDO_1+0x1dc>
		Puntero -= 1;
 800298c:	4b7a      	ldr	r3, [pc, #488]	; (8002b78 <EDO_1+0x330>)
 800298e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002992:	b29b      	uxth	r3, r3
 8002994:	3b01      	subs	r3, #1
 8002996:	b29b      	uxth	r3, r3
 8002998:	b21a      	sxth	r2, r3
 800299a:	4b77      	ldr	r3, [pc, #476]	; (8002b78 <EDO_1+0x330>)
 800299c:	801a      	strh	r2, [r3, #0]
		if (Puntero < 0)
 800299e:	4b76      	ldr	r3, [pc, #472]	; (8002b78 <EDO_1+0x330>)
 80029a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	da02      	bge.n	80029ae <EDO_1+0x166>
			Puntero = 2;
 80029a8:	4b73      	ldr	r3, [pc, #460]	; (8002b78 <EDO_1+0x330>)
 80029aa:	2202      	movs	r2, #2
 80029ac:	801a      	strh	r2, [r3, #0]
		switch (Puntero){
 80029ae:	4b72      	ldr	r3, [pc, #456]	; (8002b78 <EDO_1+0x330>)
 80029b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d014      	beq.n	80029e2 <EDO_1+0x19a>
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d022      	beq.n	8002a02 <EDO_1+0x1ba>
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d000      	beq.n	80029c2 <EDO_1+0x17a>
				HAL_LCD_Write_ascii(' ',72,0);
				HAL_LCD_Write_ascii(' ',84,0);
				HAL_LCD_Write_ascii('>',96,0);
				break;
		}
	}
 80029c0:	e089      	b.n	8002ad6 <EDO_1+0x28e>
				HAL_LCD_Write_ascii('>',72,0);
 80029c2:	2200      	movs	r2, #0
 80029c4:	2148      	movs	r1, #72	; 0x48
 80029c6:	203e      	movs	r0, #62	; 0x3e
 80029c8:	f000 fb8a 	bl	80030e0 <HAL_LCD_Write_ascii>
				HAL_LCD_Write_ascii(' ',84,0);
 80029cc:	2200      	movs	r2, #0
 80029ce:	2154      	movs	r1, #84	; 0x54
 80029d0:	2020      	movs	r0, #32
 80029d2:	f000 fb85 	bl	80030e0 <HAL_LCD_Write_ascii>
				HAL_LCD_Write_ascii(' ',96,0);
 80029d6:	2200      	movs	r2, #0
 80029d8:	2160      	movs	r1, #96	; 0x60
 80029da:	2020      	movs	r0, #32
 80029dc:	f000 fb80 	bl	80030e0 <HAL_LCD_Write_ascii>
				break;
 80029e0:	e01f      	b.n	8002a22 <EDO_1+0x1da>
				HAL_LCD_Write_ascii(' ',72,0);
 80029e2:	2200      	movs	r2, #0
 80029e4:	2148      	movs	r1, #72	; 0x48
 80029e6:	2020      	movs	r0, #32
 80029e8:	f000 fb7a 	bl	80030e0 <HAL_LCD_Write_ascii>
				HAL_LCD_Write_ascii('>',84,0);
 80029ec:	2200      	movs	r2, #0
 80029ee:	2154      	movs	r1, #84	; 0x54
 80029f0:	203e      	movs	r0, #62	; 0x3e
 80029f2:	f000 fb75 	bl	80030e0 <HAL_LCD_Write_ascii>
				HAL_LCD_Write_ascii(' ',96,0);
 80029f6:	2200      	movs	r2, #0
 80029f8:	2160      	movs	r1, #96	; 0x60
 80029fa:	2020      	movs	r0, #32
 80029fc:	f000 fb70 	bl	80030e0 <HAL_LCD_Write_ascii>
				break;
 8002a00:	e00f      	b.n	8002a22 <EDO_1+0x1da>
				HAL_LCD_Write_ascii(' ',72,0);
 8002a02:	2200      	movs	r2, #0
 8002a04:	2148      	movs	r1, #72	; 0x48
 8002a06:	2020      	movs	r0, #32
 8002a08:	f000 fb6a 	bl	80030e0 <HAL_LCD_Write_ascii>
				HAL_LCD_Write_ascii(' ',84,0);
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	2154      	movs	r1, #84	; 0x54
 8002a10:	2020      	movs	r0, #32
 8002a12:	f000 fb65 	bl	80030e0 <HAL_LCD_Write_ascii>
				HAL_LCD_Write_ascii('>',96,0);
 8002a16:	2200      	movs	r2, #0
 8002a18:	2160      	movs	r1, #96	; 0x60
 8002a1a:	203e      	movs	r0, #62	; 0x3e
 8002a1c:	f000 fb60 	bl	80030e0 <HAL_LCD_Write_ascii>
				break;
 8002a20:	bf00      	nop
	}
 8002a22:	e058      	b.n	8002ad6 <EDO_1+0x28e>
	else if(btnR == 1 && btnR != btnRa && btnL == 0){
 8002a24:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d154      	bne.n	8002ad6 <EDO_1+0x28e>
 8002a2c:	4b5a      	ldr	r3, [pc, #360]	; (8002b98 <EDO_1+0x350>)
 8002a2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a32:	f9b7 2000 	ldrsh.w	r2, [r7]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d04d      	beq.n	8002ad6 <EDO_1+0x28e>
 8002a3a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d149      	bne.n	8002ad6 <EDO_1+0x28e>
		Puntero += 1;
 8002a42:	4b4d      	ldr	r3, [pc, #308]	; (8002b78 <EDO_1+0x330>)
 8002a44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	b21a      	sxth	r2, r3
 8002a50:	4b49      	ldr	r3, [pc, #292]	; (8002b78 <EDO_1+0x330>)
 8002a52:	801a      	strh	r2, [r3, #0]
		if (Puntero > 2)
 8002a54:	4b48      	ldr	r3, [pc, #288]	; (8002b78 <EDO_1+0x330>)
 8002a56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	dd02      	ble.n	8002a64 <EDO_1+0x21c>
			Puntero = 0;
 8002a5e:	4b46      	ldr	r3, [pc, #280]	; (8002b78 <EDO_1+0x330>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	801a      	strh	r2, [r3, #0]
		switch (Puntero){
 8002a64:	4b44      	ldr	r3, [pc, #272]	; (8002b78 <EDO_1+0x330>)
 8002a66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d013      	beq.n	8002a96 <EDO_1+0x24e>
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d021      	beq.n	8002ab6 <EDO_1+0x26e>
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d12f      	bne.n	8002ad6 <EDO_1+0x28e>
			case 0:
				HAL_LCD_Write_ascii('>',72,0);
 8002a76:	2200      	movs	r2, #0
 8002a78:	2148      	movs	r1, #72	; 0x48
 8002a7a:	203e      	movs	r0, #62	; 0x3e
 8002a7c:	f000 fb30 	bl	80030e0 <HAL_LCD_Write_ascii>
				HAL_LCD_Write_ascii(' ',84,0);
 8002a80:	2200      	movs	r2, #0
 8002a82:	2154      	movs	r1, #84	; 0x54
 8002a84:	2020      	movs	r0, #32
 8002a86:	f000 fb2b 	bl	80030e0 <HAL_LCD_Write_ascii>
				HAL_LCD_Write_ascii(' ',96,0);
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	2160      	movs	r1, #96	; 0x60
 8002a8e:	2020      	movs	r0, #32
 8002a90:	f000 fb26 	bl	80030e0 <HAL_LCD_Write_ascii>
				break;
 8002a94:	e01f      	b.n	8002ad6 <EDO_1+0x28e>
			case 1:
				HAL_LCD_Write_ascii(' ',72,0);
 8002a96:	2200      	movs	r2, #0
 8002a98:	2148      	movs	r1, #72	; 0x48
 8002a9a:	2020      	movs	r0, #32
 8002a9c:	f000 fb20 	bl	80030e0 <HAL_LCD_Write_ascii>
				HAL_LCD_Write_ascii('>',84,0);
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	2154      	movs	r1, #84	; 0x54
 8002aa4:	203e      	movs	r0, #62	; 0x3e
 8002aa6:	f000 fb1b 	bl	80030e0 <HAL_LCD_Write_ascii>
				HAL_LCD_Write_ascii(' ',96,0);
 8002aaa:	2200      	movs	r2, #0
 8002aac:	2160      	movs	r1, #96	; 0x60
 8002aae:	2020      	movs	r0, #32
 8002ab0:	f000 fb16 	bl	80030e0 <HAL_LCD_Write_ascii>
				break;
 8002ab4:	e00f      	b.n	8002ad6 <EDO_1+0x28e>
			case 2:
				HAL_LCD_Write_ascii(' ',72,0);
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	2148      	movs	r1, #72	; 0x48
 8002aba:	2020      	movs	r0, #32
 8002abc:	f000 fb10 	bl	80030e0 <HAL_LCD_Write_ascii>
				HAL_LCD_Write_ascii(' ',84,0);
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	2154      	movs	r1, #84	; 0x54
 8002ac4:	2020      	movs	r0, #32
 8002ac6:	f000 fb0b 	bl	80030e0 <HAL_LCD_Write_ascii>
				HAL_LCD_Write_ascii('>',96,0);
 8002aca:	2200      	movs	r2, #0
 8002acc:	2160      	movs	r1, #96	; 0x60
 8002ace:	203e      	movs	r0, #62	; 0x3e
 8002ad0:	f000 fb06 	bl	80030e0 <HAL_LCD_Write_ascii>
				break;
 8002ad4:	bf00      	nop
		}
	}
	// Aceptar
	if(btnC == 1 && btnC != btnCa && inicio == 0){
 8002ad6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d117      	bne.n	8002b0e <EDO_1+0x2c6>
 8002ade:	4b2f      	ldr	r3, [pc, #188]	; (8002b9c <EDO_1+0x354>)
 8002ae0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ae4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d010      	beq.n	8002b0e <EDO_1+0x2c6>
 8002aec:	4b2c      	ldr	r3, [pc, #176]	; (8002ba0 <EDO_1+0x358>)
 8002aee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10b      	bne.n	8002b0e <EDO_1+0x2c6>
		// Cambio de estado
		EA = E2;
 8002af6:	4b2b      	ldr	r3, [pc, #172]	; (8002ba4 <EDO_1+0x35c>)
 8002af8:	2202      	movs	r2, #2
 8002afa:	701a      	strb	r2, [r3, #0]
		HAL_LCD_Clear();
 8002afc:	f000 fa99 	bl	8003032 <HAL_LCD_Clear>
		first = 0;
 8002b00:	4b15      	ldr	r3, [pc, #84]	; (8002b58 <EDO_1+0x310>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	801a      	strh	r2, [r3, #0]
		inicio = 1;
 8002b06:	4b26      	ldr	r3, [pc, #152]	; (8002ba0 <EDO_1+0x358>)
 8002b08:	2201      	movs	r2, #1
 8002b0a:	801a      	strh	r2, [r3, #0]
 8002b0c:	e012      	b.n	8002b34 <EDO_1+0x2ec>
	}
	else if(btnC == 1 && btnC != btnCa){
 8002b0e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d10e      	bne.n	8002b34 <EDO_1+0x2ec>
 8002b16:	4b21      	ldr	r3, [pc, #132]	; (8002b9c <EDO_1+0x354>)
 8002b18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b1c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d007      	beq.n	8002b34 <EDO_1+0x2ec>
		// Cambio de estado
		first = 0;
 8002b24:	4b0c      	ldr	r3, [pc, #48]	; (8002b58 <EDO_1+0x310>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	801a      	strh	r2, [r3, #0]
		EA = E3;
 8002b2a:	4b1e      	ldr	r3, [pc, #120]	; (8002ba4 <EDO_1+0x35c>)
 8002b2c:	2203      	movs	r2, #3
 8002b2e:	701a      	strb	r2, [r3, #0]
		HAL_LCD_Clear();
 8002b30:	f000 fa7f 	bl	8003032 <HAL_LCD_Clear>
	}
	estado_Anterior(btnU, btnD, btnL, btnR, btnC);
 8002b34:	f9b7 4000 	ldrsh.w	r4, [r7]
 8002b38:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002b3c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002b40:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002b44:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002b48:	9300      	str	r3, [sp, #0]
 8002b4a:	4623      	mov	r3, r4
 8002b4c:	f7ff fda0 	bl	8002690 <estado_Anterior>
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd90      	pop	{r4, r7, pc}
 8002b58:	20000558 	.word	0x20000558
 8002b5c:	08003490 	.word	0x08003490
 8002b60:	080034a0 	.word	0x080034a0
 8002b64:	080034ac 	.word	0x080034ac
 8002b68:	08003484 	.word	0x08003484
 8002b6c:	51eb851f 	.word	0x51eb851f
 8002b70:	20000577 	.word	0x20000577
 8002b74:	20000570 	.word	0x20000570
 8002b78:	20000556 	.word	0x20000556
 8002b7c:	20000573 	.word	0x20000573
 8002b80:	20000572 	.word	0x20000572
 8002b84:	20000574 	.word	0x20000574
 8002b88:	20000575 	.word	0x20000575
 8002b8c:	20000576 	.word	0x20000576
 8002b90:	20000571 	.word	0x20000571
 8002b94:	20000562 	.word	0x20000562
 8002b98:	2000055c 	.word	0x2000055c
 8002b9c:	20000568 	.word	0x20000568
 8002ba0:	2000055a 	.word	0x2000055a
 8002ba4:	20000554 	.word	0x20000554

08002ba8 <EDO_2>:

void EDO_2(short btnU, short btnD, short btnL, short btnR, short btnC){
 8002ba8:	b590      	push	{r4, r7, lr}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af02      	add	r7, sp, #8
 8002bae:	4604      	mov	r4, r0
 8002bb0:	4608      	mov	r0, r1
 8002bb2:	4611      	mov	r1, r2
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	4623      	mov	r3, r4
 8002bb8:	80fb      	strh	r3, [r7, #6]
 8002bba:	4603      	mov	r3, r0
 8002bbc:	80bb      	strh	r3, [r7, #4]
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	807b      	strh	r3, [r7, #2]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	803b      	strh	r3, [r7, #0]
	// Pantalla principal
	// Codigo de estado inicio
	rgb_azul();
 8002bc6:	f000 fb9b 	bl	8003300 <rgb_azul>
	// Codigo de estado fin
	// Cambio de estado
	if(btnU == 1 && btnU != btnUa && btnD == 0)
 8002bca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d10e      	bne.n	8002bf0 <EDO_2+0x48>
 8002bd2:	4b19      	ldr	r3, [pc, #100]	; (8002c38 <EDO_2+0x90>)
 8002bd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bd8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d007      	beq.n	8002bf0 <EDO_2+0x48>
 8002be0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d103      	bne.n	8002bf0 <EDO_2+0x48>
		EA = E3;
 8002be8:	4b14      	ldr	r3, [pc, #80]	; (8002c3c <EDO_2+0x94>)
 8002bea:	2203      	movs	r2, #3
 8002bec:	701a      	strb	r2, [r3, #0]
 8002bee:	e011      	b.n	8002c14 <EDO_2+0x6c>
	else if(btnD == 1 && btnD != btnDa && btnU == 0)
 8002bf0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d10d      	bne.n	8002c14 <EDO_2+0x6c>
 8002bf8:	4b11      	ldr	r3, [pc, #68]	; (8002c40 <EDO_2+0x98>)
 8002bfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bfe:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d006      	beq.n	8002c14 <EDO_2+0x6c>
 8002c06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d102      	bne.n	8002c14 <EDO_2+0x6c>
		EA = E1;
 8002c0e:	4b0b      	ldr	r3, [pc, #44]	; (8002c3c <EDO_2+0x94>)
 8002c10:	2201      	movs	r2, #1
 8002c12:	701a      	strb	r2, [r3, #0]
	estado_Anterior(btnU, btnD, btnL, btnR, btnC);
 8002c14:	f9b7 4000 	ldrsh.w	r4, [r7]
 8002c18:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002c1c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002c20:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002c24:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002c28:	9300      	str	r3, [sp, #0]
 8002c2a:	4623      	mov	r3, r4
 8002c2c:	f7ff fd30 	bl	8002690 <estado_Anterior>
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd90      	pop	{r4, r7, pc}
 8002c38:	20000564 	.word	0x20000564
 8002c3c:	20000554 	.word	0x20000554
 8002c40:	20000560 	.word	0x20000560

08002c44 <EDO_3>:

void EDO_3(short btnU, short btnD, short btnL, short btnR, short btnC){
 8002c44:	b590      	push	{r4, r7, lr}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af02      	add	r7, sp, #8
 8002c4a:	4604      	mov	r4, r0
 8002c4c:	4608      	mov	r0, r1
 8002c4e:	4611      	mov	r1, r2
 8002c50:	461a      	mov	r2, r3
 8002c52:	4623      	mov	r3, r4
 8002c54:	80fb      	strh	r3, [r7, #6]
 8002c56:	4603      	mov	r3, r0
 8002c58:	80bb      	strh	r3, [r7, #4]
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	807b      	strh	r3, [r7, #2]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	803b      	strh	r3, [r7, #0]
	// Menu
	// Codigo de estado inicio
	rgb_amarillo();
 8002c62:	f000 fb5a 	bl	800331a <rgb_amarillo>
	// Codigo de estado fin
	// Cambio de estado
	if(btnU == 1 && btnU != btnUa && btnD == 0)
 8002c66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d10e      	bne.n	8002c8c <EDO_3+0x48>
 8002c6e:	4b19      	ldr	r3, [pc, #100]	; (8002cd4 <EDO_3+0x90>)
 8002c70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c74:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d007      	beq.n	8002c8c <EDO_3+0x48>
 8002c7c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d103      	bne.n	8002c8c <EDO_3+0x48>
		EA = E4;
 8002c84:	4b14      	ldr	r3, [pc, #80]	; (8002cd8 <EDO_3+0x94>)
 8002c86:	2204      	movs	r2, #4
 8002c88:	701a      	strb	r2, [r3, #0]
 8002c8a:	e011      	b.n	8002cb0 <EDO_3+0x6c>
	else if(btnD == 1 && btnD != btnDa && btnU == 0)
 8002c8c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d10d      	bne.n	8002cb0 <EDO_3+0x6c>
 8002c94:	4b11      	ldr	r3, [pc, #68]	; (8002cdc <EDO_3+0x98>)
 8002c96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c9a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d006      	beq.n	8002cb0 <EDO_3+0x6c>
 8002ca2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d102      	bne.n	8002cb0 <EDO_3+0x6c>
		EA = E2;
 8002caa:	4b0b      	ldr	r3, [pc, #44]	; (8002cd8 <EDO_3+0x94>)
 8002cac:	2202      	movs	r2, #2
 8002cae:	701a      	strb	r2, [r3, #0]
	estado_Anterior(btnU, btnD, btnL, btnR, btnC);
 8002cb0:	f9b7 4000 	ldrsh.w	r4, [r7]
 8002cb4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002cb8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002cbc:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002cc0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002cc4:	9300      	str	r3, [sp, #0]
 8002cc6:	4623      	mov	r3, r4
 8002cc8:	f7ff fce2 	bl	8002690 <estado_Anterior>
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd90      	pop	{r4, r7, pc}
 8002cd4:	20000564 	.word	0x20000564
 8002cd8:	20000554 	.word	0x20000554
 8002cdc:	20000560 	.word	0x20000560

08002ce0 <EDO_4>:

void EDO_4(short btnU, short btnD, short btnL, short btnR, short btnC){
 8002ce0:	b590      	push	{r4, r7, lr}
 8002ce2:	b085      	sub	sp, #20
 8002ce4:	af02      	add	r7, sp, #8
 8002ce6:	4604      	mov	r4, r0
 8002ce8:	4608      	mov	r0, r1
 8002cea:	4611      	mov	r1, r2
 8002cec:	461a      	mov	r2, r3
 8002cee:	4623      	mov	r3, r4
 8002cf0:	80fb      	strh	r3, [r7, #6]
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	80bb      	strh	r3, [r7, #4]
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	807b      	strh	r3, [r7, #2]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	803b      	strh	r3, [r7, #0]
	// Alarma Temperatura
	// Codigo de estado inicio
	rgb_celeste();
 8002cfe:	f000 fb19 	bl	8003334 <rgb_celeste>
	// Codigo de estado fin
	// Cambio de estado
	if(btnU == 1 && btnU != btnUa && btnD == 0)
 8002d02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d10e      	bne.n	8002d28 <EDO_4+0x48>
 8002d0a:	4b19      	ldr	r3, [pc, #100]	; (8002d70 <EDO_4+0x90>)
 8002d0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d10:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d007      	beq.n	8002d28 <EDO_4+0x48>
 8002d18:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d103      	bne.n	8002d28 <EDO_4+0x48>
		EA = E5;
 8002d20:	4b14      	ldr	r3, [pc, #80]	; (8002d74 <EDO_4+0x94>)
 8002d22:	2205      	movs	r2, #5
 8002d24:	701a      	strb	r2, [r3, #0]
 8002d26:	e011      	b.n	8002d4c <EDO_4+0x6c>
	else if(btnD == 1 && btnD != btnDa && btnU == 0)
 8002d28:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d10d      	bne.n	8002d4c <EDO_4+0x6c>
 8002d30:	4b11      	ldr	r3, [pc, #68]	; (8002d78 <EDO_4+0x98>)
 8002d32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d36:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d006      	beq.n	8002d4c <EDO_4+0x6c>
 8002d3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d102      	bne.n	8002d4c <EDO_4+0x6c>
		EA = E3;
 8002d46:	4b0b      	ldr	r3, [pc, #44]	; (8002d74 <EDO_4+0x94>)
 8002d48:	2203      	movs	r2, #3
 8002d4a:	701a      	strb	r2, [r3, #0]
	estado_Anterior(btnU, btnD, btnL, btnR, btnC);
 8002d4c:	f9b7 4000 	ldrsh.w	r4, [r7]
 8002d50:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002d54:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002d58:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002d5c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002d60:	9300      	str	r3, [sp, #0]
 8002d62:	4623      	mov	r3, r4
 8002d64:	f7ff fc94 	bl	8002690 <estado_Anterior>
}
 8002d68:	bf00      	nop
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd90      	pop	{r4, r7, pc}
 8002d70:	20000564 	.word	0x20000564
 8002d74:	20000554 	.word	0x20000554
 8002d78:	20000560 	.word	0x20000560

08002d7c <EDO_5>:

void EDO_5(short btnU, short btnD, short btnL, short btnR, short btnC){
 8002d7c:	b590      	push	{r4, r7, lr}
 8002d7e:	b085      	sub	sp, #20
 8002d80:	af02      	add	r7, sp, #8
 8002d82:	4604      	mov	r4, r0
 8002d84:	4608      	mov	r0, r1
 8002d86:	4611      	mov	r1, r2
 8002d88:	461a      	mov	r2, r3
 8002d8a:	4623      	mov	r3, r4
 8002d8c:	80fb      	strh	r3, [r7, #6]
 8002d8e:	4603      	mov	r3, r0
 8002d90:	80bb      	strh	r3, [r7, #4]
 8002d92:	460b      	mov	r3, r1
 8002d94:	807b      	strh	r3, [r7, #2]
 8002d96:	4613      	mov	r3, r2
 8002d98:	803b      	strh	r3, [r7, #0]
	// Alarma Pastilla
	// Codigo de estado inicio
	rgb_morado();
 8002d9a:	f000 fad8 	bl	800334e <rgb_morado>
	// Codigo de estado fin
	// Cambio de estado
	if(btnU == 1 && btnU != btnUa && btnD == 0)
 8002d9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d10e      	bne.n	8002dc4 <EDO_5+0x48>
 8002da6:	4b19      	ldr	r3, [pc, #100]	; (8002e0c <EDO_5+0x90>)
 8002da8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dac:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d007      	beq.n	8002dc4 <EDO_5+0x48>
 8002db4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d103      	bne.n	8002dc4 <EDO_5+0x48>
		EA = E6;
 8002dbc:	4b14      	ldr	r3, [pc, #80]	; (8002e10 <EDO_5+0x94>)
 8002dbe:	2206      	movs	r2, #6
 8002dc0:	701a      	strb	r2, [r3, #0]
 8002dc2:	e011      	b.n	8002de8 <EDO_5+0x6c>
	else if(btnD == 1 && btnD != btnDa && btnU == 0)
 8002dc4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d10d      	bne.n	8002de8 <EDO_5+0x6c>
 8002dcc:	4b11      	ldr	r3, [pc, #68]	; (8002e14 <EDO_5+0x98>)
 8002dce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dd2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d006      	beq.n	8002de8 <EDO_5+0x6c>
 8002dda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d102      	bne.n	8002de8 <EDO_5+0x6c>
		EA = E4;
 8002de2:	4b0b      	ldr	r3, [pc, #44]	; (8002e10 <EDO_5+0x94>)
 8002de4:	2204      	movs	r2, #4
 8002de6:	701a      	strb	r2, [r3, #0]
	estado_Anterior(btnU, btnD, btnL, btnR, btnC);
 8002de8:	f9b7 4000 	ldrsh.w	r4, [r7]
 8002dec:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002df0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002df4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002df8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002dfc:	9300      	str	r3, [sp, #0]
 8002dfe:	4623      	mov	r3, r4
 8002e00:	f7ff fc46 	bl	8002690 <estado_Anterior>
}
 8002e04:	bf00      	nop
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd90      	pop	{r4, r7, pc}
 8002e0c:	20000564 	.word	0x20000564
 8002e10:	20000554 	.word	0x20000554
 8002e14:	20000560 	.word	0x20000560

08002e18 <EDO_6>:

void EDO_6(short btnU, short btnD, short btnL, short btnR, short btnC){
 8002e18:	b590      	push	{r4, r7, lr}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af02      	add	r7, sp, #8
 8002e1e:	4604      	mov	r4, r0
 8002e20:	4608      	mov	r0, r1
 8002e22:	4611      	mov	r1, r2
 8002e24:	461a      	mov	r2, r3
 8002e26:	4623      	mov	r3, r4
 8002e28:	80fb      	strh	r3, [r7, #6]
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	80bb      	strh	r3, [r7, #4]
 8002e2e:	460b      	mov	r3, r1
 8002e30:	807b      	strh	r3, [r7, #2]
 8002e32:	4613      	mov	r3, r2
 8002e34:	803b      	strh	r3, [r7, #0]
	// Codigo de estado inicio
	rgb_blanco();
 8002e36:	f000 fa97 	bl	8003368 <rgb_blanco>
	// Codigo de estado fin
	// Cambio de estado
	if(btnU == 1 && btnU != btnUa && btnD == 0)
 8002e3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d10e      	bne.n	8002e60 <EDO_6+0x48>
 8002e42:	4b19      	ldr	r3, [pc, #100]	; (8002ea8 <EDO_6+0x90>)
 8002e44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e48:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d007      	beq.n	8002e60 <EDO_6+0x48>
 8002e50:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d103      	bne.n	8002e60 <EDO_6+0x48>
		EA = E0;
 8002e58:	4b14      	ldr	r3, [pc, #80]	; (8002eac <EDO_6+0x94>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	701a      	strb	r2, [r3, #0]
 8002e5e:	e011      	b.n	8002e84 <EDO_6+0x6c>
	else if(btnD == 1 && btnD != btnDa && btnU == 0)
 8002e60:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d10d      	bne.n	8002e84 <EDO_6+0x6c>
 8002e68:	4b11      	ldr	r3, [pc, #68]	; (8002eb0 <EDO_6+0x98>)
 8002e6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e6e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d006      	beq.n	8002e84 <EDO_6+0x6c>
 8002e76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d102      	bne.n	8002e84 <EDO_6+0x6c>
		EA = E5;
 8002e7e:	4b0b      	ldr	r3, [pc, #44]	; (8002eac <EDO_6+0x94>)
 8002e80:	2205      	movs	r2, #5
 8002e82:	701a      	strb	r2, [r3, #0]
	estado_Anterior(btnU, btnD, btnL, btnR, btnC);
 8002e84:	f9b7 4000 	ldrsh.w	r4, [r7]
 8002e88:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002e8c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002e90:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002e94:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002e98:	9300      	str	r3, [sp, #0]
 8002e9a:	4623      	mov	r3, r4
 8002e9c:	f7ff fbf8 	bl	8002690 <estado_Anterior>
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd90      	pop	{r4, r7, pc}
 8002ea8:	20000564 	.word	0x20000564
 8002eac:	20000554 	.word	0x20000554
 8002eb0:	20000560 	.word	0x20000560

08002eb4 <fsm>:
		{E4,EDO_4},
		{E5,EDO_5},
		{E6,EDO_6}
};

void fsm(short btnU, short btnD,short btnL, short btnR, short btnC){
 8002eb4:	b5b0      	push	{r4, r5, r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af02      	add	r7, sp, #8
 8002eba:	4604      	mov	r4, r0
 8002ebc:	4608      	mov	r0, r1
 8002ebe:	4611      	mov	r1, r2
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	4623      	mov	r3, r4
 8002ec4:	80fb      	strh	r3, [r7, #6]
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	80bb      	strh	r3, [r7, #4]
 8002eca:	460b      	mov	r3, r1
 8002ecc:	807b      	strh	r3, [r7, #2]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	803b      	strh	r3, [r7, #0]
	MDE[EA].func(btnU, btnD, btnL, btnR, btnC);
 8002ed2:	4b0b      	ldr	r3, [pc, #44]	; (8002f00 <fsm+0x4c>)
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	4a0b      	ldr	r2, [pc, #44]	; (8002f04 <fsm+0x50>)
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	4413      	add	r3, r2
 8002edc:	685c      	ldr	r4, [r3, #4]
 8002ede:	f9b7 5000 	ldrsh.w	r5, [r7]
 8002ee2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002ee6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002eea:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002eee:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002ef2:	9300      	str	r3, [sp, #0]
 8002ef4:	462b      	mov	r3, r5
 8002ef6:	47a0      	blx	r4
}
 8002ef8:	bf00      	nop
 8002efa:	3708      	adds	r7, #8
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bdb0      	pop	{r4, r5, r7, pc}
 8002f00:	20000554 	.word	0x20000554
 8002f04:	20000004 	.word	0x20000004

08002f08 <LL_GPIO_SetOutputPin>:
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	683a      	ldr	r2, [r7, #0]
 8002f16:	619a      	str	r2, [r3, #24]
}
 8002f18:	bf00      	nop
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <LL_GPIO_ResetOutputPin>:
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	683a      	ldr	r2, [r7, #0]
 8002f32:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <HAL_LCD_Init>:
uint8_t AlreadyEnterMenu=0;
uint8_t	ConfigurationStage=0;
uint8_t AlreadyEnterAlarmConfig=0;

void HAL_LCD_Init(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
	/* This function initialize the LCD, this function must be call first
	before performing any operation in the LCD, the used GPIOs were initialized in the main */

	/*Before starting sending information to the LCD,
	it is necessary to initialize the SPI communication*/
	MX_SPI1_Init();
 8002f44:	f7fe fb82 	bl	800164c <MX_SPI1_Init>

	/*We need to make sure the LCD reaches 3.3V, therefore we make a delay of 1ms after reseting the LCD
	to start sending information*/
	HAL_LCD_Reset();
 8002f48:	f000 f822 	bl	8002f90 <HAL_LCD_Reset>
	LL_mDelay(1);
 8002f4c:	2001      	movs	r0, #1
 8002f4e:	f7ff fb6b 	bl	8002628 <LL_mDelay>

	/*These commands are necessary to initialize the LCD, you can find
	them in the datasheet of the LCD NHD-C12832A1Z-FSW-FBW-3V3 or chip on glass ST7565R */

	/*We set the segment (columns) order to NORMAL*/
	HAL_LCD_Send_Command(CMD_ADC_SELECT(ADC_NORMAL));
 8002f52:	20a0      	movs	r0, #160	; 0xa0
 8002f54:	f000 f841 	bl	8002fda <HAL_LCD_Send_Command>

	 /*TURNS OFF the display*/
	HAL_LCD_Send_Command(CMD_DISPLAY_ON_OFF(DISPLAY_OFF));
 8002f58:	20ae      	movs	r0, #174	; 0xae
 8002f5a:	f000 f83e 	bl	8002fda <HAL_LCD_Send_Command>

	/*Selects COM output scan direction to normal direction*/
	HAL_LCD_Send_Command(CMD_COM_DIRECTION(COM_DIRECTION_REVERSE));
 8002f5e:	20c8      	movs	r0, #200	; 0xc8
 8002f60:	f000 f83b 	bl	8002fda <HAL_LCD_Send_Command>

	/*Sets the LCD drive voltage bias ratio to 1/9*/
	HAL_LCD_Send_Command(CMD_BIAS_RATIO(CMD_BIAS_19));
 8002f64:	20a2      	movs	r0, #162	; 0xa2
 8002f66:	f000 f838 	bl	8002fda <HAL_LCD_Send_Command>

	/*Select internal power supply 111*/
	HAL_LCD_Send_Command(CMD_PWR_CONTROL(PWR_INTERNAL_SUPPLY));
 8002f6a:	202f      	movs	r0, #47	; 0x2f
 8002f6c:	f000 f835 	bl	8002fda <HAL_LCD_Send_Command>

	/*Select internal resistor ratio 001 */
	HAL_LCD_Send_Command(CMD_RES_RATIO(RES_RATIO_35));
 8002f70:	2021      	movs	r0, #33	; 0x21
 8002f72:	f000 f832 	bl	8002fda <HAL_LCD_Send_Command>

	/*Electronic volume mode  */
	HAL_LCD_Send_Command(CMD_ELEC_VOL_MODE);
 8002f76:	2081      	movs	r0, #129	; 0x81
 8002f78:	f000 f82f 	bl	8002fda <HAL_LCD_Send_Command>

	/*SET electronic volume (contrast), please NOTE this value is different from the datasheet,
	the datasheet specifies to configure a 3F, however, the contrast is to high and we would have
	problems to see the configured pixel in further LCD configurations*/
	HAL_LCD_Send_Command(CMD_ELEC_VOL_SET_LOW);
 8002f7c:	201f      	movs	r0, #31
 8002f7e:	f000 f82c 	bl	8002fda <HAL_LCD_Send_Command>

	/* End of the initialization commands from datasheet, the following commands are just to prepare the
	 LCD before start implementing functions */

	/* With this command we want to set all the points in the LCD to work normal*/
	HAL_LCD_Send_Command(CMD_LCD_POINTS(LCD_POINTS_NORMAL));
 8002f82:	20a4      	movs	r0, #164	; 0xa4
 8002f84:	f000 f829 	bl	8002fda <HAL_LCD_Send_Command>

	/*After initializating the LCD, it is necessary to clear all display because
	it could have information in RAM after it was turned off*/
	HAL_LCD_Clear();
 8002f88:	f000 f853 	bl	8003032 <HAL_LCD_Clear>

	return;
 8002f8c:	bf00      	nop
}
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <HAL_LCD_Reset>:
void HAL_LCD_Reset(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
	/*Pin PA6 is configured as RESET signal of LCD,
	when the reset signal is inactive, it is HIGH, if we want to reset the LCD
	, we reset the signal to LOW and release
	PA6   ------> LCD_RESET*/

	LL_GPIO_ResetOutputPin(LCD_RESET_GPIO_Port,LCD_RESET_Pin);
 8002f94:	2140      	movs	r1, #64	; 0x40
 8002f96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f9a:	f7ff ffc3 	bl	8002f24 <LL_GPIO_ResetOutputPin>
	LL_mDelay(1);
 8002f9e:	2001      	movs	r0, #1
 8002fa0:	f7ff fb42 	bl	8002628 <LL_mDelay>
	LL_GPIO_SetOutputPin(LCD_RESET_GPIO_Port,LCD_RESET_Pin);
 8002fa4:	2140      	movs	r1, #64	; 0x40
 8002fa6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002faa:	f7ff ffad 	bl	8002f08 <LL_GPIO_SetOutputPin>

	return;
 8002fae:	bf00      	nop
}
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <HAL_LCD_A0_Data>:

void HAL_LCD_A0_Data(void)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	af00      	add	r7, sp, #0
	/*Pin PA8 is configured as A0 signal of LCD,
	when the A0 is HIGH, the information is a DATA
	PA8   ------> LCD_A0*/
	LL_GPIO_SetOutputPin(LCD_A0_GPIO_Port,LCD_A0_Pin);
 8002fb6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002fba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fbe:	f7ff ffa3 	bl	8002f08 <LL_GPIO_SetOutputPin>

	return;
 8002fc2:	bf00      	nop
}
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <HAL_LCD_A0_Command>:
void HAL_LCD_A0_Command(void)
{
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	af00      	add	r7, sp, #0
	/*Pin PA8 is configured as A0 signal of LCD,
	when the A0 is LOW, the information is a COMMAND
	PA8   ------> LCD_A0*/
	LL_GPIO_ResetOutputPin(LCD_A0_GPIO_Port,LCD_A0_Pin);
 8002fca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002fce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fd2:	f7ff ffa7 	bl	8002f24 <LL_GPIO_ResetOutputPin>

	return;
 8002fd6:	bf00      	nop
}
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <HAL_LCD_Send_Command>:

void HAL_LCD_Send_Command(uint8_t command)
{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b082      	sub	sp, #8
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	71fb      	strb	r3, [r7, #7]
	/*Function to send a command through SPI1, it configures automatically the A0=0
	therefore, it is a command. It enables CHIP SELECT signal and disables it after transmission is done */
	MX_SPI1_CS_Enable();
 8002fe4:	f7fe fbbc 	bl	8001760 <MX_SPI1_CS_Enable>
	HAL_LCD_A0_Command();
 8002fe8:	f7ff ffed 	bl	8002fc6 <HAL_LCD_A0_Command>
	MX_SPI1_Send(command);
 8002fec:	79fb      	ldrb	r3, [r7, #7]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7fe fb98 	bl	8001724 <MX_SPI1_Send>
	LL_mDelay(0.1);
 8002ff4:	2000      	movs	r0, #0
 8002ff6:	f7ff fb17 	bl	8002628 <LL_mDelay>
	MX_SPI1_CS_Disable();
 8002ffa:	f7fe fbbb 	bl	8001774 <MX_SPI1_CS_Disable>

	return;
 8002ffe:	bf00      	nop
}
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <HAL_LCD_Send_Data>:

void HAL_LCD_Send_Data(uint8_t data)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b082      	sub	sp, #8
 800300a:	af00      	add	r7, sp, #0
 800300c:	4603      	mov	r3, r0
 800300e:	71fb      	strb	r3, [r7, #7]
	/*Function to send a data through SPI1, it configures automatically the A0=1
	therefore, it is a data. It enables CHIP SELECT signal and disables it after transmission is done */
	MX_SPI1_CS_Enable();
 8003010:	f7fe fba6 	bl	8001760 <MX_SPI1_CS_Enable>
	HAL_LCD_A0_Data();
 8003014:	f7ff ffcd 	bl	8002fb2 <HAL_LCD_A0_Data>
	MX_SPI1_Send(data);
 8003018:	79fb      	ldrb	r3, [r7, #7]
 800301a:	4618      	mov	r0, r3
 800301c:	f7fe fb82 	bl	8001724 <MX_SPI1_Send>
	LL_mDelay(0.1);
 8003020:	2000      	movs	r0, #0
 8003022:	f7ff fb01 	bl	8002628 <LL_mDelay>
	MX_SPI1_CS_Disable();
 8003026:	f7fe fba5 	bl	8001774 <MX_SPI1_CS_Disable>

	return;
 800302a:	bf00      	nop
}
 800302c:	3708      	adds	r7, #8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <HAL_LCD_Clear>:

void HAL_LCD_Clear(void)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b082      	sub	sp, #8
 8003036:	af00      	add	r7, sp, #0
	/*Function to clear ALL LCD, from page=0, column =0,
	to page = 3, column = 127, after clear, the cursor
	is set at page=0, column=0*/
	HAL_LCD_Send_Command(CMD_DISPLAY_ON_OFF(DISPLAY_OFF));
 8003038:	20ae      	movs	r0, #174	; 0xae
 800303a:	f7ff ffce 	bl	8002fda <HAL_LCD_Send_Command>
	for (uint8_t page=0 ; page <= MAX_PAGES ; page++)
 800303e:	2300      	movs	r3, #0
 8003040:	71fb      	strb	r3, [r7, #7]
 8003042:	e014      	b.n	800306e <HAL_LCD_Clear+0x3c>
	{

		HAL_LCD_Set_Position(0,page);
 8003044:	79fb      	ldrb	r3, [r7, #7]
 8003046:	4619      	mov	r1, r3
 8003048:	2000      	movs	r0, #0
 800304a:	f000 f81e 	bl	800308a <HAL_LCD_Set_Position>
		for(uint8_t column=0;column<= MAX_WIDHT ; column++)
 800304e:	2300      	movs	r3, #0
 8003050:	71bb      	strb	r3, [r7, #6]
 8003052:	e005      	b.n	8003060 <HAL_LCD_Clear+0x2e>
		{
			HAL_LCD_Send_Data(ERASE_BYTE);
 8003054:	2000      	movs	r0, #0
 8003056:	f7ff ffd6 	bl	8003006 <HAL_LCD_Send_Data>
		for(uint8_t column=0;column<= MAX_WIDHT ; column++)
 800305a:	79bb      	ldrb	r3, [r7, #6]
 800305c:	3301      	adds	r3, #1
 800305e:	71bb      	strb	r3, [r7, #6]
 8003060:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003064:	2b00      	cmp	r3, #0
 8003066:	daf5      	bge.n	8003054 <HAL_LCD_Clear+0x22>
	for (uint8_t page=0 ; page <= MAX_PAGES ; page++)
 8003068:	79fb      	ldrb	r3, [r7, #7]
 800306a:	3301      	adds	r3, #1
 800306c:	71fb      	strb	r3, [r7, #7]
 800306e:	79fb      	ldrb	r3, [r7, #7]
 8003070:	2b03      	cmp	r3, #3
 8003072:	d9e7      	bls.n	8003044 <HAL_LCD_Clear+0x12>
		}
	}
	HAL_LCD_Set_Position(0,0);
 8003074:	2100      	movs	r1, #0
 8003076:	2000      	movs	r0, #0
 8003078:	f000 f807 	bl	800308a <HAL_LCD_Set_Position>
	HAL_LCD_Send_Command(CMD_DISPLAY_ON_OFF(DISPLAY_ON));
 800307c:	20af      	movs	r0, #175	; 0xaf
 800307e:	f7ff ffac 	bl	8002fda <HAL_LCD_Send_Command>

	return;
 8003082:	bf00      	nop
}
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <HAL_LCD_Set_Position>:

void HAL_LCD_Set_Position(uint8_t column, uint8_t page)
{
 800308a:	b580      	push	{r7, lr}
 800308c:	b082      	sub	sp, #8
 800308e:	af00      	add	r7, sp, #0
 8003090:	4603      	mov	r3, r0
 8003092:	460a      	mov	r2, r1
 8003094:	71fb      	strb	r3, [r7, #7]
 8003096:	4613      	mov	r3, r2
 8003098:	71bb      	strb	r3, [r7, #6]
	/*This function sets the position of the cursor, remember that
	MAX COLUMN = 127 and MAX PAGE = 3, the cursor is not explicit showed in the LCD,
	it is just a reference word to understand where the LCD starting is*/
	HAL_LCD_Send_Command(CMD_COLUMN_MSB(column));
 800309a:	79fb      	ldrb	r3, [r7, #7]
 800309c:	091b      	lsrs	r3, r3, #4
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	b25b      	sxtb	r3, r3
 80030a2:	f043 0310 	orr.w	r3, r3, #16
 80030a6:	b25b      	sxtb	r3, r3
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7ff ff95 	bl	8002fda <HAL_LCD_Send_Command>
	HAL_LCD_Send_Command(CMD_COLUMN_LSB(column));
 80030b0:	79fb      	ldrb	r3, [r7, #7]
 80030b2:	f003 030f 	and.w	r3, r3, #15
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7ff ff8e 	bl	8002fda <HAL_LCD_Send_Command>
	HAL_LCD_Send_Command(CMD_PAGE(page));
 80030be:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80030c2:	f003 030f 	and.w	r3, r3, #15
 80030c6:	b25b      	sxtb	r3, r3
 80030c8:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80030cc:	b25b      	sxtb	r3, r3
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7ff ff82 	bl	8002fda <HAL_LCD_Send_Command>

	return;
 80030d6:	bf00      	nop
}
 80030d8:	3708      	adds	r7, #8
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
	...

080030e0 <HAL_LCD_Write_ascii>:
void HAL_LCD_Write_ascii(uint8_t ascii, uint8_t column, uint8_t page)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	4603      	mov	r3, r0
 80030e8:	71fb      	strb	r3, [r7, #7]
 80030ea:	460b      	mov	r3, r1
 80030ec:	71bb      	strb	r3, [r7, #6]
 80030ee:	4613      	mov	r3, r2
 80030f0:	717b      	strb	r3, [r7, #5]
	/*This function requires a byte to print a single ascii character in the LCD,
	this function also requires the exact page and column to print the ascii character in the lcd
	remember that, MAX_WIDTH = 127, MAX_PAGE = 3 */
	HAL_LCD_Send_Command(CMD_DISPLAY_ON_OFF(DISPLAY_ON));
 80030f2:	20af      	movs	r0, #175	; 0xaf
 80030f4:	f7ff ff71 	bl	8002fda <HAL_LCD_Send_Command>
	HAL_LCD_Set_Position(column,page);
 80030f8:	797a      	ldrb	r2, [r7, #5]
 80030fa:	79bb      	ldrb	r3, [r7, #6]
 80030fc:	4611      	mov	r1, r2
 80030fe:	4618      	mov	r0, r3
 8003100:	f7ff ffc3 	bl	800308a <HAL_LCD_Set_Position>

	uint8_t *arr = font;
 8003104:	4b11      	ldr	r3, [pc, #68]	; (800314c <HAL_LCD_Write_ascii+0x6c>)
 8003106:	60bb      	str	r3, [r7, #8]
	for (uint8_t i=0; i<MAX_PIXEL_WIDTH ; i++)
 8003108:	2300      	movs	r3, #0
 800310a:	73fb      	strb	r3, [r7, #15]
 800310c:	e013      	b.n	8003136 <HAL_LCD_Write_ascii+0x56>
	{
		HAL_LCD_Send_Data(HAL_REVERSE_BYTE(arr[(ascii*5)+i]));
 800310e:	79fa      	ldrb	r2, [r7, #7]
 8003110:	4613      	mov	r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	441a      	add	r2, r3
 8003116:	7bfb      	ldrb	r3, [r7, #15]
 8003118:	4413      	add	r3, r2
 800311a:	461a      	mov	r2, r3
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	4413      	add	r3, r2
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	4618      	mov	r0, r3
 8003124:	f000 f814 	bl	8003150 <HAL_REVERSE_BYTE>
 8003128:	4603      	mov	r3, r0
 800312a:	4618      	mov	r0, r3
 800312c:	f7ff ff6b 	bl	8003006 <HAL_LCD_Send_Data>
	for (uint8_t i=0; i<MAX_PIXEL_WIDTH ; i++)
 8003130:	7bfb      	ldrb	r3, [r7, #15]
 8003132:	3301      	adds	r3, #1
 8003134:	73fb      	strb	r3, [r7, #15]
 8003136:	7bfb      	ldrb	r3, [r7, #15]
 8003138:	2b04      	cmp	r3, #4
 800313a:	d9e8      	bls.n	800310e <HAL_LCD_Write_ascii+0x2e>
	}

	HAL_LCD_Send_Data(LETTER_SEPARATOR_BYTE);
 800313c:	2000      	movs	r0, #0
 800313e:	f7ff ff62 	bl	8003006 <HAL_LCD_Send_Data>

	return;
 8003142:	bf00      	nop
}
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	2000003c 	.word	0x2000003c

08003150 <HAL_REVERSE_BYTE>:
uint8_t HAL_REVERSE_BYTE(uint8_t byte)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	4603      	mov	r3, r0
 8003158:	71fb      	strb	r3, [r7, #7]
	/*This function reverse a single BYTE, why do we need this function?
	remember when we reversed the COMs in the HAL_LCD_Init() function, due this
	the line address of the pages was flip, this means that the MSB line of each page was in the bottom
	and the LSB was at the top. You need a function to reverse the data byte */
	byte = (byte & 0xF0) >> 4 | (byte & 0x0F) << 4;
 800315a:	79fb      	ldrb	r3, [r7, #7]
 800315c:	091b      	lsrs	r3, r3, #4
 800315e:	b2db      	uxtb	r3, r3
 8003160:	b25a      	sxtb	r2, r3
 8003162:	79fb      	ldrb	r3, [r7, #7]
 8003164:	011b      	lsls	r3, r3, #4
 8003166:	b25b      	sxtb	r3, r3
 8003168:	4313      	orrs	r3, r2
 800316a:	b25b      	sxtb	r3, r3
 800316c:	71fb      	strb	r3, [r7, #7]
	byte = (byte & 0xCC) >> 2 | (byte & 0x33) << 2;
 800316e:	79fb      	ldrb	r3, [r7, #7]
 8003170:	109b      	asrs	r3, r3, #2
 8003172:	b25b      	sxtb	r3, r3
 8003174:	f003 0333 	and.w	r3, r3, #51	; 0x33
 8003178:	b25a      	sxtb	r2, r3
 800317a:	79fb      	ldrb	r3, [r7, #7]
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	b25b      	sxtb	r3, r3
 8003180:	f023 0333 	bic.w	r3, r3, #51	; 0x33
 8003184:	b25b      	sxtb	r3, r3
 8003186:	4313      	orrs	r3, r2
 8003188:	b25b      	sxtb	r3, r3
 800318a:	71fb      	strb	r3, [r7, #7]
	byte = (byte & 0xAA) >> 1 | (byte & 0x55) << 1;
 800318c:	79fb      	ldrb	r3, [r7, #7]
 800318e:	105b      	asrs	r3, r3, #1
 8003190:	b25b      	sxtb	r3, r3
 8003192:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8003196:	b25a      	sxtb	r2, r3
 8003198:	79fb      	ldrb	r3, [r7, #7]
 800319a:	005b      	lsls	r3, r3, #1
 800319c:	b25b      	sxtb	r3, r3
 800319e:	f023 0355 	bic.w	r3, r3, #85	; 0x55
 80031a2:	b25b      	sxtb	r3, r3
 80031a4:	4313      	orrs	r3, r2
 80031a6:	b25b      	sxtb	r3, r3
 80031a8:	71fb      	strb	r3, [r7, #7]

	return byte;
 80031aa:	79fb      	ldrb	r3, [r7, #7]
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <HAL_LCD_Write_AsciiString>:

void HAL_LCD_Write_AsciiString(uint8_t *word, uint8_t column, uint8_t page)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	460b      	mov	r3, r1
 80031c2:	70fb      	strb	r3, [r7, #3]
 80031c4:	4613      	mov	r3, r2
 80031c6:	70bb      	strb	r3, [r7, #2]
	/*This function writes a ascii string on the display, it could be a string like
	"Hello", "123", "Hello123" or "Hello 123", this function considers also spaces*/
	HAL_LCD_Set_Position(column,page);
 80031c8:	78ba      	ldrb	r2, [r7, #2]
 80031ca:	78fb      	ldrb	r3, [r7, #3]
 80031cc:	4611      	mov	r1, r2
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7ff ff5b 	bl	800308a <HAL_LCD_Set_Position>
	for (uint8_t i=0;i<21;i++)
 80031d4:	2300      	movs	r3, #0
 80031d6:	73fb      	strb	r3, [r7, #15]
 80031d8:	e014      	b.n	8003204 <HAL_LCD_Write_AsciiString+0x4c>
	{
		if (word[i]=='\0')
 80031da:	7bfb      	ldrb	r3, [r7, #15]
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	4413      	add	r3, r2
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d013      	beq.n	800320e <HAL_LCD_Write_AsciiString+0x56>
		{
			return;
		}//
		else
		{
		HAL_LCD_Write_ascii(word[i],column,page);
 80031e6:	7bfb      	ldrb	r3, [r7, #15]
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	4413      	add	r3, r2
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	78ba      	ldrb	r2, [r7, #2]
 80031f0:	78f9      	ldrb	r1, [r7, #3]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7ff ff74 	bl	80030e0 <HAL_LCD_Write_ascii>
		column+=6;
 80031f8:	78fb      	ldrb	r3, [r7, #3]
 80031fa:	3306      	adds	r3, #6
 80031fc:	70fb      	strb	r3, [r7, #3]
	for (uint8_t i=0;i<21;i++)
 80031fe:	7bfb      	ldrb	r3, [r7, #15]
 8003200:	3301      	adds	r3, #1
 8003202:	73fb      	strb	r3, [r7, #15]
 8003204:	7bfb      	ldrb	r3, [r7, #15]
 8003206:	2b14      	cmp	r3, #20
 8003208:	d9e7      	bls.n	80031da <HAL_LCD_Write_AsciiString+0x22>
		}
	}

	return;
 800320a:	bf00      	nop
 800320c:	e000      	b.n	8003210 <HAL_LCD_Write_AsciiString+0x58>
			return;
 800320e:	bf00      	nop


}
 8003210:	3710      	adds	r7, #16
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
	...

08003218 <HAL_LCD_Write_Number>:

void HAL_LCD_Write_Number(uint8_t *number, uint8_t column, uint8_t page)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	460b      	mov	r3, r1
 8003222:	70fb      	strb	r3, [r7, #3]
 8003224:	4613      	mov	r3, r2
 8003226:	70bb      	strb	r3, [r7, #2]
	/*This function writes a number of 2 digits, it also needs the column and page where you want the
	number, if the number is less than two digits, it will print 0#. Ex. If you want to print 9, the LCD
	will print 09*/
	uint8_t AsciiFirstDigit=*number/10+ADD_VALUE_TO_ASCII;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	4a12      	ldr	r2, [pc, #72]	; (8003278 <HAL_LCD_Write_Number+0x60>)
 800322e:	fba2 2303 	umull	r2, r3, r2, r3
 8003232:	08db      	lsrs	r3, r3, #3
 8003234:	b2db      	uxtb	r3, r3
 8003236:	3330      	adds	r3, #48	; 0x30
 8003238:	73fb      	strb	r3, [r7, #15]
	uint8_t AsciiSecondDigit = *number%10+ADD_VALUE_TO_ASCII;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	781a      	ldrb	r2, [r3, #0]
 800323e:	4b0e      	ldr	r3, [pc, #56]	; (8003278 <HAL_LCD_Write_Number+0x60>)
 8003240:	fba3 1302 	umull	r1, r3, r3, r2
 8003244:	08d9      	lsrs	r1, r3, #3
 8003246:	460b      	mov	r3, r1
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	440b      	add	r3, r1
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	b2db      	uxtb	r3, r3
 8003252:	3330      	adds	r3, #48	; 0x30
 8003254:	73bb      	strb	r3, [r7, #14]
	uint8_t numberAscii [3]= {AsciiFirstDigit, AsciiSecondDigit,'\0'};
 8003256:	7bfb      	ldrb	r3, [r7, #15]
 8003258:	723b      	strb	r3, [r7, #8]
 800325a:	7bbb      	ldrb	r3, [r7, #14]
 800325c:	727b      	strb	r3, [r7, #9]
 800325e:	2300      	movs	r3, #0
 8003260:	72bb      	strb	r3, [r7, #10]
	HAL_LCD_Write_AsciiString(numberAscii,column,page);
 8003262:	78ba      	ldrb	r2, [r7, #2]
 8003264:	78f9      	ldrb	r1, [r7, #3]
 8003266:	f107 0308 	add.w	r3, r7, #8
 800326a:	4618      	mov	r0, r3
 800326c:	f7ff ffa4 	bl	80031b8 <HAL_LCD_Write_AsciiString>

	return;
 8003270:	bf00      	nop
}
 8003272:	3710      	adds	r7, #16
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	cccccccd 	.word	0xcccccccd

0800327c <HAL_POT_Init>:
 */
#include "HAL_POT.h"

/*This function initialize the ADC*/
void HAL_POT_Init(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	af00      	add	r7, sp, #0
	MX_ADC1_Init();
 8003280:	f7fd f912 	bl	80004a8 <MX_ADC1_Init>
	MX_ADC1_Calibration();
 8003284:	f7fd f9bc 	bl	8000600 <MX_ADC1_Calibration>
	MX_ADC1_Enable();
 8003288:	f7fd f9aa 	bl	80005e0 <MX_ADC1_Enable>
}
 800328c:	bf00      	nop
 800328e:	bd80      	pop	{r7, pc}

08003290 <HAL_POT_GetBinaryValue>:

/*This function returns the ADC value i an 8 bits format*/
uint16_t HAL_POT_GetBinaryValue (uint32_t Channel)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
	uint16_t POT_value = 0;
 8003298:	2300      	movs	r3, #0
 800329a:	81fb      	strh	r3, [r7, #14]
	MX_ADC1_SetChannel(Channel);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f7fd f9c1 	bl	8000624 <MX_ADC1_SetChannel>
	MX_ADC1_StartConversion();
 80032a2:	f7fd f9e3 	bl	800066c <MX_ADC1_StartConversion>
	POT_value = MX_ADC1_GetValue();
 80032a6:	f7fd f9f5 	bl	8000694 <MX_ADC1_GetValue>
 80032aa:	4603      	mov	r3, r0
 80032ac:	81fb      	strh	r3, [r7, #14]
	LL_mDelay(10);
 80032ae:	200a      	movs	r0, #10
 80032b0:	f7ff f9ba 	bl	8002628 <LL_mDelay>

	return POT_value;
 80032b4:	89fb      	ldrh	r3, [r7, #14]
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
	...

080032c0 <HAL_POT_Percentage>:
	return POT_VoltageValue;
}

/*This function returns the value of the potentiometer as a percentage*/
uint8_t HAL_POT_Percentage (uint32_t Channel)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
	uint8_t POT_Percent = 0;
 80032c8:	2300      	movs	r3, #0
 80032ca:	73fb      	strb	r3, [r7, #15]
	uint16_t measure = 0;
 80032cc:	2300      	movs	r3, #0
 80032ce:	81bb      	strh	r3, [r7, #12]

	measure = HAL_POT_GetBinaryValue(Channel);
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f7ff ffdd 	bl	8003290 <HAL_POT_GetBinaryValue>
 80032d6:	4603      	mov	r3, r0
 80032d8:	81bb      	strh	r3, [r7, #12]
	POT_Percent = (measure * 100)/POT_MAX_Count;
 80032da:	89bb      	ldrh	r3, [r7, #12]
 80032dc:	2264      	movs	r2, #100	; 0x64
 80032de:	fb02 f303 	mul.w	r3, r2, r3
 80032e2:	4a06      	ldr	r2, [pc, #24]	; (80032fc <HAL_POT_Percentage+0x3c>)
 80032e4:	fb82 1203 	smull	r1, r2, r2, r3
 80032e8:	441a      	add	r2, r3
 80032ea:	11d2      	asrs	r2, r2, #7
 80032ec:	17db      	asrs	r3, r3, #31
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	73fb      	strb	r3, [r7, #15]

	return POT_Percent;
 80032f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3710      	adds	r7, #16
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	80808081 	.word	0x80808081

08003300 <rgb_azul>:
void rgb_verde(){
	MX_RGB_Red(1);
	MX_RGB_Green(0);
	MX_RGB_Blue(1);
}
void rgb_azul(){
 8003300:	b580      	push	{r7, lr}
 8003302:	af00      	add	r7, sp, #0
	MX_RGB_Red(1);
 8003304:	2001      	movs	r0, #1
 8003306:	f7fd fb0f 	bl	8000928 <MX_RGB_Red>
	MX_RGB_Green(1);
 800330a:	2001      	movs	r0, #1
 800330c:	f7fd fb28 	bl	8000960 <MX_RGB_Green>
	MX_RGB_Blue(0);
 8003310:	2000      	movs	r0, #0
 8003312:	f7fd fb41 	bl	8000998 <MX_RGB_Blue>
}
 8003316:	bf00      	nop
 8003318:	bd80      	pop	{r7, pc}

0800331a <rgb_amarillo>:
void rgb_amarillo(){
 800331a:	b580      	push	{r7, lr}
 800331c:	af00      	add	r7, sp, #0
	MX_RGB_Red(0);
 800331e:	2000      	movs	r0, #0
 8003320:	f7fd fb02 	bl	8000928 <MX_RGB_Red>
	MX_RGB_Green(0);
 8003324:	2000      	movs	r0, #0
 8003326:	f7fd fb1b 	bl	8000960 <MX_RGB_Green>
	MX_RGB_Blue(1);
 800332a:	2001      	movs	r0, #1
 800332c:	f7fd fb34 	bl	8000998 <MX_RGB_Blue>
}
 8003330:	bf00      	nop
 8003332:	bd80      	pop	{r7, pc}

08003334 <rgb_celeste>:
void rgb_celeste(){
 8003334:	b580      	push	{r7, lr}
 8003336:	af00      	add	r7, sp, #0
	MX_RGB_Red(1);
 8003338:	2001      	movs	r0, #1
 800333a:	f7fd faf5 	bl	8000928 <MX_RGB_Red>
	MX_RGB_Green(0);
 800333e:	2000      	movs	r0, #0
 8003340:	f7fd fb0e 	bl	8000960 <MX_RGB_Green>
	MX_RGB_Blue(0);
 8003344:	2000      	movs	r0, #0
 8003346:	f7fd fb27 	bl	8000998 <MX_RGB_Blue>
}
 800334a:	bf00      	nop
 800334c:	bd80      	pop	{r7, pc}

0800334e <rgb_morado>:
void rgb_morado(){
 800334e:	b580      	push	{r7, lr}
 8003350:	af00      	add	r7, sp, #0
	MX_RGB_Red(0);
 8003352:	2000      	movs	r0, #0
 8003354:	f7fd fae8 	bl	8000928 <MX_RGB_Red>
	MX_RGB_Green(1);
 8003358:	2001      	movs	r0, #1
 800335a:	f7fd fb01 	bl	8000960 <MX_RGB_Green>
	MX_RGB_Blue(0);
 800335e:	2000      	movs	r0, #0
 8003360:	f7fd fb1a 	bl	8000998 <MX_RGB_Blue>
}
 8003364:	bf00      	nop
 8003366:	bd80      	pop	{r7, pc}

08003368 <rgb_blanco>:
void rgb_blanco(){
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0
	MX_RGB_Red(0);
 800336c:	2000      	movs	r0, #0
 800336e:	f7fd fadb 	bl	8000928 <MX_RGB_Red>
	MX_RGB_Green(0);
 8003372:	2000      	movs	r0, #0
 8003374:	f7fd faf4 	bl	8000960 <MX_RGB_Green>
	MX_RGB_Blue(0);
 8003378:	2000      	movs	r0, #0
 800337a:	f7fd fb0d 	bl	8000998 <MX_RGB_Blue>
}
 800337e:	bf00      	nop
 8003380:	bd80      	pop	{r7, pc}

08003382 <HAL_RTC_Init>:
 */
#include "HAL_RTC.h"

/*This function initialize the RTC module*/
void HAL_RTC_Init(void)
{
 8003382:	b580      	push	{r7, lr}
 8003384:	af00      	add	r7, sp, #0
	MX_RTC_Init();
 8003386:	f7fe f829 	bl	80013dc <MX_RTC_Init>
	return;
 800338a:	bf00      	nop
}
 800338c:	bd80      	pop	{r7, pc}

0800338e <HAL_TEMPSen_Init>:
 *      Author: carlo
 */
#include "HAL_TEMPSen.h"

void HAL_TEMPSen_Init()
{
 800338e:	b580      	push	{r7, lr}
 8003390:	af00      	add	r7, sp, #0
	MX_I2C1_Init();
 8003392:	f7fd fbbb 	bl	8000b0c <MX_I2C1_Init>
	return;
 8003396:	bf00      	nop
}
 8003398:	bd80      	pop	{r7, pc}
	...

0800339c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800339c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80033d4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80033a0:	480d      	ldr	r0, [pc, #52]	; (80033d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80033a2:	490e      	ldr	r1, [pc, #56]	; (80033dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80033a4:	4a0e      	ldr	r2, [pc, #56]	; (80033e0 <LoopForever+0xe>)
  movs r3, #0
 80033a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033a8:	e002      	b.n	80033b0 <LoopCopyDataInit>

080033aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033ae:	3304      	adds	r3, #4

080033b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033b4:	d3f9      	bcc.n	80033aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033b6:	4a0b      	ldr	r2, [pc, #44]	; (80033e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80033b8:	4c0b      	ldr	r4, [pc, #44]	; (80033e8 <LoopForever+0x16>)
  movs r3, #0
 80033ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033bc:	e001      	b.n	80033c2 <LoopFillZerobss>

080033be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033c0:	3204      	adds	r2, #4

080033c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033c4:	d3fb      	bcc.n	80033be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80033c6:	f7fe fa0b 	bl	80017e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80033ca:	f000 f811 	bl	80033f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80033ce:	f7fd fe6f 	bl	80010b0 <main>

080033d2 <LoopForever>:

LoopForever:
    b LoopForever
 80033d2:	e7fe      	b.n	80033d2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80033d4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80033d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033dc:	20000538 	.word	0x20000538
  ldr r2, =_sidata
 80033e0:	080034c8 	.word	0x080034c8
  ldr r2, =_sbss
 80033e4:	20000538 	.word	0x20000538
  ldr r4, =_ebss
 80033e8:	20000578 	.word	0x20000578

080033ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80033ec:	e7fe      	b.n	80033ec <ADC1_2_IRQHandler>
	...

080033f0 <__libc_init_array>:
 80033f0:	b570      	push	{r4, r5, r6, lr}
 80033f2:	4e0d      	ldr	r6, [pc, #52]	; (8003428 <__libc_init_array+0x38>)
 80033f4:	4c0d      	ldr	r4, [pc, #52]	; (800342c <__libc_init_array+0x3c>)
 80033f6:	1ba4      	subs	r4, r4, r6
 80033f8:	10a4      	asrs	r4, r4, #2
 80033fa:	2500      	movs	r5, #0
 80033fc:	42a5      	cmp	r5, r4
 80033fe:	d109      	bne.n	8003414 <__libc_init_array+0x24>
 8003400:	4e0b      	ldr	r6, [pc, #44]	; (8003430 <__libc_init_array+0x40>)
 8003402:	4c0c      	ldr	r4, [pc, #48]	; (8003434 <__libc_init_array+0x44>)
 8003404:	f000 f820 	bl	8003448 <_init>
 8003408:	1ba4      	subs	r4, r4, r6
 800340a:	10a4      	asrs	r4, r4, #2
 800340c:	2500      	movs	r5, #0
 800340e:	42a5      	cmp	r5, r4
 8003410:	d105      	bne.n	800341e <__libc_init_array+0x2e>
 8003412:	bd70      	pop	{r4, r5, r6, pc}
 8003414:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003418:	4798      	blx	r3
 800341a:	3501      	adds	r5, #1
 800341c:	e7ee      	b.n	80033fc <__libc_init_array+0xc>
 800341e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003422:	4798      	blx	r3
 8003424:	3501      	adds	r5, #1
 8003426:	e7f2      	b.n	800340e <__libc_init_array+0x1e>
 8003428:	080034c0 	.word	0x080034c0
 800342c:	080034c0 	.word	0x080034c0
 8003430:	080034c0 	.word	0x080034c0
 8003434:	080034c4 	.word	0x080034c4

08003438 <memset>:
 8003438:	4402      	add	r2, r0
 800343a:	4603      	mov	r3, r0
 800343c:	4293      	cmp	r3, r2
 800343e:	d100      	bne.n	8003442 <memset+0xa>
 8003440:	4770      	bx	lr
 8003442:	f803 1b01 	strb.w	r1, [r3], #1
 8003446:	e7f9      	b.n	800343c <memset+0x4>

08003448 <_init>:
 8003448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800344a:	bf00      	nop
 800344c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800344e:	bc08      	pop	{r3}
 8003450:	469e      	mov	lr, r3
 8003452:	4770      	bx	lr

08003454 <_fini>:
 8003454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003456:	bf00      	nop
 8003458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800345a:	bc08      	pop	{r3}
 800345c:	469e      	mov	lr, r3
 800345e:	4770      	bx	lr
