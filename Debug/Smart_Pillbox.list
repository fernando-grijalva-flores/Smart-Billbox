
Smart_Pillbox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e04  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08002f8c  08002f8c  00012f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002fdc  08002fdc  00012fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002fe0  08002fe0  00012fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000538  20000000  08002fe4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020538  2**0
                  CONTENTS
  7 .bss          00000028  20000538  20000538  00020538  2**2
                  ALLOC
  8 ._user_heap_stack 00000080  20000560  20000560  00020538  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020538  2**0
                  CONTENTS, READONLY
 10 .debug_info   000083f9  00000000  00000000  00020568  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001e5e  00000000  00000000  00028961  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000bb8  00000000  00000000  0002a7c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000a88  00000000  00000000  0002b378  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004891  00000000  00000000  0002be00  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002917  00000000  00000000  00030691  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00032fa8  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002ea4  00000000  00000000  00033024  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000538 	.word	0x20000538
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002f74 	.word	0x08002f74

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000053c 	.word	0x2000053c
 80001c4:	08002f74 	.word	0x08002f74

080001c8 <LL_ADC_REG_SetSequencerRanks>:
  *         (5) On STM32F3, ADC channel available only on all ADC instances, but
  *             only one ADC instance is allowed to be connected to VrefInt at the same time.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b089      	sub	sp, #36	; 0x24
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	60f8      	str	r0, [r7, #12]
 80001d0:	60b9      	str	r1, [r7, #8]
 80001d2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80001d4:	68fb      	ldr	r3, [r7, #12]
 80001d6:	3330      	adds	r3, #48	; 0x30
 80001d8:	4619      	mov	r1, r3
 80001da:	68bb      	ldr	r3, [r7, #8]
 80001dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80001e0:	f44f 7240 	mov.w	r2, #768	; 0x300
 80001e4:	61ba      	str	r2, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80001e6:	69ba      	ldr	r2, [r7, #24]
 80001e8:	fa92 f2a2 	rbit	r2, r2
 80001ec:	617a      	str	r2, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80001ee:	697a      	ldr	r2, [r7, #20]
 80001f0:	fab2 f282 	clz	r2, r2
 80001f4:	b2d2      	uxtb	r2, r2
 80001f6:	40d3      	lsrs	r3, r2
 80001f8:	009b      	lsls	r3, r3, #2
 80001fa:	440b      	add	r3, r1
 80001fc:	61fb      	str	r3, [r7, #28]
  
  MODIFY_REG(*preg,
 80001fe:	69fb      	ldr	r3, [r7, #28]
 8000200:	681a      	ldr	r2, [r3, #0]
 8000202:	68bb      	ldr	r3, [r7, #8]
 8000204:	f003 031f 	and.w	r3, r3, #31
 8000208:	211f      	movs	r1, #31
 800020a:	fa01 f303 	lsl.w	r3, r1, r3
 800020e:	43db      	mvns	r3, r3
 8000210:	401a      	ands	r2, r3
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	0e9b      	lsrs	r3, r3, #26
 8000216:	f003 011f 	and.w	r1, r3, #31
 800021a:	68bb      	ldr	r3, [r7, #8]
 800021c:	f003 031f 	and.w	r3, r3, #31
 8000220:	fa01 f303 	lsl.w	r3, r1, r3
 8000224:	431a      	orrs	r2, r3
 8000226:	69fb      	ldr	r3, [r7, #28]
 8000228:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800022a:	bf00      	nop
 800022c:	3724      	adds	r7, #36	; 0x24
 800022e:	46bd      	mov	sp, r7
 8000230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000234:	4770      	bx	lr

08000236 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_181CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_601CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000236:	b480      	push	{r7}
 8000238:	b08d      	sub	sp, #52	; 0x34
 800023a:	af00      	add	r7, sp, #0
 800023c:	60f8      	str	r0, [r7, #12]
 800023e:	60b9      	str	r1, [r7, #8]
 8000240:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	3314      	adds	r3, #20
 8000246:	4619      	mov	r1, r3
 8000248:	68bb      	ldr	r3, [r7, #8]
 800024a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800024e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000252:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000254:	69ba      	ldr	r2, [r7, #24]
 8000256:	fa92 f2a2 	rbit	r2, r2
 800025a:	617a      	str	r2, [r7, #20]
  return result;
 800025c:	697a      	ldr	r2, [r7, #20]
 800025e:	fab2 f282 	clz	r2, r2
 8000262:	b2d2      	uxtb	r2, r2
 8000264:	40d3      	lsrs	r3, r2
 8000266:	009b      	lsls	r3, r3, #2
 8000268:	440b      	add	r3, r1
 800026a:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  MODIFY_REG(*preg,
 800026c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800026e:	681a      	ldr	r2, [r3, #0]
 8000270:	68bb      	ldr	r3, [r7, #8]
 8000272:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8000276:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 800027a:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800027c:	6a39      	ldr	r1, [r7, #32]
 800027e:	fa91 f1a1 	rbit	r1, r1
 8000282:	61f9      	str	r1, [r7, #28]
  return result;
 8000284:	69f9      	ldr	r1, [r7, #28]
 8000286:	fab1 f181 	clz	r1, r1
 800028a:	b2c9      	uxtb	r1, r1
 800028c:	40cb      	lsrs	r3, r1
 800028e:	2107      	movs	r1, #7
 8000290:	fa01 f303 	lsl.w	r3, r1, r3
 8000294:	43db      	mvns	r3, r3
 8000296:	401a      	ands	r2, r3
 8000298:	68bb      	ldr	r3, [r7, #8]
 800029a:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 800029e:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 80002a2:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80002a6:	fa91 f1a1 	rbit	r1, r1
 80002aa:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 80002ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80002ae:	fab1 f181 	clz	r1, r1
 80002b2:	b2c9      	uxtb	r1, r1
 80002b4:	40cb      	lsrs	r3, r1
 80002b6:	6879      	ldr	r1, [r7, #4]
 80002b8:	fa01 f303 	lsl.w	r3, r1, r3
 80002bc:	431a      	orrs	r2, r3
 80002be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002c0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 80002c2:	bf00      	nop
 80002c4:	3734      	adds	r7, #52	; 0x34
 80002c6:	46bd      	mov	sp, r7
 80002c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002cc:	4770      	bx	lr
	...

080002d0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b085      	sub	sp, #20
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	60f8      	str	r0, [r7, #12]
 80002d8:	60b9      	str	r1, [r7, #8]
 80002da:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80002e2:	68b9      	ldr	r1, [r7, #8]
 80002e4:	4b0b      	ldr	r3, [pc, #44]	; (8000314 <LL_ADC_SetChannelSingleDiff+0x44>)
 80002e6:	400b      	ands	r3, r1
 80002e8:	43db      	mvns	r3, r3
 80002ea:	401a      	ands	r2, r3
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	f003 0318 	and.w	r3, r3, #24
 80002f2:	4908      	ldr	r1, [pc, #32]	; (8000314 <LL_ADC_SetChannelSingleDiff+0x44>)
 80002f4:	40d9      	lsrs	r1, r3
 80002f6:	68bb      	ldr	r3, [r7, #8]
 80002f8:	4019      	ands	r1, r3
 80002fa:	4b06      	ldr	r3, [pc, #24]	; (8000314 <LL_ADC_SetChannelSingleDiff+0x44>)
 80002fc:	400b      	ands	r3, r1
 80002fe:	431a      	orrs	r2, r3
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000306:	bf00      	nop
 8000308:	3714      	adds	r7, #20
 800030a:	46bd      	mov	sp, r7
 800030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	0007fffe 	.word	0x0007fffe

08000318 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000318:	b480      	push	{r7}
 800031a:	b083      	sub	sp, #12
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
  /* 1. Set the intermediate state before moving the ADC voltage regulator    */
  /*    to state enable.                                                      */
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	689b      	ldr	r3, [r3, #8]
 8000324:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	609a      	str	r2, [r3, #8]
  /* 2. Set the final state of ADC voltage regulator enable                   */
  /*    (ADVREGEN bits set to 0x01).                                          */
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	689b      	ldr	r3, [r3, #8]
 8000330:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000334:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000338:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN_0);
}
 8000340:	bf00      	nop
 8000342:	370c      	adds	r7, #12
 8000344:	46bd      	mov	sp, r7
 8000346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034a:	4770      	bx	lr

0800034c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800034c:	b480      	push	{r7}
 800034e:	b083      	sub	sp, #12
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	689b      	ldr	r3, [r3, #8]
 8000358:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800035c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000360:	f043 0201 	orr.w	r2, r3, #1
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000368:	bf00      	nop
 800036a:	370c      	adds	r7, #12
 800036c:	46bd      	mov	sp, r7
 800036e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000372:	4770      	bx	lr

08000374 <LL_ADC_StartCalibration>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx, uint32_t SingleDiff)
{
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
 800037c:	6039      	str	r1, [r7, #0]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	689b      	ldr	r3, [r3, #8]
 8000382:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000386:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800038a:	683a      	ldr	r2, [r7, #0]
 800038c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8000390:	4313      	orrs	r3, r2
 8000392:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	609a      	str	r2, [r3, #8]
             ADC_CR_ADCALDIF | ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADCAL | (SingleDiff & ADC_SINGLEDIFF_CALIB_START_MASK));
}
 800039a:	bf00      	nop
 800039c:	370c      	adds	r7, #12
 800039e:	46bd      	mov	sp, r7
 80003a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a4:	4770      	bx	lr

080003a6 <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR       ADCAL          LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
 80003a6:	b480      	push	{r7}
 80003a8:	b083      	sub	sp, #12
 80003aa:	af00      	add	r7, sp, #0
 80003ac:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	689b      	ldr	r3, [r3, #8]
 80003b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80003b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003ba:	bf0c      	ite	eq
 80003bc:	2301      	moveq	r3, #1
 80003be:	2300      	movne	r3, #0
 80003c0:	b2db      	uxtb	r3, r3
}
 80003c2:	4618      	mov	r0, r3
 80003c4:	370c      	adds	r7, #12
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr

080003ce <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80003ce:	b480      	push	{r7}
 80003d0:	b083      	sub	sp, #12
 80003d2:	af00      	add	r7, sp, #0
 80003d4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	689b      	ldr	r3, [r3, #8]
 80003da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80003de:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80003e2:	f043 0204 	orr.w	r2, r3, #4
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80003ea:	bf00      	nop
 80003ec:	370c      	adds	r7, #12
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr

080003f6 <LL_ADC_REG_ReadConversionData8>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData8
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_ADC_REG_ReadConversionData8(ADC_TypeDef *ADCx)
{
 80003f6:	b480      	push	{r7}
 80003f8:	b083      	sub	sp, #12
 80003fa:	af00      	add	r7, sp, #0
 80003fc:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000402:	b2db      	uxtb	r3, r3
}
 8000404:	4618      	mov	r0, r3
 8000406:	370c      	adds	r7, #12
 8000408:	46bd      	mov	sp, r7
 800040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040e:	4770      	bx	lr

08000410 <LL_ADC_IsActiveFlag_ADRDY>:
  * @rmtoll ISR      ADRDY          LL_ADC_IsActiveFlag_ADRDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_ADRDY(ADC_TypeDef *ADCx)
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	f003 0301 	and.w	r3, r3, #1
 8000420:	2b01      	cmp	r3, #1
 8000422:	bf0c      	ite	eq
 8000424:	2301      	moveq	r3, #1
 8000426:	2300      	movne	r3, #0
 8000428:	b2db      	uxtb	r3, r3
}
 800042a:	4618      	mov	r0, r3
 800042c:	370c      	adds	r7, #12
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr

08000436 <LL_ADC_IsActiveFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_IsActiveFlag_EOC
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(ADC_TypeDef *ADCx)
{
 8000436:	b480      	push	{r7}
 8000438:	b083      	sub	sp, #12
 800043a:	af00      	add	r7, sp, #0
 800043c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	f003 0304 	and.w	r3, r3, #4
 8000446:	2b04      	cmp	r3, #4
 8000448:	bf0c      	ite	eq
 800044a:	2301      	moveq	r3, #1
 800044c:	2300      	movne	r3, #0
 800044e:	b2db      	uxtb	r3, r3
}
 8000450:	4618      	mov	r0, r3
 8000452:	370c      	adds	r7, #12
 8000454:	46bd      	mov	sp, r7
 8000456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045a:	4770      	bx	lr

0800045c <LL_ADC_ClearFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_ClearFlag_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
{
 800045c:	b480      	push	{r7}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	2204      	movs	r2, #4
 8000468:	601a      	str	r2, [r3, #0]
}
 800046a:	bf00      	nop
 800046c:	370c      	adds	r7, #12
 800046e:	46bd      	mov	sp, r7
 8000470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000474:	4770      	bx	lr
	...

08000478 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000478:	b480      	push	{r7}
 800047a:	b085      	sub	sp, #20
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000480:	4908      	ldr	r1, [pc, #32]	; (80004a4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000482:	4b08      	ldr	r3, [pc, #32]	; (80004a4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000484:	695a      	ldr	r2, [r3, #20]
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	4313      	orrs	r3, r2
 800048a:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800048c:	4b05      	ldr	r3, [pc, #20]	; (80004a4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800048e:	695a      	ldr	r2, [r3, #20]
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	4013      	ands	r3, r2
 8000494:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000496:	68fb      	ldr	r3, [r7, #12]
}
 8000498:	bf00      	nop
 800049a:	3714      	adds	r7, #20
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr
 80004a4:	40021000 	.word	0x40021000

080004a8 <MX_ADC1_Init>:
const uint32_t ADC_Sampling_Time_Map[ADC_Channel_Num] = {LL_ADC_SAMPLINGTIME_601CYCLES_5, LL_ADC_SAMPLINGTIME_601CYCLES_5};
/* USER CODE END 0 */

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b094      	sub	sp, #80	; 0x50
 80004ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80004ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80004b2:	2200      	movs	r2, #0
 80004b4:	601a      	str	r2, [r3, #0]
 80004b6:	605a      	str	r2, [r3, #4]
 80004b8:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80004ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004be:	2200      	movs	r2, #0
 80004c0:	601a      	str	r2, [r3, #0]
 80004c2:	605a      	str	r2, [r3, #4]
 80004c4:	609a      	str	r2, [r3, #8]
 80004c6:	60da      	str	r2, [r3, #12]
 80004c8:	611a      	str	r2, [r3, #16]
 80004ca:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 80004cc:	f107 0318 	add.w	r3, r7, #24
 80004d0:	2200      	movs	r2, #0
 80004d2:	601a      	str	r2, [r3, #0]
 80004d4:	605a      	str	r2, [r3, #4]
 80004d6:	609a      	str	r2, [r3, #8]
 80004d8:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004da:	463b      	mov	r3, r7
 80004dc:	2200      	movs	r2, #0
 80004de:	601a      	str	r2, [r3, #0]
 80004e0:	605a      	str	r2, [r3, #4]
 80004e2:	609a      	str	r2, [r3, #8]
 80004e4:	60da      	str	r2, [r3, #12]
 80004e6:	611a      	str	r2, [r3, #16]
 80004e8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_ADC12);
 80004ea:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80004ee:	f7ff ffc3 	bl	8000478 <LL_AHB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80004f2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80004f6:	f7ff ffbf 	bl	8000478 <LL_AHB1_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PA0   ------> ADC1_IN1
  PA1   ------> ADC1_IN2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 80004fa:	2303      	movs	r3, #3
 80004fc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80004fe:	2303      	movs	r3, #3
 8000500:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000502:	2300      	movs	r3, #0
 8000504:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000506:	463b      	mov	r3, r7
 8000508:	4619      	mov	r1, r3
 800050a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800050e:	f001 fb0e 	bl	8001b2e <LL_GPIO_Init>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_8B;
 8000512:	2310      	movs	r3, #16
 8000514:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000516:	2300      	movs	r3, #0
 8000518:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 800051a:	2300      	movs	r3, #0
 800051c:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 800051e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000522:	4619      	mov	r1, r3
 8000524:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000528:	f001 f98c 	bl	8001844 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 800052c:	2300      	movs	r3, #0
 800052e:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8000530:	2300      	movs	r3, #0
 8000532:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000534:	2300      	movs	r3, #0
 8000536:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8000538:	2300      	movs	r3, #0
 800053a:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_LIMITED;
 800053c:	2301      	movs	r3, #1
 800053e:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_OVERWRITTEN;
 8000540:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000544:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8000546:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800054a:	4619      	mov	r1, r3
 800054c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000550:	f001 f99e 	bl	8001890 <LL_ADC_REG_Init>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV1;
 8000554:	2300      	movs	r3, #0
 8000556:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8000558:	2300      	movs	r3, #0
 800055a:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 800055c:	f107 0318 	add.w	r3, r7, #24
 8000560:	4619      	mov	r1, r3
 8000562:	481a      	ldr	r0, [pc, #104]	; (80005cc <MX_ADC1_Init+0x124>)
 8000564:	f001 f92e 	bl	80017c4 <LL_ADC_CommonInit>

  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC1);
 8000568:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800056c:	f7ff fed4 	bl	8000318 <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8000570:	4b17      	ldr	r3, [pc, #92]	; (80005d0 <MX_ADC1_Init+0x128>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	099b      	lsrs	r3, r3, #6
 8000576:	4a17      	ldr	r2, [pc, #92]	; (80005d4 <MX_ADC1_Init+0x12c>)
 8000578:	fba2 2303 	umull	r2, r3, r2, r3
 800057c:	099a      	lsrs	r2, r3, #6
 800057e:	4613      	mov	r3, r2
 8000580:	009b      	lsls	r3, r3, #2
 8000582:	4413      	add	r3, r2
 8000584:	005b      	lsls	r3, r3, #1
 8000586:	461a      	mov	r2, r3
 8000588:	4b13      	ldr	r3, [pc, #76]	; (80005d8 <MX_ADC1_Init+0x130>)
 800058a:	fba3 2302 	umull	r2, r3, r3, r2
 800058e:	08db      	lsrs	r3, r3, #3
 8000590:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8000592:	e002      	b.n	800059a <MX_ADC1_Init+0xf2>
  {
    wait_loop_index--;
 8000594:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000596:	3b01      	subs	r3, #1
 8000598:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 800059a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800059c:	2b00      	cmp	r3, #0
 800059e:	d1f9      	bne.n	8000594 <MX_ADC1_Init+0xec>
  }
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 80005a0:	4a0e      	ldr	r2, [pc, #56]	; (80005dc <MX_ADC1_Init+0x134>)
 80005a2:	2106      	movs	r1, #6
 80005a4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80005a8:	f7ff fe0e 	bl	80001c8 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_601CYCLES_5);
 80005ac:	2207      	movs	r2, #7
 80005ae:	490b      	ldr	r1, [pc, #44]	; (80005dc <MX_ADC1_Init+0x134>)
 80005b0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80005b4:	f7ff fe3f 	bl	8000236 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SINGLE_ENDED);
 80005b8:	227f      	movs	r2, #127	; 0x7f
 80005ba:	4908      	ldr	r1, [pc, #32]	; (80005dc <MX_ADC1_Init+0x134>)
 80005bc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80005c0:	f7ff fe86 	bl	80002d0 <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005c4:	bf00      	nop
 80005c6:	3750      	adds	r7, #80	; 0x50
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	50000300 	.word	0x50000300
 80005d0:	20000000 	.word	0x20000000
 80005d4:	053e2d63 	.word	0x053e2d63
 80005d8:	cccccccd 	.word	0xcccccccd
 80005dc:	04300002 	.word	0x04300002

080005e0 <MX_ADC1_Enable>:

/* USER CODE BEGIN 1 */

/*This function enable ADC*/
void MX_ADC1_Enable(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	LL_ADC_Enable(ADC1);
 80005e4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80005e8:	f7ff feb0 	bl	800034c <LL_ADC_Enable>
	while(!LL_ADC_IsActiveFlag_ADRDY(ADC1));
 80005ec:	bf00      	nop
 80005ee:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80005f2:	f7ff ff0d 	bl	8000410 <LL_ADC_IsActiveFlag_ADRDY>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d0f8      	beq.n	80005ee <MX_ADC1_Enable+0xe>

	return;
 80005fc:	bf00      	nop
}
 80005fe:	bd80      	pop	{r7, pc}

08000600 <MX_ADC1_Calibration>:
/*This Function start the ADC calibration and wait into the cycle until calibration is in progress*/
void MX_ADC1_Calibration(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
	LL_ADC_StartCalibration(ADC1, LL_ADC_SINGLE_ENDED);
 8000604:	217f      	movs	r1, #127	; 0x7f
 8000606:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800060a:	f7ff feb3 	bl	8000374 <LL_ADC_StartCalibration>
	while(LL_ADC_IsCalibrationOnGoing(ADC1));
 800060e:	bf00      	nop
 8000610:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000614:	f7ff fec7 	bl	80003a6 <LL_ADC_IsCalibrationOnGoing>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d1f8      	bne.n	8000610 <MX_ADC1_Calibration+0x10>

	return;
 800061e:	bf00      	nop
}
 8000620:	bd80      	pop	{r7, pc}
	...

08000624 <MX_ADC1_SetChannel>:
 * just use one of the following arguments:
 * Channel 1: ADC_Channel_1
 * Channel 2: ADC_Channel_2
 */
void MX_ADC1_SetChannel(uint32_t Channel)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
	LL_ADC_REG_SetSequencerRanks(ADC1,LL_ADC_REG_RANK_1, ADC_Channel_Map[Channel]);
 800062c:	4a0d      	ldr	r2, [pc, #52]	; (8000664 <MX_ADC1_SetChannel+0x40>)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000634:	461a      	mov	r2, r3
 8000636:	2106      	movs	r1, #6
 8000638:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800063c:	f7ff fdc4 	bl	80001c8 <LL_ADC_REG_SetSequencerRanks>
	LL_ADC_SetChannelSamplingTime(ADC1,ADC_Channel_Map[Channel],ADC_Sampling_Time_Map[Channel]);
 8000640:	4a08      	ldr	r2, [pc, #32]	; (8000664 <MX_ADC1_SetChannel+0x40>)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000648:	4a07      	ldr	r2, [pc, #28]	; (8000668 <MX_ADC1_SetChannel+0x44>)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000650:	461a      	mov	r2, r3
 8000652:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000656:	f7ff fdee 	bl	8000236 <LL_ADC_SetChannelSamplingTime>

	return;
 800065a:	bf00      	nop
}
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	08002fcc 	.word	0x08002fcc
 8000668:	08002fd4 	.word	0x08002fd4

0800066c <MX_ADC1_StartConversion>:

/*This function start the ADC conversion process*/
void MX_ADC1_StartConversion(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
	LL_ADC_REG_StartConversion(ADC1);
 8000670:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000674:	f7ff feab 	bl	80003ce <LL_ADC_REG_StartConversion>
	/*This cycle waits until the end of conversion flag is active*/
	while(!LL_ADC_IsActiveFlag_EOC(ADC1));
 8000678:	bf00      	nop
 800067a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800067e:	f7ff feda 	bl	8000436 <LL_ADC_IsActiveFlag_EOC>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d0f8      	beq.n	800067a <MX_ADC1_StartConversion+0xe>
	/*When ADC finish the conversion just clear the EOC flag*/
	LL_ADC_ClearFlag_EOC(ADC1);
 8000688:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800068c:	f7ff fee6 	bl	800045c <LL_ADC_ClearFlag_EOC>

	return;
 8000690:	bf00      	nop
}
 8000692:	bd80      	pop	{r7, pc}

08000694 <MX_ADC1_GetValue>:

/*This function get the ADC value on a 8 bits format*/
uint16_t MX_ADC1_GetValue(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
	uint16_t ADC_value;
	ADC_value=LL_ADC_REG_ReadConversionData8(ADC1);
 800069a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800069e:	f7ff feaa 	bl	80003f6 <LL_ADC_REG_ReadConversionData8>
 80006a2:	4603      	mov	r3, r0
 80006a4:	80fb      	strh	r3, [r7, #6]
	return ADC_value;
 80006a6:	88fb      	ldrh	r3, [r7, #6]
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <LL_AHB1_GRP1_EnableClock>:
{
 80006b0:	b480      	push	{r7}
 80006b2:	b085      	sub	sp, #20
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80006b8:	4908      	ldr	r1, [pc, #32]	; (80006dc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80006ba:	4b08      	ldr	r3, [pc, #32]	; (80006dc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80006bc:	695a      	ldr	r2, [r3, #20]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	4313      	orrs	r3, r2
 80006c2:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80006c4:	4b05      	ldr	r3, [pc, #20]	; (80006dc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80006c6:	695a      	ldr	r2, [r3, #20]
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	4013      	ands	r3, r2
 80006cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006ce:	68fb      	ldr	r3, [r7, #12]
}
 80006d0:	bf00      	nop
 80006d2:	3714      	adds	r7, #20
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	40021000 	.word	0x40021000

080006e0 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	691a      	ldr	r2, [r3, #16]
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	401a      	ands	r2, r3
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	429a      	cmp	r2, r3
 80006f6:	bf0c      	ite	eq
 80006f8:	2301      	moveq	r3, #1
 80006fa:	2300      	movne	r3, #0
 80006fc:	b2db      	uxtb	r3, r3
}
 80006fe:	4618      	mov	r0, r3
 8000700:	370c      	adds	r7, #12
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr

0800070a <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800070a:	b480      	push	{r7}
 800070c:	b083      	sub	sp, #12
 800070e:	af00      	add	r7, sp, #0
 8000710:	6078      	str	r0, [r7, #4]
 8000712:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	683a      	ldr	r2, [r7, #0]
 8000718:	619a      	str	r2, [r3, #24]
}
 800071a:	bf00      	nop
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr

08000726 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000726:	b480      	push	{r7}
 8000728:	b083      	sub	sp, #12
 800072a:	af00      	add	r7, sp, #0
 800072c:	6078      	str	r0, [r7, #4]
 800072e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	683a      	ldr	r2, [r7, #0]
 8000734:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000736:	bf00      	nop
 8000738:	370c      	adds	r7, #12
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
	...

08000744 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b086      	sub	sp, #24
 8000748:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074a:	463b      	mov	r3, r7
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
 8000756:	611a      	str	r2, [r3, #16]
 8000758:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800075a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800075e:	f7ff ffa7 	bl	80006b0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000762:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000766:	f7ff ffa3 	bl	80006b0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800076a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800076e:	f7ff ff9f 	bl	80006b0 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(GPIOA, LCD_RESET_Pin|LCD_A0_Pin);
 8000772:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000776:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800077a:	f7ff ffc6 	bl	800070a <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(LCD_CS_N_GPIO_Port, LCD_CS_N_Pin);
 800077e:	2140      	movs	r1, #64	; 0x40
 8000780:	483b      	ldr	r0, [pc, #236]	; (8000870 <MX_GPIO_Init+0x12c>)
 8000782:	f7ff ffc2 	bl	800070a <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 8000786:	2180      	movs	r1, #128	; 0x80
 8000788:	483a      	ldr	r0, [pc, #232]	; (8000874 <MX_GPIO_Init+0x130>)
 800078a:	f7ff ffcc 	bl	8000726 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 800078e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000792:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000796:	f7ff ffc6 	bl	8000726 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED_R_GPIO_Port, LED_R_Pin);
 800079a:	2110      	movs	r1, #16
 800079c:	4834      	ldr	r0, [pc, #208]	; (8000870 <MX_GPIO_Init+0x12c>)
 800079e:	f7ff ffc2 	bl	8000726 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = J_RIGHT_Pin|J_LEFT_Pin;
 80007a2:	2303      	movs	r3, #3
 80007a4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80007a6:	2300      	movs	r3, #0
 80007a8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007aa:	2300      	movs	r3, #0
 80007ac:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ae:	463b      	mov	r3, r7
 80007b0:	4619      	mov	r1, r3
 80007b2:	4830      	ldr	r0, [pc, #192]	; (8000874 <MX_GPIO_Init+0x130>)
 80007b4:	f001 f9bb 	bl	8001b2e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = J_UP_Pin;
 80007b8:	2310      	movs	r3, #16
 80007ba:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80007bc:	2300      	movs	r3, #0
 80007be:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007c0:	2300      	movs	r3, #0
 80007c2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(J_UP_GPIO_Port, &GPIO_InitStruct);
 80007c4:	463b      	mov	r3, r7
 80007c6:	4619      	mov	r1, r3
 80007c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007cc:	f001 f9af 	bl	8001b2e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LCD_RESET_Pin|LCD_A0_Pin;
 80007d0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80007d4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80007d6:	2301      	movs	r3, #1
 80007d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80007da:	2300      	movs	r3, #0
 80007dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80007e2:	2301      	movs	r3, #1
 80007e4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e6:	463b      	mov	r3, r7
 80007e8:	4619      	mov	r1, r3
 80007ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ee:	f001 f99e 	bl	8001b2e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = J_DOWN_Pin|J_CENTER_Pin;
 80007f2:	2321      	movs	r3, #33	; 0x21
 80007f4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80007f6:	2300      	movs	r3, #0
 80007f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007fa:	2300      	movs	r3, #0
 80007fc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007fe:	463b      	mov	r3, r7
 8000800:	4619      	mov	r1, r3
 8000802:	481b      	ldr	r0, [pc, #108]	; (8000870 <MX_GPIO_Init+0x12c>)
 8000804:	f001 f993 	bl	8001b2e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_G_Pin;
 8000808:	2380      	movs	r3, #128	; 0x80
 800080a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800080c:	2301      	movs	r3, #1
 800080e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000810:	2300      	movs	r3, #0
 8000812:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000818:	2300      	movs	r3, #0
 800081a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED_G_GPIO_Port, &GPIO_InitStruct);
 800081c:	463b      	mov	r3, r7
 800081e:	4619      	mov	r1, r3
 8000820:	4814      	ldr	r0, [pc, #80]	; (8000874 <MX_GPIO_Init+0x130>)
 8000822:	f001 f984 	bl	8001b2e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_B_Pin;
 8000826:	f44f 7300 	mov.w	r3, #512	; 0x200
 800082a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800082c:	2301      	movs	r3, #1
 800082e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000830:	2300      	movs	r3, #0
 8000832:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000838:	2300      	movs	r3, #0
 800083a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 800083c:	463b      	mov	r3, r7
 800083e:	4619      	mov	r1, r3
 8000840:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000844:	f001 f973 	bl	8001b2e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_R_Pin|LCD_CS_N_Pin;
 8000848:	2350      	movs	r3, #80	; 0x50
 800084a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800084c:	2301      	movs	r3, #1
 800084e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000850:	2300      	movs	r3, #0
 8000852:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000858:	2300      	movs	r3, #0
 800085a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800085c:	463b      	mov	r3, r7
 800085e:	4619      	mov	r1, r3
 8000860:	4803      	ldr	r0, [pc, #12]	; (8000870 <MX_GPIO_Init+0x12c>)
 8000862:	f001 f964 	bl	8001b2e <LL_GPIO_Init>

}
 8000866:	bf00      	nop
 8000868:	3718      	adds	r7, #24
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	48000400 	.word	0x48000400
 8000874:	48000800 	.word	0x48000800

08000878 <MX_Joystick_Up>:

/* USER CODE BEGIN 2 */
short MX_Joystick_Up(){
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
	/* Deteccion de Joystick Up */
	short v = LL_GPIO_IsInputPinSet(GPIOA,J_UP_Pin);
 800087e:	2110      	movs	r1, #16
 8000880:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000884:	f7ff ff2c 	bl	80006e0 <LL_GPIO_IsInputPinSet>
 8000888:	4603      	mov	r3, r0
 800088a:	80fb      	strh	r3, [r7, #6]
	return v;
 800088c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000890:	4618      	mov	r0, r3
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}

08000898 <MX_Joystick_Down>:
short MX_Joystick_Down(){
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
	/* Deteccion de Joystick Down */
	short v = LL_GPIO_IsInputPinSet(GPIOB,J_DOWN_Pin);
 800089e:	2101      	movs	r1, #1
 80008a0:	4805      	ldr	r0, [pc, #20]	; (80008b8 <MX_Joystick_Down+0x20>)
 80008a2:	f7ff ff1d 	bl	80006e0 <LL_GPIO_IsInputPinSet>
 80008a6:	4603      	mov	r3, r0
 80008a8:	80fb      	strh	r3, [r7, #6]
	return v;
 80008aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	48000400 	.word	0x48000400

080008bc <MX_RGB_Red>:
short MX_Joystick_Center(){
	/* Deteccion de Joystick Center */
	short v = LL_GPIO_IsInputPinSet(GPIOB,J_CENTER_Pin);
	return v;
}
void MX_RGB_Red(short v){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	80fb      	strh	r3, [r7, #6]
	/* Activacion o desactivacion led R */
	if (v == 1)
 80008c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d104      	bne.n	80008d8 <MX_RGB_Red+0x1c>
		LL_GPIO_SetOutputPin(GPIOB,LED_R_Pin);
 80008ce:	2110      	movs	r1, #16
 80008d0:	4807      	ldr	r0, [pc, #28]	; (80008f0 <MX_RGB_Red+0x34>)
 80008d2:	f7ff ff1a 	bl	800070a <LL_GPIO_SetOutputPin>
	else if (v == 0)
		LL_GPIO_ResetOutputPin(GPIOB,LED_R_Pin);
}
 80008d6:	e007      	b.n	80008e8 <MX_RGB_Red+0x2c>
	else if (v == 0)
 80008d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d103      	bne.n	80008e8 <MX_RGB_Red+0x2c>
		LL_GPIO_ResetOutputPin(GPIOB,LED_R_Pin);
 80008e0:	2110      	movs	r1, #16
 80008e2:	4803      	ldr	r0, [pc, #12]	; (80008f0 <MX_RGB_Red+0x34>)
 80008e4:	f7ff ff1f 	bl	8000726 <LL_GPIO_ResetOutputPin>
}
 80008e8:	bf00      	nop
 80008ea:	3708      	adds	r7, #8
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	48000400 	.word	0x48000400

080008f4 <MX_RGB_Green>:
void MX_RGB_Green(short v){
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	80fb      	strh	r3, [r7, #6]
	/* Activacion o desactivacion led G */
	if (v == 1)
 80008fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000902:	2b01      	cmp	r3, #1
 8000904:	d104      	bne.n	8000910 <MX_RGB_Green+0x1c>
		LL_GPIO_SetOutputPin(GPIOC,LED_G_Pin);
 8000906:	2180      	movs	r1, #128	; 0x80
 8000908:	4807      	ldr	r0, [pc, #28]	; (8000928 <MX_RGB_Green+0x34>)
 800090a:	f7ff fefe 	bl	800070a <LL_GPIO_SetOutputPin>
	else if (v == 0)
		LL_GPIO_ResetOutputPin(GPIOC,LED_G_Pin);
}
 800090e:	e007      	b.n	8000920 <MX_RGB_Green+0x2c>
	else if (v == 0)
 8000910:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d103      	bne.n	8000920 <MX_RGB_Green+0x2c>
		LL_GPIO_ResetOutputPin(GPIOC,LED_G_Pin);
 8000918:	2180      	movs	r1, #128	; 0x80
 800091a:	4803      	ldr	r0, [pc, #12]	; (8000928 <MX_RGB_Green+0x34>)
 800091c:	f7ff ff03 	bl	8000726 <LL_GPIO_ResetOutputPin>
}
 8000920:	bf00      	nop
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	48000800 	.word	0x48000800

0800092c <MX_RGB_Blue>:
void MX_RGB_Blue(short v){
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	80fb      	strh	r3, [r7, #6]
	/* Activacion o desactivacion led B */
	if (v == 1)
 8000936:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800093a:	2b01      	cmp	r3, #1
 800093c:	d106      	bne.n	800094c <MX_RGB_Blue+0x20>
		LL_GPIO_SetOutputPin(GPIOA,LED_B_Pin);
 800093e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000942:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000946:	f7ff fee0 	bl	800070a <LL_GPIO_SetOutputPin>
	else if (v == 0)
		LL_GPIO_ResetOutputPin(GPIOA,LED_B_Pin);
}
 800094a:	e009      	b.n	8000960 <MX_RGB_Blue+0x34>
	else if (v == 0)
 800094c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d105      	bne.n	8000960 <MX_RGB_Blue+0x34>
		LL_GPIO_ResetOutputPin(GPIOA,LED_B_Pin);
 8000954:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000958:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800095c:	f7ff fee3 	bl	8000726 <LL_GPIO_ResetOutputPin>
}
 8000960:	bf00      	nop
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}

08000968 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	601a      	str	r2, [r3, #0]
}
 800097c:	bf00      	nop
 800097e:	370c      	adds	r7, #12
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr

08000988 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	601a      	str	r2, [r3, #0]
}
 800099c:	bf00      	nop
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <LL_I2C_SetMasterAddressingMode>:
  *         @arg @ref LL_I2C_ADDRESSING_MODE_7BIT
  *         @arg @ref LL_I2C_ADDRESSING_MODE_10BIT
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMasterAddressingMode(I2C_TypeDef *I2Cx, uint32_t AddressingMode)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
 80009b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_ADD10, AddressingMode);
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	431a      	orrs	r2, r3
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	605a      	str	r2, [r3, #4]
}
 80009c2:	bf00      	nop
 80009c4:	370c      	adds	r7, #12
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr

080009ce <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 80009ce:	b480      	push	{r7}
 80009d0:	b085      	sub	sp, #20
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	60f8      	str	r0, [r7, #12]
 80009d6:	60b9      	str	r1, [r7, #8]
 80009d8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	68db      	ldr	r3, [r3, #12]
 80009de:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80009e2:	f023 0306 	bic.w	r3, r3, #6
 80009e6:	68b9      	ldr	r1, [r7, #8]
 80009e8:	687a      	ldr	r2, [r7, #4]
 80009ea:	430a      	orrs	r2, r1
 80009ec:	431a      	orrs	r2, r3
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	60da      	str	r2, [r3, #12]
}
 80009f2:	bf00      	nop
 80009f4:	3714      	adds	r7, #20
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr

080009fe <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 80009fe:	b480      	push	{r7}
 8000a00:	b083      	sub	sp, #12
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	68db      	ldr	r3, [r3, #12]
 8000a0a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	60da      	str	r2, [r3, #12]
}
 8000a12:	bf00      	nop
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr

08000a1e <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	b083      	sub	sp, #12
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	605a      	str	r2, [r3, #4]
}
 8000a32:	bf00      	nop
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
	...

08000a40 <LL_AHB1_GRP1_EnableClock>:
{
 8000a40:	b480      	push	{r7}
 8000a42:	b085      	sub	sp, #20
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000a48:	4908      	ldr	r1, [pc, #32]	; (8000a6c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000a4a:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000a4c:	695a      	ldr	r2, [r3, #20]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	4313      	orrs	r3, r2
 8000a52:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000a54:	4b05      	ldr	r3, [pc, #20]	; (8000a6c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000a56:	695a      	ldr	r2, [r3, #20]
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a5e:	68fb      	ldr	r3, [r7, #12]
}
 8000a60:	bf00      	nop
 8000a62:	3714      	adds	r7, #20
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	40021000 	.word	0x40021000

08000a70 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b085      	sub	sp, #20
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000a78:	4908      	ldr	r1, [pc, #32]	; (8000a9c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000a7a:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000a7c:	69da      	ldr	r2, [r3, #28]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4313      	orrs	r3, r2
 8000a82:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000a84:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000a86:	69da      	ldr	r2, [r3, #28]
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a8e:	68fb      	ldr	r3, [r7, #12]
}
 8000a90:	bf00      	nop
 8000a92:	3714      	adds	r7, #20
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr
 8000a9c:	40021000 	.word	0x40021000

08000aa0 <MX_I2C1_Init>:

/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08e      	sub	sp, #56	; 0x38
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8000aa6:	f107 031c 	add.w	r3, r7, #28
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
 8000ab4:	611a      	str	r2, [r3, #16]
 8000ab6:	615a      	str	r2, [r3, #20]
 8000ab8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aba:	1d3b      	adds	r3, r7, #4
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	60da      	str	r2, [r3, #12]
 8000ac6:	611a      	str	r2, [r3, #16]
 8000ac8:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000aca:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000ace:	f7ff ffb7 	bl	8000a40 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB8   ------> I2C1_SCL
  PB9   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 8000ad2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ad6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000adc:	2303      	movs	r3, #3
 8000ade:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8000ae8:	2304      	movs	r3, #4
 8000aea:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aec:	1d3b      	adds	r3, r7, #4
 8000aee:	4619      	mov	r1, r3
 8000af0:	481a      	ldr	r0, [pc, #104]	; (8000b5c <MX_I2C1_Init+0xbc>)
 8000af2:	f001 f81c 	bl	8001b2e <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8000af6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000afa:	f7ff ffb9 	bl	8000a70 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8000afe:	4818      	ldr	r0, [pc, #96]	; (8000b60 <MX_I2C1_Init+0xc0>)
 8000b00:	f7ff ff8d 	bl	8000a1e <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 8000b04:	4816      	ldr	r0, [pc, #88]	; (8000b60 <MX_I2C1_Init+0xc0>)
 8000b06:	f7ff ff7a 	bl	80009fe <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8000b0a:	4815      	ldr	r0, [pc, #84]	; (8000b60 <MX_I2C1_Init+0xc0>)
 8000b0c:	f7ff ff3c 	bl	8000988 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8000b10:	4813      	ldr	r0, [pc, #76]	; (8000b60 <MX_I2C1_Init+0xc0>)
 8000b12:	f7ff ff29 	bl	8000968 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8000b16:	2300      	movs	r3, #0
 8000b18:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x00101D7C;
 8000b1a:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <MX_I2C1_Init+0xc4>)
 8000b1c:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_10BIT;
 8000b2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b32:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8000b34:	f107 031c 	add.w	r3, r7, #28
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4809      	ldr	r0, [pc, #36]	; (8000b60 <MX_I2C1_Init+0xc0>)
 8000b3c:	f001 f90a 	bl	8001d54 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8000b40:	2200      	movs	r2, #0
 8000b42:	2100      	movs	r1, #0
 8000b44:	4806      	ldr	r0, [pc, #24]	; (8000b60 <MX_I2C1_Init+0xc0>)
 8000b46:	f7ff ff42 	bl	80009ce <LL_I2C_SetOwnAddress2>
  LL_I2C_SetMasterAddressingMode(I2C1, LL_I2C_ADDRESSING_MODE_10BIT);
 8000b4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b4e:	4804      	ldr	r0, [pc, #16]	; (8000b60 <MX_I2C1_Init+0xc0>)
 8000b50:	f7ff ff2a 	bl	80009a8 <LL_I2C_SetMasterAddressingMode>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b54:	bf00      	nop
 8000b56:	3738      	adds	r7, #56	; 0x38
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	48000400 	.word	0x48000400
 8000b60:	40005400 	.word	0x40005400
 8000b64:	00101d7c 	.word	0x00101d7c

08000b68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	f003 0307 	and.w	r3, r3, #7
 8000b76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b78:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <__NVIC_SetPriorityGrouping+0x44>)
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b7e:	68ba      	ldr	r2, [r7, #8]
 8000b80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b84:	4013      	ands	r3, r2
 8000b86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b9a:	4a04      	ldr	r2, [pc, #16]	; (8000bac <__NVIC_SetPriorityGrouping+0x44>)
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	60d3      	str	r3, [r2, #12]
}
 8000ba0:	bf00      	nop
 8000ba2:	3714      	adds	r7, #20
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb4:	4b04      	ldr	r3, [pc, #16]	; (8000bc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	0a1b      	lsrs	r3, r3, #8
 8000bba:	f003 0307 	and.w	r3, r3, #7
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	6039      	str	r1, [r7, #0]
 8000bd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	db0a      	blt.n	8000bf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be0:	490d      	ldr	r1, [pc, #52]	; (8000c18 <__NVIC_SetPriority+0x4c>)
 8000be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be6:	683a      	ldr	r2, [r7, #0]
 8000be8:	b2d2      	uxtb	r2, r2
 8000bea:	0112      	lsls	r2, r2, #4
 8000bec:	b2d2      	uxtb	r2, r2
 8000bee:	440b      	add	r3, r1
 8000bf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bf4:	e00a      	b.n	8000c0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf6:	4909      	ldr	r1, [pc, #36]	; (8000c1c <__NVIC_SetPriority+0x50>)
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	f003 030f 	and.w	r3, r3, #15
 8000bfe:	3b04      	subs	r3, #4
 8000c00:	683a      	ldr	r2, [r7, #0]
 8000c02:	b2d2      	uxtb	r2, r2
 8000c04:	0112      	lsls	r2, r2, #4
 8000c06:	b2d2      	uxtb	r2, r2
 8000c08:	440b      	add	r3, r1
 8000c0a:	761a      	strb	r2, [r3, #24]
}
 8000c0c:	bf00      	nop
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	e000e100 	.word	0xe000e100
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b089      	sub	sp, #36	; 0x24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	60b9      	str	r1, [r7, #8]
 8000c2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	f003 0307 	and.w	r3, r3, #7
 8000c32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c34:	69fb      	ldr	r3, [r7, #28]
 8000c36:	f1c3 0307 	rsb	r3, r3, #7
 8000c3a:	2b04      	cmp	r3, #4
 8000c3c:	bf28      	it	cs
 8000c3e:	2304      	movcs	r3, #4
 8000c40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	3304      	adds	r3, #4
 8000c46:	2b06      	cmp	r3, #6
 8000c48:	d902      	bls.n	8000c50 <NVIC_EncodePriority+0x30>
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	3b03      	subs	r3, #3
 8000c4e:	e000      	b.n	8000c52 <NVIC_EncodePriority+0x32>
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c54:	2201      	movs	r2, #1
 8000c56:	69bb      	ldr	r3, [r7, #24]
 8000c58:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5c:	1e5a      	subs	r2, r3, #1
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	401a      	ands	r2, r3
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c66:	2101      	movs	r1, #1
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6e:	1e59      	subs	r1, r3, #1
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c74:	4313      	orrs	r3, r2
         );
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3724      	adds	r7, #36	; 0x24
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
	...

08000c84 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000c88:	4a05      	ldr	r2, [pc, #20]	; (8000ca0 <LL_RCC_HSI_Enable+0x1c>)
 8000c8a:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <LL_RCC_HSI_Enable+0x1c>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f043 0301 	orr.w	r3, r3, #1
 8000c92:	6013      	str	r3, [r2, #0]
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	40021000 	.word	0x40021000

08000ca4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000ca8:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <LL_RCC_HSI_IsReady+0x20>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f003 0302 	and.w	r3, r3, #2
 8000cb0:	2b02      	cmp	r3, #2
 8000cb2:	bf0c      	ite	eq
 8000cb4:	2301      	moveq	r3, #1
 8000cb6:	2300      	movne	r3, #0
 8000cb8:	b2db      	uxtb	r3, r3
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	40021000 	.word	0x40021000

08000cc8 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000cd0:	4907      	ldr	r1, [pc, #28]	; (8000cf0 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000cd2:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	00db      	lsls	r3, r3, #3
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	600b      	str	r3, [r1, #0]
}
 8000ce2:	bf00      	nop
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	40021000 	.word	0x40021000

08000cf4 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8000cf8:	4a05      	ldr	r2, [pc, #20]	; (8000d10 <LL_RCC_LSI_Enable+0x1c>)
 8000cfa:	4b05      	ldr	r3, [pc, #20]	; (8000d10 <LL_RCC_LSI_Enable+0x1c>)
 8000cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cfe:	f043 0301 	orr.w	r3, r3, #1
 8000d02:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	40021000 	.word	0x40021000

08000d14 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY));
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <LL_RCC_LSI_IsReady+0x20>)
 8000d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d1c:	f003 0302 	and.w	r3, r3, #2
 8000d20:	2b02      	cmp	r3, #2
 8000d22:	bf0c      	ite	eq
 8000d24:	2301      	moveq	r3, #1
 8000d26:	2300      	movne	r3, #0
 8000d28:	b2db      	uxtb	r3, r3
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	40021000 	.word	0x40021000

08000d38 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000d40:	4906      	ldr	r1, [pc, #24]	; (8000d5c <LL_RCC_SetSysClkSource+0x24>)
 8000d42:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <LL_RCC_SetSysClkSource+0x24>)
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	f023 0203 	bic.w	r2, r3, #3
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	604b      	str	r3, [r1, #4]
}
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	40021000 	.word	0x40021000

08000d60 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000d64:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <LL_RCC_GetSysClkSource+0x18>)
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f003 030c 	and.w	r3, r3, #12
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	40021000 	.word	0x40021000

08000d7c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000d84:	4906      	ldr	r1, [pc, #24]	; (8000da0 <LL_RCC_SetAHBPrescaler+0x24>)
 8000d86:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <LL_RCC_SetAHBPrescaler+0x24>)
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	604b      	str	r3, [r1, #4]
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	40021000 	.word	0x40021000

08000da4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000dac:	4906      	ldr	r1, [pc, #24]	; (8000dc8 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000dae:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	604b      	str	r3, [r1, #4]
}
 8000dbc:	bf00      	nop
 8000dbe:	370c      	adds	r7, #12
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	40021000 	.word	0x40021000

08000dcc <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000dd4:	4906      	ldr	r1, [pc, #24]	; (8000df0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000dd6:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	604b      	str	r3, [r1, #4]
}
 8000de4:	bf00      	nop
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	40021000 	.word	0x40021000

08000df4 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 8000dfc:	4908      	ldr	r1, [pc, #32]	; (8000e20 <LL_RCC_SetI2CClockSource+0x2c>)
 8000dfe:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <LL_RCC_SetI2CClockSource+0x2c>)
 8000e00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	0e1b      	lsrs	r3, r3, #24
 8000e06:	43db      	mvns	r3, r3
 8000e08:	401a      	ands	r2, r3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000e10:	4313      	orrs	r3, r2
 8000e12:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000e14:	bf00      	nop
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	40021000 	.word	0x40021000

08000e24 <LL_RCC_SetADCClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
#if defined(RCC_CFGR2_ADCPRE34)
  MODIFY_REG(RCC->CFGR2, (ADCxSource >> 16U), (ADCxSource & 0x0000FFFFU));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_ADCPRE12, ADCxSource);
 8000e2c:	4906      	ldr	r1, [pc, #24]	; (8000e48 <LL_RCC_SetADCClockSource+0x24>)
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <LL_RCC_SetADCClockSource+0x24>)
 8000e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e32:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_ADCPRE34 */
}
 8000e3c:	bf00      	nop
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	40021000 	.word	0x40021000

08000e4c <LL_RCC_SetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV32
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRTCClockSource(uint32_t Source)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8000e54:	4906      	ldr	r1, [pc, #24]	; (8000e70 <LL_RCC_SetRTCClockSource+0x24>)
 8000e56:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <LL_RCC_SetRTCClockSource+0x24>)
 8000e58:	6a1b      	ldr	r3, [r3, #32]
 8000e5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	620b      	str	r3, [r1, #32]
}
 8000e64:	bf00      	nop
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	40021000 	.word	0x40021000

08000e74 <LL_RCC_GetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSE
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV32
  */
__STATIC_INLINE uint32_t LL_RCC_GetRTCClockSource(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8000e78:	4b04      	ldr	r3, [pc, #16]	; (8000e8c <LL_RCC_GetRTCClockSource+0x18>)
 8000e7a:	6a1b      	ldr	r3, [r3, #32]
 8000e7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	40021000 	.word	0x40021000

08000e90 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000e94:	4a05      	ldr	r2, [pc, #20]	; (8000eac <LL_RCC_EnableRTC+0x1c>)
 8000e96:	4b05      	ldr	r3, [pc, #20]	; (8000eac <LL_RCC_EnableRTC+0x1c>)
 8000e98:	6a1b      	ldr	r3, [r3, #32]
 8000e9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e9e:	6213      	str	r3, [r2, #32]
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	40021000 	.word	0x40021000

08000eb0 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000eb4:	4a05      	ldr	r2, [pc, #20]	; (8000ecc <LL_RCC_ForceBackupDomainReset+0x1c>)
 8000eb6:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <LL_RCC_ForceBackupDomainReset+0x1c>)
 8000eb8:	6a1b      	ldr	r3, [r3, #32]
 8000eba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ebe:	6213      	str	r3, [r2, #32]
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	40021000 	.word	0x40021000

08000ed0 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000ed4:	4a05      	ldr	r2, [pc, #20]	; (8000eec <LL_RCC_ReleaseBackupDomainReset+0x1c>)
 8000ed6:	4b05      	ldr	r3, [pc, #20]	; (8000eec <LL_RCC_ReleaseBackupDomainReset+0x1c>)
 8000ed8:	6a1b      	ldr	r3, [r3, #32]
 8000eda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ede:	6213      	str	r3, [r2, #32]
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	40021000 	.word	0x40021000

08000ef0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000ef4:	4a05      	ldr	r2, [pc, #20]	; (8000f0c <LL_RCC_PLL_Enable+0x1c>)
 8000ef6:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <LL_RCC_PLL_Enable+0x1c>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000efe:	6013      	str	r3, [r2, #0]
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	40021000 	.word	0x40021000

08000f10 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000f14:	4b07      	ldr	r3, [pc, #28]	; (8000f34 <LL_RCC_PLL_IsReady+0x24>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000f20:	bf0c      	ite	eq
 8000f22:	2301      	moveq	r3, #1
 8000f24:	2300      	movne	r3, #0
 8000f26:	b2db      	uxtb	r3, r3
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	40021000 	.word	0x40021000

08000f38 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, (Source & RCC_CFGR_PLLSRC) | PLLMul);
 8000f42:	480e      	ldr	r0, [pc, #56]	; (8000f7c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000f44:	4b0d      	ldr	r3, [pc, #52]	; (8000f7c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	430b      	orrs	r3, r1
 8000f56:	4313      	orrs	r3, r2
 8000f58:	6043      	str	r3, [r0, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, (Source & RCC_CFGR2_PREDIV));
 8000f5a:	4908      	ldr	r1, [pc, #32]	; (8000f7c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000f5c:	4b07      	ldr	r3, [pc, #28]	; (8000f7c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f60:	f023 020f 	bic.w	r2, r3, #15
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f003 030f 	and.w	r3, r3, #15
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	40021000 	.word	0x40021000

08000f80 <LL_APB1_GRP1_EnableClock>:
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000f88:	4908      	ldr	r1, [pc, #32]	; (8000fac <LL_APB1_GRP1_EnableClock+0x2c>)
 8000f8a:	4b08      	ldr	r3, [pc, #32]	; (8000fac <LL_APB1_GRP1_EnableClock+0x2c>)
 8000f8c:	69da      	ldr	r2, [r3, #28]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000f94:	4b05      	ldr	r3, [pc, #20]	; (8000fac <LL_APB1_GRP1_EnableClock+0x2c>)
 8000f96:	69da      	ldr	r2, [r3, #28]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
}
 8000fa0:	bf00      	nop
 8000fa2:	3714      	adds	r7, #20
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	40021000 	.word	0x40021000

08000fb0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000fb8:	4908      	ldr	r1, [pc, #32]	; (8000fdc <LL_APB2_GRP1_EnableClock+0x2c>)
 8000fba:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <LL_APB2_GRP1_EnableClock+0x2c>)
 8000fbc:	699a      	ldr	r2, [r3, #24]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000fc4:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <LL_APB2_GRP1_EnableClock+0x2c>)
 8000fc6:	699a      	ldr	r2, [r3, #24]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fce:	68fb      	ldr	r3, [r7, #12]
}
 8000fd0:	bf00      	nop
 8000fd2:	3714      	adds	r7, #20
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	40021000 	.word	0x40021000

08000fe0 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000fe8:	4906      	ldr	r1, [pc, #24]	; (8001004 <LL_FLASH_SetLatency+0x24>)
 8000fea:	4b06      	ldr	r3, [pc, #24]	; (8001004 <LL_FLASH_SetLatency+0x24>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f023 0207 	bic.w	r2, r3, #7
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	600b      	str	r3, [r1, #0]
}
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	40022000 	.word	0x40022000

08001008 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800100c:	4b04      	ldr	r3, [pc, #16]	; (8001020 <LL_FLASH_GetLatency+0x18>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f003 0307 	and.w	r3, r3, #7
}
 8001014:	4618      	mov	r0, r3
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	40022000 	.word	0x40022000

08001024 <LL_PWR_EnableBkUpAccess>:
  * @brief  Enable access to the backup domain
  * @rmtoll CR    DBP       LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8001028:	4a05      	ldr	r2, [pc, #20]	; (8001040 <LL_PWR_EnableBkUpAccess+0x1c>)
 800102a:	4b05      	ldr	r3, [pc, #20]	; (8001040 <LL_PWR_EnableBkUpAccess+0x1c>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001032:	6013      	str	r3, [r2, #0]
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	40007000 	.word	0x40007000

08001044 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800104a:	2001      	movs	r0, #1
 800104c:	f7ff ffb0 	bl	8000fb0 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001050:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001054:	f7ff ff94 	bl	8000f80 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001058:	2003      	movs	r0, #3
 800105a:	f7ff fd85 	bl	8000b68 <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 800105e:	f7ff fda7 	bl	8000bb0 <__NVIC_GetPriorityGrouping>
 8001062:	4603      	mov	r3, r0
 8001064:	2200      	movs	r2, #0
 8001066:	210f      	movs	r1, #15
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff fdd9 	bl	8000c20 <NVIC_EncodePriority>
 800106e:	4603      	mov	r3, r0
 8001070:	4619      	mov	r1, r3
 8001072:	f04f 30ff 	mov.w	r0, #4294967295
 8001076:	f7ff fda9 	bl	8000bcc <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800107a:	f000 f82b 	bl	80010d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800107e:	f7ff fb61 	bl	8000744 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_TEMPSen_Init();
 8001082:	f001 ff1a 	bl	8002eba <HAL_TEMPSen_Init>
  HAL_RTC_Init();
 8001086:	f001 ff12 	bl	8002eae <HAL_RTC_Init>
  HAL_LCD_Init();
 800108a:	f001 fc89 	bl	80029a0 <HAL_LCD_Init>
  //TEST fer
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_POT_Init();
 800108e:	f001 fe71 	bl	8002d74 <HAL_POT_Init>
  HAL_LCD_MENU(0,0,0,0);
 8001092:	2300      	movs	r3, #0
 8001094:	2200      	movs	r2, #0
 8001096:	2100      	movs	r1, #0
 8001098:	2000      	movs	r0, #0
 800109a:	f001 fe1f 	bl	8002cdc <HAL_LCD_MENU>

  while (1)
  {
	  short btnu = MX_Joystick_Up();
 800109e:	f7ff fbeb 	bl	8000878 <MX_Joystick_Up>
 80010a2:	4603      	mov	r3, r0
 80010a4:	80fb      	strh	r3, [r7, #6]
	  short btnd = MX_Joystick_Down();
 80010a6:	f7ff fbf7 	bl	8000898 <MX_Joystick_Down>
 80010aa:	4603      	mov	r3, r0
 80010ac:	80bb      	strh	r3, [r7, #4]
	  POT1_Value=HAL_POT_Percentage(POT1_Channel);
 80010ae:	2000      	movs	r0, #0
 80010b0:	f001 fe82 	bl	8002db8 <HAL_POT_Percentage>
 80010b4:	4603      	mov	r3, r0
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	4b05      	ldr	r3, [pc, #20]	; (80010d0 <main+0x8c>)
 80010ba:	801a      	strh	r2, [r3, #0]
	  fsm(btnu, btnd);
 80010bc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80010c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010c4:	4611      	mov	r1, r2
 80010c6:	4618      	mov	r0, r3
 80010c8:	f001 fc32 	bl	8002930 <fsm>
  {
 80010cc:	e7e7      	b.n	800109e <main+0x5a>
 80010ce:	bf00      	nop
 80010d0:	20000554 	.word	0x20000554

080010d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 80010d8:	2002      	movs	r0, #2
 80010da:	f7ff ff81 	bl	8000fe0 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 80010de:	bf00      	nop
 80010e0:	f7ff ff92 	bl	8001008 <LL_FLASH_GetLatency>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d1fa      	bne.n	80010e0 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 80010ea:	f7ff fdcb 	bl	8000c84 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80010ee:	bf00      	nop
 80010f0:	f7ff fdd8 	bl	8000ca4 <LL_RCC_HSI_IsReady>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d1fa      	bne.n	80010f0 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80010fa:	2010      	movs	r0, #16
 80010fc:	f7ff fde4 	bl	8000cc8 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_LSI_Enable();
 8001100:	f7ff fdf8 	bl	8000cf4 <LL_RCC_LSI_Enable>

   /* Wait till LSI is ready */
  while(LL_RCC_LSI_IsReady() != 1)
 8001104:	bf00      	nop
 8001106:	f7ff fe05 	bl	8000d14 <LL_RCC_LSI_IsReady>
 800110a:	4603      	mov	r3, r0
 800110c:	2b01      	cmp	r3, #1
 800110e:	d1fa      	bne.n	8001106 <SystemClock_Config+0x32>
  {

  }
  LL_PWR_EnableBkUpAccess();
 8001110:	f7ff ff88 	bl	8001024 <LL_PWR_EnableBkUpAccess>
  if(LL_RCC_GetRTCClockSource() != LL_RCC_RTC_CLKSOURCE_LSI)
 8001114:	f7ff feae 	bl	8000e74 <LL_RCC_GetRTCClockSource>
 8001118:	4603      	mov	r3, r0
 800111a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800111e:	d007      	beq.n	8001130 <SystemClock_Config+0x5c>
  {
    LL_RCC_ForceBackupDomainReset();
 8001120:	f7ff fec6 	bl	8000eb0 <LL_RCC_ForceBackupDomainReset>
    LL_RCC_ReleaseBackupDomainReset();
 8001124:	f7ff fed4 	bl	8000ed0 <LL_RCC_ReleaseBackupDomainReset>
    LL_RCC_SetRTCClockSource(LL_RCC_RTC_CLKSOURCE_LSI);
 8001128:	f44f 7000 	mov.w	r0, #512	; 0x200
 800112c:	f7ff fe8e 	bl	8000e4c <LL_RCC_SetRTCClockSource>
  }
  LL_RCC_EnableRTC();
 8001130:	f7ff feae 	bl	8000e90 <LL_RCC_EnableRTC>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI_DIV_2, LL_RCC_PLL_MUL_16);
 8001134:	f44f 1160 	mov.w	r1, #3670016	; 0x380000
 8001138:	2000      	movs	r0, #0
 800113a:	f7ff fefd 	bl	8000f38 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 800113e:	f7ff fed7 	bl	8000ef0 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001142:	bf00      	nop
 8001144:	f7ff fee4 	bl	8000f10 <LL_RCC_PLL_IsReady>
 8001148:	4603      	mov	r3, r0
 800114a:	2b01      	cmp	r3, #1
 800114c:	d1fa      	bne.n	8001144 <SystemClock_Config+0x70>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800114e:	2000      	movs	r0, #0
 8001150:	f7ff fe14 	bl	8000d7c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8001154:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001158:	f7ff fe24 	bl	8000da4 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_16);
 800115c:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8001160:	f7ff fe34 	bl	8000dcc <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001164:	2002      	movs	r0, #2
 8001166:	f7ff fde7 	bl	8000d38 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800116a:	bf00      	nop
 800116c:	f7ff fdf8 	bl	8000d60 <LL_RCC_GetSysClkSource>
 8001170:	4603      	mov	r3, r0
 8001172:	2b08      	cmp	r3, #8
 8001174:	d1fa      	bne.n	800116c <SystemClock_Config+0x98>
  {

  }
  LL_Init1msTick(64000000);
 8001176:	4808      	ldr	r0, [pc, #32]	; (8001198 <SystemClock_Config+0xc4>)
 8001178:	f001 fa02 	bl	8002580 <LL_Init1msTick>
  LL_SetSystemCoreClock(64000000);
 800117c:	4806      	ldr	r0, [pc, #24]	; (8001198 <SystemClock_Config+0xc4>)
 800117e:	f001 fa31 	bl	80025e4 <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 8001182:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001186:	f7ff fe35 	bl	8000df4 <LL_RCC_SetI2CClockSource>
  LL_RCC_SetADCClockSource(LL_RCC_ADC12_CLKSRC_PLL_DIV_1);
 800118a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800118e:	f7ff fe49 	bl	8000e24 <LL_RCC_SetADCClockSource>
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	03d09000 	.word	0x03d09000

0800119c <LL_RCC_EnableRTC>:
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80011a0:	4a05      	ldr	r2, [pc, #20]	; (80011b8 <LL_RCC_EnableRTC+0x1c>)
 80011a2:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <LL_RCC_EnableRTC+0x1c>)
 80011a4:	6a1b      	ldr	r3, [r3, #32]
 80011a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011aa:	6213      	str	r3, [r2, #32]
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	40021000 	.word	0x40021000

080011bc <LL_RTC_EnableInitMode>:
  * @rmtoll ISR          INIT          LL_RTC_EnableInitMode
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableInitMode(RTC_TypeDef *RTCx)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  /* Set the Initialization mode */
  WRITE_REG(RTCx->ISR, RTC_INIT_MASK);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f04f 32ff 	mov.w	r2, #4294967295
 80011ca:	60da      	str	r2, [r3, #12]
}
 80011cc:	bf00      	nop
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <LL_RTC_DisableInitMode>:
  * @rmtoll ISR          INIT          LL_RTC_DisableInitMode
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableInitMode(RTC_TypeDef *RTCx)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  /* Exit Initialization mode */
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80011e6:	60da      	str	r2, [r3, #12]
}
 80011e8:	bf00      	nop
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <LL_RTC_SetAsynchPrescaler>:
  * @param  RTCx RTC Instance
  * @param  AsynchPrescaler Value between Min_Data = 0 and Max_Data = 0x7F
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetAsynchPrescaler(RTC_TypeDef *RTCx, uint32_t AsynchPrescaler)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_PRER_PREDIV_A_Pos);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	691b      	ldr	r3, [r3, #16]
 8001202:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	041b      	lsls	r3, r3, #16
 800120a:	431a      	orrs	r2, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	611a      	str	r2, [r3, #16]
}
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <LL_RTC_SetSynchPrescaler>:
  * @param  RTCx RTC Instance
  * @param  SynchPrescaler Value between Min_Data = 0 and Max_Data = 0x7FFF
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetSynchPrescaler(RTC_TypeDef *RTCx, uint32_t SynchPrescaler)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	691b      	ldr	r3, [r3, #16]
 800122a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800122e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001232:	683a      	ldr	r2, [r7, #0]
 8001234:	431a      	orrs	r2, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	611a      	str	r2, [r3, #16]
}
 800123a:	bf00      	nop
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8001246:	b480      	push	{r7}
 8001248:	b083      	sub	sp, #12
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	22ff      	movs	r2, #255	; 0xff
 8001252:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001254:	bf00      	nop
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	22ca      	movs	r2, #202	; 0xca
 800126c:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2253      	movs	r2, #83	; 0x53
 8001272:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <LL_RTC_BAK_SetRegister>:
  *         (*) value not defined in all devices.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_RTC_BAK_SetRegister(RTC_TypeDef *RTCx, uint32_t BackupRegister, uint32_t Data)
{
 8001280:	b480      	push	{r7}
 8001282:	b087      	sub	sp, #28
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]

  tmp = (uint32_t)(&(RTCx->BKP0R));
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	3350      	adds	r3, #80	; 0x50
 8001294:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	697a      	ldr	r2, [r7, #20]
 800129c:	4413      	add	r3, r2
 800129e:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	601a      	str	r2, [r3, #0]
}
 80012a6:	bf00      	nop
 80012a8:	371c      	adds	r7, #28
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <LL_RTC_BAK_GetRegister>:
  *
  *         (*) value not defined in all devices.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_BAK_GetRegister(RTC_TypeDef *RTCx, uint32_t BackupRegister)
{
 80012b2:	b480      	push	{r7}
 80012b4:	b085      	sub	sp, #20
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
 80012ba:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 80012bc:	2300      	movs	r3, #0
 80012be:	60fb      	str	r3, [r7, #12]

  tmp = (uint32_t)(&(RTCx->BKP0R));
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	3350      	adds	r3, #80	; 0x50
 80012c4:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	68fa      	ldr	r2, [r7, #12]
 80012cc:	4413      	add	r3, r2
 80012ce:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	681b      	ldr	r3, [r3, #0]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3714      	adds	r7, #20
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <LL_RTC_IsActiveFlag_INIT>:
  * @rmtoll ISR          INITF         LL_RTC_IsActiveFlag_INIT
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_INIT(RTC_TypeDef *RTCx)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF));
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012f0:	2b40      	cmp	r3, #64	; 0x40
 80012f2:	bf0c      	ite	eq
 80012f4:	2301      	moveq	r3, #1
 80012f6:	2300      	movne	r3, #0
 80012f8:	b2db      	uxtb	r3, r3
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr

08001306 <LL_RTC_IsActiveFlag_RS>:
  * @rmtoll ISR          RSF           LL_RTC_IsActiveFlag_RS
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_RS(RTC_TypeDef *RTCx)
{
 8001306:	b480      	push	{r7}
 8001308:	b083      	sub	sp, #12
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ISR, RTC_ISR_RSF) == (RTC_ISR_RSF));
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	68db      	ldr	r3, [r3, #12]
 8001312:	f003 0320 	and.w	r3, r3, #32
 8001316:	2b20      	cmp	r3, #32
 8001318:	bf0c      	ite	eq
 800131a:	2301      	moveq	r3, #1
 800131c:	2300      	movne	r3, #0
 800131e:	b2db      	uxtb	r3, r3
}
 8001320:	4618      	mov	r0, r3
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <LL_RTC_ClearFlag_RS>:
  * @rmtoll ISR          RSF           LL_RTC_ClearFlag_RS
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_ClearFlag_RS(RTC_TypeDef *RTCx)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, (~((RTC_ISR_RSF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTCx->ISR & RTC_ISR_INIT)));
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800133c:	f063 02a0 	orn	r2, r3, #160	; 0xa0
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	60da      	str	r2, [r3, #12]
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <MX_RTC_Init>:

/* USER CODE END 0 */

/* RTC init function */
void MX_RTC_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  LL_RTC_InitTypeDef RTC_InitStruct = {0};
 8001356:	f107 030c 	add.w	r3, r7, #12
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
  LL_RTC_TimeTypeDef RTC_TimeStruct = {0};
 8001362:	1d3b      	adds	r3, r7, #4
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
  LL_RTC_DateTypeDef RTC_DateStruct = {0};
 800136a:	2300      	movs	r3, #0
 800136c:	603b      	str	r3, [r7, #0]

  /* Peripheral clock enable */
  LL_RCC_EnableRTC();
 800136e:	f7ff ff15 	bl	800119c <LL_RCC_EnableRTC>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC and set the Time and Date
  */
  RTC_InitStruct.HourFormat = LL_RTC_HOURFORMAT_24HOUR;
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
  RTC_InitStruct.AsynchPrescaler = 127;
 8001376:	237f      	movs	r3, #127	; 0x7f
 8001378:	613b      	str	r3, [r7, #16]
  RTC_InitStruct.SynchPrescaler = 255;
 800137a:	23ff      	movs	r3, #255	; 0xff
 800137c:	617b      	str	r3, [r7, #20]
  LL_RTC_Init(RTC, &RTC_InitStruct);
 800137e:	f107 030c 	add.w	r3, r7, #12
 8001382:	4619      	mov	r1, r3
 8001384:	481f      	ldr	r0, [pc, #124]	; (8001404 <MX_RTC_Init+0xb4>)
 8001386:	f000 fe53 	bl	8002030 <LL_RTC_Init>
  LL_RTC_SetAsynchPrescaler(RTC, 127);
 800138a:	217f      	movs	r1, #127	; 0x7f
 800138c:	481d      	ldr	r0, [pc, #116]	; (8001404 <MX_RTC_Init+0xb4>)
 800138e:	f7ff ff31 	bl	80011f4 <LL_RTC_SetAsynchPrescaler>
  LL_RTC_SetSynchPrescaler(RTC, 255);
 8001392:	21ff      	movs	r1, #255	; 0xff
 8001394:	481b      	ldr	r0, [pc, #108]	; (8001404 <MX_RTC_Init+0xb4>)
 8001396:	f7ff ff41 	bl	800121c <LL_RTC_SetSynchPrescaler>
  /** Initialize RTC and set the Time and Date
  */
  if(LL_RTC_BAK_GetRegister(RTC, LL_RTC_BKP_DR0) != 0x32F2){
 800139a:	2100      	movs	r1, #0
 800139c:	4819      	ldr	r0, [pc, #100]	; (8001404 <MX_RTC_Init+0xb4>)
 800139e:	f7ff ff88 	bl	80012b2 <LL_RTC_BAK_GetRegister>
 80013a2:	4602      	mov	r2, r0
 80013a4:	f243 23f2 	movw	r3, #13042	; 0x32f2
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d01d      	beq.n	80013e8 <MX_RTC_Init+0x98>

  RTC_TimeStruct.Hours = 0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	723b      	strb	r3, [r7, #8]
  RTC_TimeStruct.Minutes = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	727b      	strb	r3, [r7, #9]
  RTC_TimeStruct.Seconds = 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	72bb      	strb	r3, [r7, #10]
  LL_RTC_TIME_Init(RTC, LL_RTC_FORMAT_BIN, &RTC_TimeStruct);
 80013b8:	1d3b      	adds	r3, r7, #4
 80013ba:	461a      	mov	r2, r3
 80013bc:	2100      	movs	r1, #0
 80013be:	4811      	ldr	r0, [pc, #68]	; (8001404 <MX_RTC_Init+0xb4>)
 80013c0:	f000 fe66 	bl	8002090 <LL_RTC_TIME_Init>
  RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_MONDAY;
 80013c4:	2301      	movs	r3, #1
 80013c6:	703b      	strb	r3, [r7, #0]
  RTC_DateStruct.Month = LL_RTC_MONTH_JANUARY;
 80013c8:	2301      	movs	r3, #1
 80013ca:	707b      	strb	r3, [r7, #1]
  RTC_DateStruct.Year = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	70fb      	strb	r3, [r7, #3]
  LL_RTC_DATE_Init(RTC, LL_RTC_FORMAT_BIN, &RTC_DateStruct);
 80013d0:	463b      	mov	r3, r7
 80013d2:	461a      	mov	r2, r3
 80013d4:	2100      	movs	r1, #0
 80013d6:	480b      	ldr	r0, [pc, #44]	; (8001404 <MX_RTC_Init+0xb4>)
 80013d8:	f000 ff00 	bl	80021dc <LL_RTC_DATE_Init>
    LL_RTC_BAK_SetRegister(RTC,LL_RTC_BKP_DR0,0x32F2);
 80013dc:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80013e0:	2100      	movs	r1, #0
 80013e2:	4808      	ldr	r0, [pc, #32]	; (8001404 <MX_RTC_Init+0xb4>)
 80013e4:	f7ff ff4c 	bl	8001280 <LL_RTC_BAK_SetRegister>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  LL_RTC_DisableWriteProtection(RTC);
 80013e8:	4806      	ldr	r0, [pc, #24]	; (8001404 <MX_RTC_Init+0xb4>)
 80013ea:	f7ff ff39 	bl	8001260 <LL_RTC_DisableWriteProtection>
  MX_RTC_Enter_InitMode();
 80013ee:	f000 f80b 	bl	8001408 <MX_RTC_Enter_InitMode>

  MX_RTC_Exit_InitMode();
 80013f2:	f000 f819 	bl	8001428 <MX_RTC_Exit_InitMode>
  LL_RTC_EnableWriteProtection(RTC);
 80013f6:	4803      	ldr	r0, [pc, #12]	; (8001404 <MX_RTC_Init+0xb4>)
 80013f8:	f7ff ff25 	bl	8001246 <LL_RTC_EnableWriteProtection>
  /* USER CODE END RTC_Init 2 */

}
 80013fc:	bf00      	nop
 80013fe:	3718      	adds	r7, #24
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40002800 	.word	0x40002800

08001408 <MX_RTC_Enter_InitMode>:

/* USER CODE BEGIN 1 */

/*This functions is to start the RTC initialization mode*/
void MX_RTC_Enter_InitMode(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
	LL_RTC_EnableInitMode(RTC);
 800140c:	4805      	ldr	r0, [pc, #20]	; (8001424 <MX_RTC_Enter_InitMode+0x1c>)
 800140e:	f7ff fed5 	bl	80011bc <LL_RTC_EnableInitMode>
	while (!LL_RTC_IsActiveFlag_INIT(RTC));
 8001412:	bf00      	nop
 8001414:	4803      	ldr	r0, [pc, #12]	; (8001424 <MX_RTC_Enter_InitMode+0x1c>)
 8001416:	f7ff ff63 	bl	80012e0 <LL_RTC_IsActiveFlag_INIT>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d0f9      	beq.n	8001414 <MX_RTC_Enter_InitMode+0xc>

	return;
 8001420:	bf00      	nop
}
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40002800 	.word	0x40002800

08001428 <MX_RTC_Exit_InitMode>:

/*This functions is to finish the RTC initialization mode*/
void MX_RTC_Exit_InitMode (void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
	LL_RTC_DisableInitMode(RTC);
 800142c:	4807      	ldr	r0, [pc, #28]	; (800144c <MX_RTC_Exit_InitMode+0x24>)
 800142e:	f7ff fed3 	bl	80011d8 <LL_RTC_DisableInitMode>
	LL_RTC_ClearFlag_RS(RTC);
 8001432:	4806      	ldr	r0, [pc, #24]	; (800144c <MX_RTC_Exit_InitMode+0x24>)
 8001434:	f7ff ff7a 	bl	800132c <LL_RTC_ClearFlag_RS>
	while (!LL_RTC_IsActiveFlag_RS(RTC));
 8001438:	bf00      	nop
 800143a:	4804      	ldr	r0, [pc, #16]	; (800144c <MX_RTC_Exit_InitMode+0x24>)
 800143c:	f7ff ff63 	bl	8001306 <LL_RTC_IsActiveFlag_RS>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d0f9      	beq.n	800143a <MX_RTC_Exit_InitMode+0x12>
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40002800 	.word	0x40002800

08001450 <LL_AHB1_GRP1_EnableClock>:
{
 8001450:	b480      	push	{r7}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001458:	4908      	ldr	r1, [pc, #32]	; (800147c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800145a:	4b08      	ldr	r3, [pc, #32]	; (800147c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800145c:	695a      	ldr	r2, [r3, #20]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4313      	orrs	r3, r2
 8001462:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001464:	4b05      	ldr	r3, [pc, #20]	; (800147c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001466:	695a      	ldr	r2, [r3, #20]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4013      	ands	r3, r2
 800146c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800146e:	68fb      	ldr	r3, [r7, #12]
}
 8001470:	bf00      	nop
 8001472:	3714      	adds	r7, #20
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	40021000 	.word	0x40021000

08001480 <LL_APB2_GRP1_EnableClock>:
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001488:	4908      	ldr	r1, [pc, #32]	; (80014ac <LL_APB2_GRP1_EnableClock+0x2c>)
 800148a:	4b08      	ldr	r3, [pc, #32]	; (80014ac <LL_APB2_GRP1_EnableClock+0x2c>)
 800148c:	699a      	ldr	r2, [r3, #24]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4313      	orrs	r3, r2
 8001492:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001494:	4b05      	ldr	r3, [pc, #20]	; (80014ac <LL_APB2_GRP1_EnableClock+0x2c>)
 8001496:	699a      	ldr	r2, [r3, #24]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4013      	ands	r3, r2
 800149c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800149e:	68fb      	ldr	r3, [r7, #12]
}
 80014a0:	bf00      	nop
 80014a2:	3714      	adds	r7, #20
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	40021000 	.word	0x40021000

080014b0 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	601a      	str	r2, [r3, #0]
}
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f023 0210 	bic.w	r2, r3, #16
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	431a      	orrs	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	605a      	str	r2, [r3, #4]
}
 80014ea:	bf00      	nop
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <LL_SPI_DisableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_DisableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 80014f6:	b480      	push	{r7}
 80014f8:	b083      	sub	sp, #12
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f023 0208 	bic.w	r2, r3, #8
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	605a      	str	r2, [r3, #4]
}
 800150a:	bf00      	nop
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr

08001516 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8001516:	b480      	push	{r7}
 8001518:	b083      	sub	sp, #12
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	2b02      	cmp	r3, #2
 8001528:	d101      	bne.n	800152e <LL_SPI_IsActiveFlag_TXE+0x18>
 800152a:	2301      	movs	r3, #1
 800152c:	e000      	b.n	8001530 <LL_SPI_IsActiveFlag_TXE+0x1a>
 800152e:	2300      	movs	r3, #0
}
 8001530:	4618      	mov	r0, r3
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <LL_SPI_IsActiveFlag_BSY>:
  * @rmtoll SR           BSY           LL_SPI_IsActiveFlag_BSY
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_BSY(SPI_TypeDef *SPIx)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800154c:	2b80      	cmp	r3, #128	; 0x80
 800154e:	d101      	bne.n	8001554 <LL_SPI_IsActiveFlag_BSY+0x18>
 8001550:	2301      	movs	r3, #1
 8001552:	e000      	b.n	8001556 <LL_SPI_IsActiveFlag_BSY+0x1a>
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr

08001562 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8001562:	b480      	push	{r7}
 8001564:	b085      	sub	sp, #20
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
 800156a:	460b      	mov	r3, r1
 800156c:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	330c      	adds	r3, #12
 8001572:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	78fa      	ldrb	r2, [r7, #3]
 8001578:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 800157a:	bf00      	nop
 800157c:	3714      	adds	r7, #20
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr

08001586 <LL_GPIO_SetOutputPin>:
{
 8001586:	b480      	push	{r7}
 8001588:	b083      	sub	sp, #12
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
 800158e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	683a      	ldr	r2, [r7, #0]
 8001594:	619a      	str	r2, [r3, #24]
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <LL_GPIO_ResetOutputPin>:
{
 80015a2:	b480      	push	{r7}
 80015a4:	b083      	sub	sp, #12
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
 80015aa:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	683a      	ldr	r2, [r7, #0]
 80015b0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
	...

080015c0 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b090      	sub	sp, #64	; 0x40
 80015c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80015c6:	f107 0318 	add.w	r3, r7, #24
 80015ca:	2228      	movs	r2, #40	; 0x28
 80015cc:	2100      	movs	r1, #0
 80015ce:	4618      	mov	r0, r3
 80015d0:	f001 fcc8 	bl	8002f64 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d4:	463b      	mov	r3, r7
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	605a      	str	r2, [r3, #4]
 80015dc:	609a      	str	r2, [r3, #8]
 80015de:	60da      	str	r2, [r3, #12]
 80015e0:	611a      	str	r2, [r3, #16]
 80015e2:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 80015e4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80015e8:	f7ff ff4a 	bl	8001480 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80015ec:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80015f0:	f7ff ff2e 	bl	8001450 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 80015f4:	2320      	movs	r3, #32
 80015f6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80015f8:	2302      	movs	r3, #2
 80015fa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80015fc:	2303      	movs	r3, #3
 80015fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001600:	2300      	movs	r3, #0
 8001602:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001604:	2301      	movs	r3, #1
 8001606:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001608:	2305      	movs	r3, #5
 800160a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160c:	463b      	mov	r3, r7
 800160e:	4619      	mov	r1, r3
 8001610:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001614:	f000 fa8b 	bl	8001b2e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8001618:	2380      	movs	r3, #128	; 0x80
 800161a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800161c:	2302      	movs	r3, #2
 800161e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001620:	2303      	movs	r3, #3
 8001622:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001628:	2302      	movs	r3, #2
 800162a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800162c:	2305      	movs	r3, #5
 800162e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001630:	463b      	mov	r3, r7
 8001632:	4619      	mov	r1, r3
 8001634:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001638:	f000 fa79 	bl	8001b2e <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800163c:	2300      	movs	r3, #0
 800163e:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001640:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001644:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001646:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800164a:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800164c:	2302      	movs	r3, #2
 800164e:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001650:	2301      	movs	r3, #1
 8001652:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001654:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001658:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV256;
 800165a:	2338      	movs	r3, #56	; 0x38
 800165c:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800165e:	2300      	movs	r3, #0
 8001660:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001662:	2300      	movs	r3, #0
 8001664:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 8001666:	2307      	movs	r3, #7
 8001668:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 800166a:	f107 0318 	add.w	r3, r7, #24
 800166e:	4619      	mov	r1, r3
 8001670:	4808      	ldr	r0, [pc, #32]	; (8001694 <MX_SPI1_Init+0xd4>)
 8001672:	f000 ff13 	bl	800249c <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8001676:	2100      	movs	r1, #0
 8001678:	4806      	ldr	r0, [pc, #24]	; (8001694 <MX_SPI1_Init+0xd4>)
 800167a:	f7ff ff29 	bl	80014d0 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI1);
 800167e:	4805      	ldr	r0, [pc, #20]	; (8001694 <MX_SPI1_Init+0xd4>)
 8001680:	f7ff ff39 	bl	80014f6 <LL_SPI_DisableNSSPulseMgt>
  /* USER CODE BEGIN SPI1_Init 2 */
 LL_SPI_Enable(SPI1);
 8001684:	4803      	ldr	r0, [pc, #12]	; (8001694 <MX_SPI1_Init+0xd4>)
 8001686:	f7ff ff13 	bl	80014b0 <LL_SPI_Enable>
  /* USER CODE END SPI1_Init 2 */

}
 800168a:	bf00      	nop
 800168c:	3740      	adds	r7, #64	; 0x40
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40013000 	.word	0x40013000

08001698 <MX_SPI1_Send>:

/* USER CODE BEGIN 1 */
void MX_SPI1_Send(uint8_t tx)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	71fb      	strb	r3, [r7, #7]
	/*This functions sends a command/data of 8 bits, if A0=0, we send a command
	, if A0=1, we send a data*/

	/*Check BSY flag, SPI is not busy */
	while (LL_SPI_IsActiveFlag_BSY(SPI1));
 80016a2:	bf00      	nop
 80016a4:	480a      	ldr	r0, [pc, #40]	; (80016d0 <MX_SPI1_Send+0x38>)
 80016a6:	f7ff ff49 	bl	800153c <LL_SPI_IsActiveFlag_BSY>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d1f9      	bne.n	80016a4 <MX_SPI1_Send+0xc>

	/*Send data of 8 bits*/
	LL_SPI_TransmitData8(SPI1, tx);
 80016b0:	79fb      	ldrb	r3, [r7, #7]
 80016b2:	4619      	mov	r1, r3
 80016b4:	4806      	ldr	r0, [pc, #24]	; (80016d0 <MX_SPI1_Send+0x38>)
 80016b6:	f7ff ff54 	bl	8001562 <LL_SPI_TransmitData8>

	/*Wait until the Tx Buffer is empty*/
	while (!LL_SPI_IsActiveFlag_TXE(SPI1));
 80016ba:	bf00      	nop
 80016bc:	4804      	ldr	r0, [pc, #16]	; (80016d0 <MX_SPI1_Send+0x38>)
 80016be:	f7ff ff2a 	bl	8001516 <LL_SPI_IsActiveFlag_TXE>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d0f9      	beq.n	80016bc <MX_SPI1_Send+0x24>

	return;
 80016c8:	bf00      	nop

}
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40013000 	.word	0x40013000

080016d4 <MX_SPI1_CS_Enable>:
void MX_SPI1_CS_Enable(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
	/*Pin PB6 is configured as CHIP SELECT signal of SPI1,
	CPOL=1, therefore, it is active in LOW
	PB6   ------> SPI1_CS_N*/

	LL_GPIO_ResetOutputPin(LCD_CS_N_GPIO_Port,LCD_CS_N_Pin );
 80016d8:	2140      	movs	r1, #64	; 0x40
 80016da:	4802      	ldr	r0, [pc, #8]	; (80016e4 <MX_SPI1_CS_Enable+0x10>)
 80016dc:	f7ff ff61 	bl	80015a2 <LL_GPIO_ResetOutputPin>
}
 80016e0:	bf00      	nop
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	48000400 	.word	0x48000400

080016e8 <MX_SPI1_CS_Disable>:
void MX_SPI1_CS_Disable(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
	/*Pin PB6 is configured as CHIP SELECT signal of SPI1,
	CPOL=1, therefore, it is disable in HIGH
	PB6   ------> SPI1_CS_N*/

	LL_GPIO_SetOutputPin(LCD_CS_N_GPIO_Port,LCD_CS_N_Pin);
 80016ec:	2140      	movs	r1, #64	; 0x40
 80016ee:	4802      	ldr	r0, [pc, #8]	; (80016f8 <MX_SPI1_CS_Disable+0x10>)
 80016f0:	f7ff ff49 	bl	8001586 <LL_GPIO_SetOutputPin>
}
 80016f4:	bf00      	nop
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	48000400 	.word	0x48000400

080016fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001700:	e7fe      	b.n	8001700 <NMI_Handler+0x4>

08001702 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001702:	b480      	push	{r7}
 8001704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001706:	e7fe      	b.n	8001706 <HardFault_Handler+0x4>

08001708 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800170c:	e7fe      	b.n	800170c <MemManage_Handler+0x4>

0800170e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800170e:	b480      	push	{r7}
 8001710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001712:	e7fe      	b.n	8001712 <BusFault_Handler+0x4>

08001714 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001718:	e7fe      	b.n	8001718 <UsageFault_Handler+0x4>

0800171a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
	...

08001754 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001758:	4a06      	ldr	r2, [pc, #24]	; (8001774 <SystemInit+0x20>)
 800175a:	4b06      	ldr	r3, [pc, #24]	; (8001774 <SystemInit+0x20>)
 800175c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001760:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001764:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <LL_ADC_REG_SetSequencerLength>:
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	f023 020f 	bic.w	r2, r3, #15
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	431a      	orrs	r2, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr

0800179e <LL_ADC_IsEnabled>:
{
 800179e:	b480      	push	{r7}
 80017a0:	b083      	sub	sp, #12
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	bf0c      	ite	eq
 80017b2:	2301      	moveq	r3, #1
 80017b4:	2300      	movne	r3, #0
 80017b6:	b2db      	uxtb	r3, r3
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 80017c4:	b590      	push	{r4, r7, lr}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80017ce:	2300      	movs	r3, #0
 80017d0:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 80017d2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80017d6:	f7ff ffe2 	bl	800179e <LL_ADC_IsEnabled>
 80017da:	4604      	mov	r4, r0
 80017dc:	4817      	ldr	r0, [pc, #92]	; (800183c <LL_ADC_CommonInit+0x78>)
 80017de:	f7ff ffde 	bl	800179e <LL_ADC_IsEnabled>
 80017e2:	4603      	mov	r3, r0
 80017e4:	4323      	orrs	r3, r4
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d120      	bne.n	800182c <LL_ADC_CommonInit+0x68>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d012      	beq.n	8001818 <LL_ADC_CommonInit+0x54>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	689a      	ldr	r2, [r3, #8]
 80017f6:	4b12      	ldr	r3, [pc, #72]	; (8001840 <LL_ADC_CommonInit+0x7c>)
 80017f8:	4013      	ands	r3, r2
 80017fa:	683a      	ldr	r2, [r7, #0]
 80017fc:	6811      	ldr	r1, [r2, #0]
 80017fe:	683a      	ldr	r2, [r7, #0]
 8001800:	6852      	ldr	r2, [r2, #4]
 8001802:	4311      	orrs	r1, r2
 8001804:	683a      	ldr	r2, [r7, #0]
 8001806:	6892      	ldr	r2, [r2, #8]
 8001808:	4311      	orrs	r1, r2
 800180a:	683a      	ldr	r2, [r7, #0]
 800180c:	68d2      	ldr	r2, [r2, #12]
 800180e:	430a      	orrs	r2, r1
 8001810:	431a      	orrs	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	609a      	str	r2, [r3, #8]
 8001816:	e00b      	b.n	8001830 <LL_ADC_CommonInit+0x6c>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689a      	ldr	r2, [r3, #8]
 800181c:	4b08      	ldr	r3, [pc, #32]	; (8001840 <LL_ADC_CommonInit+0x7c>)
 800181e:	4013      	ands	r3, r2
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	6812      	ldr	r2, [r2, #0]
 8001824:	431a      	orrs	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	609a      	str	r2, [r3, #8]
 800182a:	e001      	b.n	8001830 <LL_ADC_CommonInit+0x6c>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8001830:	7bfb      	ldrb	r3, [r7, #15]
}
 8001832:	4618      	mov	r0, r3
 8001834:	3714      	adds	r7, #20
 8001836:	46bd      	mov	sp, r7
 8001838:	bd90      	pop	{r4, r7, pc}
 800183a:	bf00      	nop
 800183c:	50000100 	.word	0x50000100
 8001840:	fffc30e0 	.word	0xfffc30e0

08001844 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800184e:	2300      	movs	r3, #0
 8001850:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f7ff ffa3 	bl	800179e <LL_ADC_IsEnabled>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d111      	bne.n	8001882 <LL_ADC_Init+0x3e>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001866:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800186a:	683a      	ldr	r2, [r7, #0]
 800186c:	6811      	ldr	r1, [r2, #0]
 800186e:	683a      	ldr	r2, [r7, #0]
 8001870:	6852      	ldr	r2, [r2, #4]
 8001872:	4311      	orrs	r1, r2
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	6892      	ldr	r2, [r2, #8]
 8001878:	430a      	orrs	r2, r1
 800187a:	431a      	orrs	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	60da      	str	r2, [r3, #12]
 8001880:	e001      	b.n	8001886 <LL_ADC_Init+0x42>
    
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8001886:	7bfb      	ldrb	r3, [r7, #15]
}
 8001888:	4618      	mov	r0, r3
 800188a:	3710      	adds	r7, #16
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800189a:	2300      	movs	r3, #0
 800189c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7ff ff7d 	bl	800179e <LL_ADC_IsEnabled>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d132      	bne.n	8001910 <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 serie, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d015      	beq.n	80018de <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	68da      	ldr	r2, [r3, #12]
 80018b6:	4b1a      	ldr	r3, [pc, #104]	; (8001920 <LL_ADC_REG_Init+0x90>)
 80018b8:	4013      	ands	r3, r2
 80018ba:	683a      	ldr	r2, [r7, #0]
 80018bc:	6811      	ldr	r1, [r2, #0]
 80018be:	683a      	ldr	r2, [r7, #0]
 80018c0:	6892      	ldr	r2, [r2, #8]
 80018c2:	4311      	orrs	r1, r2
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	68d2      	ldr	r2, [r2, #12]
 80018c8:	4311      	orrs	r1, r2
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	6912      	ldr	r2, [r2, #16]
 80018ce:	4311      	orrs	r1, r2
 80018d0:	683a      	ldr	r2, [r7, #0]
 80018d2:	6952      	ldr	r2, [r2, #20]
 80018d4:	430a      	orrs	r2, r1
 80018d6:	431a      	orrs	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	60da      	str	r2, [r3, #12]
 80018dc:	e011      	b.n	8001902 <LL_ADC_REG_Init+0x72>
                 | ADC_REG_InitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	68da      	ldr	r2, [r3, #12]
 80018e2:	4b0f      	ldr	r3, [pc, #60]	; (8001920 <LL_ADC_REG_Init+0x90>)
 80018e4:	4013      	ands	r3, r2
 80018e6:	683a      	ldr	r2, [r7, #0]
 80018e8:	6811      	ldr	r1, [r2, #0]
 80018ea:	683a      	ldr	r2, [r7, #0]
 80018ec:	68d2      	ldr	r2, [r2, #12]
 80018ee:	4311      	orrs	r1, r2
 80018f0:	683a      	ldr	r2, [r7, #0]
 80018f2:	6912      	ldr	r2, [r2, #16]
 80018f4:	4311      	orrs	r1, r2
 80018f6:	683a      	ldr	r2, [r7, #0]
 80018f8:	6952      	ldr	r2, [r2, #20]
 80018fa:	430a      	orrs	r2, r1
 80018fc:	431a      	orrs	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	60da      	str	r2, [r3, #12]
                 | ADC_REG_InitStruct->Overrun
                );
    }
    
    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	4619      	mov	r1, r3
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f7ff ff35 	bl	8001778 <LL_ADC_REG_SetSequencerLength>
 800190e:	e001      	b.n	8001914 <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8001914:	7bfb      	ldrb	r3, [r7, #15]
}
 8001916:	4618      	mov	r0, r3
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	fff0c03c 	.word	0xfff0c03c

08001924 <LL_GPIO_SetPinMode>:
{
 8001924:	b480      	push	{r7}
 8001926:	b089      	sub	sp, #36	; 0x24
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	fa93 f3a3 	rbit	r3, r3
 800193e:	613b      	str	r3, [r7, #16]
  return result;
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	fab3 f383 	clz	r3, r3
 8001946:	b2db      	uxtb	r3, r3
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	2103      	movs	r1, #3
 800194c:	fa01 f303 	lsl.w	r3, r1, r3
 8001950:	43db      	mvns	r3, r3
 8001952:	401a      	ands	r2, r3
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	fa93 f3a3 	rbit	r3, r3
 800195e:	61bb      	str	r3, [r7, #24]
  return result;
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	fab3 f383 	clz	r3, r3
 8001966:	b2db      	uxtb	r3, r3
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	6879      	ldr	r1, [r7, #4]
 800196c:	fa01 f303 	lsl.w	r3, r1, r3
 8001970:	431a      	orrs	r2, r3
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	601a      	str	r2, [r3, #0]
}
 8001976:	bf00      	nop
 8001978:	3724      	adds	r7, #36	; 0x24
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <LL_GPIO_SetPinOutputType>:
{
 8001982:	b480      	push	{r7}
 8001984:	b085      	sub	sp, #20
 8001986:	af00      	add	r7, sp, #0
 8001988:	60f8      	str	r0, [r7, #12]
 800198a:	60b9      	str	r1, [r7, #8]
 800198c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	685a      	ldr	r2, [r3, #4]
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	43db      	mvns	r3, r3
 8001996:	401a      	ands	r2, r3
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	6879      	ldr	r1, [r7, #4]
 800199c:	fb01 f303 	mul.w	r3, r1, r3
 80019a0:	431a      	orrs	r2, r3
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	605a      	str	r2, [r3, #4]
}
 80019a6:	bf00      	nop
 80019a8:	3714      	adds	r7, #20
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr

080019b2 <LL_GPIO_SetPinSpeed>:
{
 80019b2:	b480      	push	{r7}
 80019b4:	b089      	sub	sp, #36	; 0x24
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	60f8      	str	r0, [r7, #12]
 80019ba:	60b9      	str	r1, [r7, #8]
 80019bc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	689a      	ldr	r2, [r3, #8]
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	fa93 f3a3 	rbit	r3, r3
 80019cc:	613b      	str	r3, [r7, #16]
  return result;
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	fab3 f383 	clz	r3, r3
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	2103      	movs	r1, #3
 80019da:	fa01 f303 	lsl.w	r3, r1, r3
 80019de:	43db      	mvns	r3, r3
 80019e0:	401a      	ands	r2, r3
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	fa93 f3a3 	rbit	r3, r3
 80019ec:	61bb      	str	r3, [r7, #24]
  return result;
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	fab3 f383 	clz	r3, r3
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	6879      	ldr	r1, [r7, #4]
 80019fa:	fa01 f303 	lsl.w	r3, r1, r3
 80019fe:	431a      	orrs	r2, r3
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	609a      	str	r2, [r3, #8]
}
 8001a04:	bf00      	nop
 8001a06:	3724      	adds	r7, #36	; 0x24
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <LL_GPIO_SetPinPull>:
{
 8001a10:	b480      	push	{r7}
 8001a12:	b089      	sub	sp, #36	; 0x24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	68da      	ldr	r2, [r3, #12]
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	fa93 f3a3 	rbit	r3, r3
 8001a2a:	613b      	str	r3, [r7, #16]
  return result;
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	fab3 f383 	clz	r3, r3
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	2103      	movs	r1, #3
 8001a38:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	401a      	ands	r2, r3
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	fa93 f3a3 	rbit	r3, r3
 8001a4a:	61bb      	str	r3, [r7, #24]
  return result;
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	fab3 f383 	clz	r3, r3
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	6879      	ldr	r1, [r7, #4]
 8001a58:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5c:	431a      	orrs	r2, r3
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	60da      	str	r2, [r3, #12]
}
 8001a62:	bf00      	nop
 8001a64:	3724      	adds	r7, #36	; 0x24
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr

08001a6e <LL_GPIO_SetAFPin_0_7>:
{
 8001a6e:	b480      	push	{r7}
 8001a70:	b089      	sub	sp, #36	; 0x24
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	60f8      	str	r0, [r7, #12]
 8001a76:	60b9      	str	r1, [r7, #8]
 8001a78:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	6a1a      	ldr	r2, [r3, #32]
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	fa93 f3a3 	rbit	r3, r3
 8001a88:	613b      	str	r3, [r7, #16]
  return result;
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	fab3 f383 	clz	r3, r3
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	210f      	movs	r1, #15
 8001a96:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	401a      	ands	r2, r3
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	fa93 f3a3 	rbit	r3, r3
 8001aa8:	61bb      	str	r3, [r7, #24]
  return result;
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	fab3 f383 	clz	r3, r3
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	6879      	ldr	r1, [r7, #4]
 8001ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aba:	431a      	orrs	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	621a      	str	r2, [r3, #32]
}
 8001ac0:	bf00      	nop
 8001ac2:	3724      	adds	r7, #36	; 0x24
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <LL_GPIO_SetAFPin_8_15>:
{
 8001acc:	b480      	push	{r7}
 8001ace:	b089      	sub	sp, #36	; 0x24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	0a1b      	lsrs	r3, r3, #8
 8001ae0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	fa93 f3a3 	rbit	r3, r3
 8001ae8:	613b      	str	r3, [r7, #16]
  return result;
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	fab3 f383 	clz	r3, r3
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	210f      	movs	r1, #15
 8001af6:	fa01 f303 	lsl.w	r3, r1, r3
 8001afa:	43db      	mvns	r3, r3
 8001afc:	401a      	ands	r2, r3
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	0a1b      	lsrs	r3, r3, #8
 8001b02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	fa93 f3a3 	rbit	r3, r3
 8001b0a:	61bb      	str	r3, [r7, #24]
  return result;
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	fab3 f383 	clz	r3, r3
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	6879      	ldr	r1, [r7, #4]
 8001b18:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1c:	431a      	orrs	r2, r3
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001b22:	bf00      	nop
 8001b24:	3724      	adds	r7, #36	; 0x24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b088      	sub	sp, #32
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
 8001b36:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	fa93 f3a3 	rbit	r3, r3
 8001b44:	613b      	str	r3, [r7, #16]
  return result;
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	fab3 f383 	clz	r3, r3
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001b50:	e051      	b.n	8001bf6 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	2101      	movs	r1, #1
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b5e:	4013      	ands	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d043      	beq.n	8001bf0 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d003      	beq.n	8001b78 <LL_GPIO_Init+0x4a>
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d10e      	bne.n	8001b96 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	69b9      	ldr	r1, [r7, #24]
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f7ff ff16 	bl	80019b2 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	6819      	ldr	r1, [r3, #0]
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f7ff fef6 	bl	8001982 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	691b      	ldr	r3, [r3, #16]
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	69b9      	ldr	r1, [r7, #24]
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f7ff ff36 	bl	8001a10 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d11a      	bne.n	8001be2 <LL_GPIO_Init+0xb4>
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	fa93 f3a3 	rbit	r3, r3
 8001bb6:	60bb      	str	r3, [r7, #8]
  return result;
 8001bb8:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001bba:	fab3 f383 	clz	r3, r3
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	2b07      	cmp	r3, #7
 8001bc2:	d807      	bhi.n	8001bd4 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	695b      	ldr	r3, [r3, #20]
 8001bc8:	461a      	mov	r2, r3
 8001bca:	69b9      	ldr	r1, [r7, #24]
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f7ff ff4e 	bl	8001a6e <LL_GPIO_SetAFPin_0_7>
 8001bd2:	e006      	b.n	8001be2 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	695b      	ldr	r3, [r3, #20]
 8001bd8:	461a      	mov	r2, r3
 8001bda:	69b9      	ldr	r1, [r7, #24]
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f7ff ff75 	bl	8001acc <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	461a      	mov	r2, r3
 8001be8:	69b9      	ldr	r1, [r7, #24]
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f7ff fe9a 	bl	8001924 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d1a6      	bne.n	8001b52 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3720      	adds	r7, #32
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <LL_I2C_Enable>:
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b083      	sub	sp, #12
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f043 0201 	orr.w	r2, r3, #1
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	601a      	str	r2, [r3, #0]
}
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr

08001c2e <LL_I2C_Disable>:
{
 8001c2e:	b480      	push	{r7}
 8001c30:	b083      	sub	sp, #12
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f023 0201 	bic.w	r2, r3, #1
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	601a      	str	r2, [r3, #0]
}
 8001c42:	bf00      	nop
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr

08001c4e <LL_I2C_ConfigFilters>:
{
 8001c4e:	b480      	push	{r7}
 8001c50:	b085      	sub	sp, #20
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	60f8      	str	r0, [r7, #12]
 8001c56:	60b9      	str	r1, [r7, #8]
 8001c58:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	0219      	lsls	r1, r3, #8
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	430b      	orrs	r3, r1
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	601a      	str	r2, [r3, #0]
}
 8001c70:	bf00      	nop
 8001c72:	3714      	adds	r7, #20
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <LL_I2C_SetOwnAddress1>:
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001c90:	f023 0307 	bic.w	r3, r3, #7
 8001c94:	68b9      	ldr	r1, [r7, #8]
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	431a      	orrs	r2, r3
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	609a      	str	r2, [r3, #8]
}
 8001ca0:	bf00      	nop
 8001ca2:	3714      	adds	r7, #20
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <LL_I2C_EnableOwnAddress1>:
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
}
 8001cc0:	bf00      	nop
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <LL_I2C_DisableOwnAddress1>:
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	609a      	str	r2, [r3, #8]
}
 8001ce0:	bf00      	nop
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <LL_I2C_SetTiming>:
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	683a      	ldr	r2, [r7, #0]
 8001cfa:	611a      	str	r2, [r3, #16]
}
 8001cfc:	bf00      	nop
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <LL_I2C_SetMode>:
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	431a      	orrs	r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	601a      	str	r2, [r3, #0]
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr

08001d2e <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	b083      	sub	sp, #12
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
 8001d36:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	431a      	orrs	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	605a      	str	r2, [r3, #4]
}
 8001d48:	bf00      	nop
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f7ff ff65 	bl	8001c2e <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	6899      	ldr	r1, [r3, #8]
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f7ff ff6d 	bl	8001c4e <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	4619      	mov	r1, r3
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f7ff ffb6 	bl	8001cec <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f7ff ff44 	bl	8001c0e <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f7ff ffa0 	bl	8001ccc <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	6919      	ldr	r1, [r3, #16]
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	461a      	mov	r2, r3
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f7ff ff70 	bl	8001c7c <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	691b      	ldr	r3, [r3, #16]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d002      	beq.n	8001daa <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f7ff ff81 	bl	8001cac <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4619      	mov	r1, r3
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f7ff ffa9 	bl	8001d08 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	695b      	ldr	r3, [r3, #20]
 8001dba:	4619      	mov	r1, r3
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f7ff ffb6 	bl	8001d2e <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8001dc2:	2300      	movs	r3, #0
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3708      	adds	r7, #8
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <LL_RTC_SetHourFormat>:
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_FMT, HourFormat);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	431a      	orrs	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	609a      	str	r2, [r3, #8]
}
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <LL_RTC_GetHourFormat>:
{
 8001df2:	b480      	push	{r7}
 8001df4:	b083      	sub	sp, #12
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->CR, RTC_CR_FMT));
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <LL_RTC_EnableInitMode>:
{
 8001e0e:	b480      	push	{r7}
 8001e10:	b083      	sub	sp, #12
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, RTC_INIT_MASK);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f04f 32ff 	mov.w	r2, #4294967295
 8001e1c:	60da      	str	r2, [r3, #12]
}
 8001e1e:	bf00      	nop
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr

08001e2a <LL_RTC_DisableInitMode>:
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	b083      	sub	sp, #12
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e38:	60da      	str	r2, [r3, #12]
}
 8001e3a:	bf00      	nop
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr

08001e46 <LL_RTC_IsShadowRegBypassEnabled>:
{
 8001e46:	b480      	push	{r7}
 8001e48:	b083      	sub	sp, #12
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->CR, RTC_CR_BYPSHAD) == (RTC_CR_BYPSHAD));
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f003 0320 	and.w	r3, r3, #32
 8001e56:	2b20      	cmp	r3, #32
 8001e58:	bf0c      	ite	eq
 8001e5a:	2301      	moveq	r3, #1
 8001e5c:	2300      	movne	r3, #0
 8001e5e:	b2db      	uxtb	r3, r3
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <LL_RTC_SetAsynchPrescaler>:
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_PRER_PREDIV_A_Pos);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	041b      	lsls	r3, r3, #16
 8001e82:	431a      	orrs	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	611a      	str	r2, [r3, #16]
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <LL_RTC_SetSynchPrescaler>:
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001ea6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	431a      	orrs	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	611a      	str	r2, [r3, #16]
}
 8001eb2:	bf00      	nop
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr

08001ebe <LL_RTC_EnableWriteProtection>:
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	b083      	sub	sp, #12
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	22ff      	movs	r2, #255	; 0xff
 8001eca:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <LL_RTC_DisableWriteProtection>:
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	22ca      	movs	r2, #202	; 0xca
 8001ee4:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2253      	movs	r2, #83	; 0x53
 8001eea:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001eec:	bf00      	nop
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <LL_RTC_TIME_Config>:
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b087      	sub	sp, #28
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	607a      	str	r2, [r7, #4]
 8001f04:	603b      	str	r3, [r7, #0]
  uint32_t temp = 0U;
 8001f06:	2300      	movs	r3, #0
 8001f08:	617b      	str	r3, [r7, #20]
         (((Hours & 0xF0U) << (RTC_TR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_TR_HU_Pos))     | \
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	041b      	lsls	r3, r3, #16
 8001f0e:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
  temp = Format12_24                                                                                    | \
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	431a      	orrs	r2, r3
         (((Minutes & 0xF0U) << (RTC_TR_MNT_Pos - 4U)) | ((Minutes & 0x0FU) << RTC_TR_MNU_Pos)) | \
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	021b      	lsls	r3, r3, #8
 8001f1a:	b29b      	uxth	r3, r3
         (((Hours & 0xF0U) << (RTC_TR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_TR_HU_Pos))     | \
 8001f1c:	431a      	orrs	r2, r3
         (((Seconds & 0xF0U) << (RTC_TR_ST_Pos - 4U)) | ((Seconds & 0x0FU) << RTC_TR_SU_Pos));
 8001f1e:	6a3b      	ldr	r3, [r7, #32]
 8001f20:	b2db      	uxtb	r3, r3
  temp = Format12_24                                                                                    | \
 8001f22:	4313      	orrs	r3, r2
 8001f24:	617b      	str	r3, [r7, #20]
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
 8001f2e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001f32:	697a      	ldr	r2, [r7, #20]
 8001f34:	431a      	orrs	r2, r3
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	601a      	str	r2, [r3, #0]
}
 8001f3a:	bf00      	nop
 8001f3c:	371c      	adds	r7, #28
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
	...

08001f48 <LL_RTC_DATE_Config>:
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b087      	sub	sp, #28
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
 8001f54:	603b      	str	r3, [r7, #0]
  uint32_t temp = 0U;
 8001f56:	2300      	movs	r3, #0
 8001f58:	617b      	str	r3, [r7, #20]
  temp = (WeekDay << RTC_DR_WDU_Pos)                                                        | \
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	035a      	lsls	r2, r3, #13
         (((Year & 0xF0U) << (RTC_DR_YT_Pos - 4U)) | ((Year & 0x0FU) << RTC_DR_YU_Pos))   | \
 8001f5e:	6a3b      	ldr	r3, [r7, #32]
 8001f60:	041b      	lsls	r3, r3, #16
 8001f62:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  temp = (WeekDay << RTC_DR_WDU_Pos)                                                        | \
 8001f66:	431a      	orrs	r2, r3
         (((Month & 0xF0U) << (RTC_DR_MT_Pos - 4U)) | ((Month & 0x0FU) << RTC_DR_MU_Pos)) | \
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	021b      	lsls	r3, r3, #8
 8001f6c:	b29b      	uxth	r3, r3
         (((Year & 0xF0U) << (RTC_DR_YT_Pos - 4U)) | ((Year & 0x0FU) << RTC_DR_YU_Pos))   | \
 8001f6e:	431a      	orrs	r2, r3
         (((Day & 0xF0U) << (RTC_DR_DT_Pos - 4U)) | ((Day & 0x0FU) << RTC_DR_DU_Pos));
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	b2db      	uxtb	r3, r3
  temp = (WeekDay << RTC_DR_WDU_Pos)                                                        | \
 8001f74:	4313      	orrs	r3, r2
 8001f76:	617b      	str	r3, [r7, #20]
  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	685a      	ldr	r2, [r3, #4]
 8001f7c:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <LL_RTC_DATE_Config+0x4c>)
 8001f7e:	4013      	ands	r3, r2
 8001f80:	697a      	ldr	r2, [r7, #20]
 8001f82:	431a      	orrs	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	605a      	str	r2, [r3, #4]
}
 8001f88:	bf00      	nop
 8001f8a:	371c      	adds	r7, #28
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	ff0000c0 	.word	0xff0000c0

08001f98 <LL_RTC_IsActiveFlag_INIT>:
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF));
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fa8:	2b40      	cmp	r3, #64	; 0x40
 8001faa:	bf0c      	ite	eq
 8001fac:	2301      	moveq	r3, #1
 8001fae:	2300      	movne	r3, #0
 8001fb0:	b2db      	uxtb	r3, r3
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr

08001fbe <LL_RTC_IsActiveFlag_RS>:
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b083      	sub	sp, #12
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ISR, RTC_ISR_RSF) == (RTC_ISR_RSF));
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	f003 0320 	and.w	r3, r3, #32
 8001fce:	2b20      	cmp	r3, #32
 8001fd0:	bf0c      	ite	eq
 8001fd2:	2301      	moveq	r3, #1
 8001fd4:	2300      	movne	r3, #0
 8001fd6:	b2db      	uxtb	r3, r3
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <LL_RTC_ClearFlag_RS>:
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, (~((RTC_ISR_RSF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTCx->ISR & RTC_ISR_INIT)));
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ff4:	f063 02a0 	orn	r2, r3, #160	; 0xa0
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	60da      	str	r2, [r3, #12]
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <LL_SYSTICK_IsActiveCounterFlag>:
  * @note   It can be used in timeout function on application side.
  * @rmtoll STK_CTRL     COUNTFLAG     LL_SYSTICK_IsActiveCounterFlag
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 800200c:	4b07      	ldr	r3, [pc, #28]	; (800202c <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002014:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002018:	bf0c      	ite	eq
 800201a:	2301      	moveq	r3, #1
 800201c:	2300      	movne	r3, #0
 800201e:	b2db      	uxtb	r3, r3
}
 8002020:	4618      	mov	r0, r3
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	e000e010 	.word	0xe000e010

08002030 <LL_RTC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized
  */
ErrorStatus LL_RTC_Init(RTC_TypeDef *RTCx, LL_RTC_InitTypeDef *RTC_InitStruct)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_RTC_HOURFORMAT(RTC_InitStruct->HourFormat));
  assert_param(IS_LL_RTC_ASYNCH_PREDIV(RTC_InitStruct->AsynchPrescaler));
  assert_param(IS_LL_RTC_SYNCH_PREDIV(RTC_InitStruct->SynchPrescaler));

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f7ff ff4a 	bl	8001ed8 <LL_RTC_DisableWriteProtection>

  /* Set Initialization mode */
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f000 f96d 	bl	8002324 <LL_RTC_EnterInitMode>
 800204a:	4603      	mov	r3, r0
 800204c:	2b01      	cmp	r3, #1
 800204e:	d016      	beq.n	800207e <LL_RTC_Init+0x4e>
  {
    /* Set Hour Format */
    LL_RTC_SetHourFormat(RTCx, RTC_InitStruct->HourFormat);
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4619      	mov	r1, r3
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f7ff feb8 	bl	8001dcc <LL_RTC_SetHourFormat>

    /* Configure Synchronous and Asynchronous prescaler factor */
    LL_RTC_SetSynchPrescaler(RTCx, RTC_InitStruct->SynchPrescaler);
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	4619      	mov	r1, r3
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f7ff ff16 	bl	8001e94 <LL_RTC_SetSynchPrescaler>
    LL_RTC_SetAsynchPrescaler(RTCx, RTC_InitStruct->AsynchPrescaler);
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	4619      	mov	r1, r3
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7ff fefc 	bl	8001e6c <LL_RTC_SetAsynchPrescaler>

    /* Exit Initialization mode */
    LL_RTC_DisableInitMode(RTCx);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f7ff fed8 	bl	8001e2a <LL_RTC_DisableInitMode>

    status = SUCCESS;
 800207a:	2300      	movs	r3, #0
 800207c:	73fb      	strb	r3, [r7, #15]
  }
  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f7ff ff1d 	bl	8001ebe <LL_RTC_EnableWriteProtection>

  return status;
 8002084:	7bfb      	ldrb	r3, [r7, #15]
}
 8002086:	4618      	mov	r0, r3
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
	...

08002090 <LL_RTC_TIME_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Time register is configured
  *          - ERROR: RTC Time register is not configured
  */
ErrorStatus LL_RTC_TIME_Init(RTC_TypeDef *RTCx, uint32_t RTC_Format, LL_RTC_TimeTypeDef *RTC_TimeStruct)
{
 8002090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002092:	b089      	sub	sp, #36	; 0x24
 8002094:	af02      	add	r7, sp, #8
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
  ErrorStatus status = ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));
  assert_param(IS_LL_RTC_FORMAT(RTC_Format));

  if (RTC_Format == LL_RTC_FORMAT_BIN)
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d109      	bne.n	80020ba <LL_RTC_TIME_Init+0x2a>
  {
    if (LL_RTC_GetHourFormat(RTCx) != LL_RTC_HOURFORMAT_24HOUR)
 80020a6:	68f8      	ldr	r0, [r7, #12]
 80020a8:	f7ff fea3 	bl	8001df2 <LL_RTC_GetHourFormat>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d10c      	bne.n	80020cc <LL_RTC_TIME_Init+0x3c>
      assert_param(IS_LL_RTC_HOUR12(RTC_TimeStruct->Hours));
      assert_param(IS_LL_RTC_TIME_FORMAT(RTC_TimeStruct->TimeFormat));
    }
    else
    {
      RTC_TimeStruct->TimeFormat = 0x00U;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	e008      	b.n	80020cc <LL_RTC_TIME_Init+0x3c>
    assert_param(IS_LL_RTC_MINUTES(RTC_TimeStruct->Minutes));
    assert_param(IS_LL_RTC_SECONDS(RTC_TimeStruct->Seconds));
  }
  else
  {
    if (LL_RTC_GetHourFormat(RTCx) != LL_RTC_HOURFORMAT_24HOUR)
 80020ba:	68f8      	ldr	r0, [r7, #12]
 80020bc:	f7ff fe99 	bl	8001df2 <LL_RTC_GetHourFormat>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d102      	bne.n	80020cc <LL_RTC_TIME_Init+0x3c>
      assert_param(IS_LL_RTC_HOUR12(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Hours)));
      assert_param(IS_LL_RTC_TIME_FORMAT(RTC_TimeStruct->TimeFormat));
    }
    else
    {
      RTC_TimeStruct->TimeFormat = 0x00U;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]
    assert_param(IS_LL_RTC_MINUTES(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Minutes)));
    assert_param(IS_LL_RTC_SECONDS(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Seconds)));
  }

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
 80020cc:	68f8      	ldr	r0, [r7, #12]
 80020ce:	f7ff ff03 	bl	8001ed8 <LL_RTC_DisableWriteProtection>

  /* Set Initialization mode */
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 80020d2:	68f8      	ldr	r0, [r7, #12]
 80020d4:	f000 f926 	bl	8002324 <LL_RTC_EnterInitMode>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d073      	beq.n	80021c6 <LL_RTC_TIME_Init+0x136>
  {
    /* Check the input parameters format */
    if (RTC_Format != LL_RTC_FORMAT_BIN)
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d00f      	beq.n	8002104 <LL_RTC_TIME_Init+0x74>
    {
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, RTC_TimeStruct->Hours,
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6819      	ldr	r1, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	791b      	ldrb	r3, [r3, #4]
 80020ec:	461a      	mov	r2, r3
                         RTC_TimeStruct->Minutes, RTC_TimeStruct->Seconds);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	795b      	ldrb	r3, [r3, #5]
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, RTC_TimeStruct->Hours,
 80020f2:	4618      	mov	r0, r3
                         RTC_TimeStruct->Minutes, RTC_TimeStruct->Seconds);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	799b      	ldrb	r3, [r3, #6]
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, RTC_TimeStruct->Hours,
 80020f8:	9300      	str	r3, [sp, #0]
 80020fa:	4603      	mov	r3, r0
 80020fc:	68f8      	ldr	r0, [r7, #12]
 80020fe:	f7ff fefb 	bl	8001ef8 <LL_RTC_TIME_Config>
 8002102:	e04f      	b.n	80021a4 <LL_RTC_TIME_Init+0x114>
    }
    else
    {
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681c      	ldr	r4, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	791b      	ldrb	r3, [r3, #4]
 800210c:	4a32      	ldr	r2, [pc, #200]	; (80021d8 <LL_RTC_TIME_Init+0x148>)
 800210e:	fba2 2303 	umull	r2, r3, r2, r3
 8002112:	08db      	lsrs	r3, r3, #3
 8002114:	b2db      	uxtb	r3, r3
 8002116:	011b      	lsls	r3, r3, #4
 8002118:	b2d8      	uxtb	r0, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	791a      	ldrb	r2, [r3, #4]
 800211e:	4b2e      	ldr	r3, [pc, #184]	; (80021d8 <LL_RTC_TIME_Init+0x148>)
 8002120:	fba3 1302 	umull	r1, r3, r3, r2
 8002124:	08d9      	lsrs	r1, r3, #3
 8002126:	460b      	mov	r3, r1
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	440b      	add	r3, r1
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	b2db      	uxtb	r3, r3
 8002132:	4303      	orrs	r3, r0
 8002134:	b2db      	uxtb	r3, r3
 8002136:	461d      	mov	r5, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Minutes),
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	795b      	ldrb	r3, [r3, #5]
 800213c:	4a26      	ldr	r2, [pc, #152]	; (80021d8 <LL_RTC_TIME_Init+0x148>)
 800213e:	fba2 2303 	umull	r2, r3, r2, r3
 8002142:	08db      	lsrs	r3, r3, #3
 8002144:	b2db      	uxtb	r3, r3
 8002146:	011b      	lsls	r3, r3, #4
 8002148:	b2d8      	uxtb	r0, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	795a      	ldrb	r2, [r3, #5]
 800214e:	4b22      	ldr	r3, [pc, #136]	; (80021d8 <LL_RTC_TIME_Init+0x148>)
 8002150:	fba3 1302 	umull	r1, r3, r3, r2
 8002154:	08d9      	lsrs	r1, r3, #3
 8002156:	460b      	mov	r3, r1
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	440b      	add	r3, r1
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	b2db      	uxtb	r3, r3
 8002162:	4303      	orrs	r3, r0
 8002164:	b2db      	uxtb	r3, r3
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 8002166:	461e      	mov	r6, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Seconds));
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	799b      	ldrb	r3, [r3, #6]
 800216c:	4a1a      	ldr	r2, [pc, #104]	; (80021d8 <LL_RTC_TIME_Init+0x148>)
 800216e:	fba2 2303 	umull	r2, r3, r2, r3
 8002172:	08db      	lsrs	r3, r3, #3
 8002174:	b2db      	uxtb	r3, r3
 8002176:	011b      	lsls	r3, r3, #4
 8002178:	b2d8      	uxtb	r0, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	799a      	ldrb	r2, [r3, #6]
 800217e:	4b16      	ldr	r3, [pc, #88]	; (80021d8 <LL_RTC_TIME_Init+0x148>)
 8002180:	fba3 1302 	umull	r1, r3, r3, r2
 8002184:	08d9      	lsrs	r1, r3, #3
 8002186:	460b      	mov	r3, r1
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	440b      	add	r3, r1
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	b2db      	uxtb	r3, r3
 8002192:	4303      	orrs	r3, r0
 8002194:	b2db      	uxtb	r3, r3
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 8002196:	9300      	str	r3, [sp, #0]
 8002198:	4633      	mov	r3, r6
 800219a:	462a      	mov	r2, r5
 800219c:	4621      	mov	r1, r4
 800219e:	68f8      	ldr	r0, [r7, #12]
 80021a0:	f7ff feaa 	bl	8001ef8 <LL_RTC_TIME_Config>
    }

    /* Exit Initialization mode */
    LL_RTC_DisableInitMode(RTCx);
 80021a4:	68f8      	ldr	r0, [r7, #12]
 80021a6:	f7ff fe40 	bl	8001e2a <LL_RTC_DisableInitMode>

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if (LL_RTC_IsShadowRegBypassEnabled(RTCx) == 0U)
 80021aa:	68f8      	ldr	r0, [r7, #12]
 80021ac:	f7ff fe4b 	bl	8001e46 <LL_RTC_IsShadowRegBypassEnabled>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d105      	bne.n	80021c2 <LL_RTC_TIME_Init+0x132>
    {
      status = LL_RTC_WaitForSynchro(RTCx);
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f000 f8e9 	bl	800238e <LL_RTC_WaitForSynchro>
 80021bc:	4603      	mov	r3, r0
 80021be:	75fb      	strb	r3, [r7, #23]
 80021c0:	e001      	b.n	80021c6 <LL_RTC_TIME_Init+0x136>
    }
    else
    {
      status = SUCCESS;
 80021c2:	2300      	movs	r3, #0
 80021c4:	75fb      	strb	r3, [r7, #23]
    }
  }
  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);
 80021c6:	68f8      	ldr	r0, [r7, #12]
 80021c8:	f7ff fe79 	bl	8001ebe <LL_RTC_EnableWriteProtection>

  return status;
 80021cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	371c      	adds	r7, #28
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021d6:	bf00      	nop
 80021d8:	cccccccd 	.word	0xcccccccd

080021dc <LL_RTC_DATE_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Day register is configured
  *          - ERROR: RTC Day register is not configured
  */
ErrorStatus LL_RTC_DATE_Init(RTC_TypeDef *RTCx, uint32_t RTC_Format, LL_RTC_DateTypeDef *RTC_DateStruct)
{
 80021dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021de:	b089      	sub	sp, #36	; 0x24
 80021e0:	af02      	add	r7, sp, #8
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
  ErrorStatus status = ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));
  assert_param(IS_LL_RTC_FORMAT(RTC_Format));

  if ((RTC_Format == LL_RTC_FORMAT_BIN) && ((RTC_DateStruct->Month & 0x10U) == 0x10U))
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d10e      	bne.n	8002210 <LL_RTC_DATE_Init+0x34>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	785b      	ldrb	r3, [r3, #1]
 80021f6:	f003 0310 	and.w	r3, r3, #16
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d008      	beq.n	8002210 <LL_RTC_DATE_Init+0x34>
  {
    RTC_DateStruct->Month = (RTC_DateStruct->Month & (uint32_t)~(0x10U)) + 0x0AU;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	785b      	ldrb	r3, [r3, #1]
 8002202:	f023 0310 	bic.w	r3, r3, #16
 8002206:	b2db      	uxtb	r3, r3
 8002208:	330a      	adds	r3, #10
 800220a:	b2da      	uxtb	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	705a      	strb	r2, [r3, #1]
    assert_param(IS_LL_RTC_DAY(__LL_RTC_CONVERT_BCD2BIN(RTC_DateStruct->Day)));
  }
  assert_param(IS_LL_RTC_WEEKDAY(RTC_DateStruct->WeekDay));

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
 8002210:	68f8      	ldr	r0, [r7, #12]
 8002212:	f7ff fe61 	bl	8001ed8 <LL_RTC_DisableWriteProtection>

  /* Set Initialization mode */
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8002216:	68f8      	ldr	r0, [r7, #12]
 8002218:	f000 f884 	bl	8002324 <LL_RTC_EnterInitMode>
 800221c:	4603      	mov	r3, r0
 800221e:	2b01      	cmp	r3, #1
 8002220:	d075      	beq.n	800230e <LL_RTC_DATE_Init+0x132>
  {
    /* Check the input parameters format */
    if (RTC_Format != LL_RTC_FORMAT_BIN)
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d010      	beq.n	800224a <LL_RTC_DATE_Init+0x6e>
    {
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, RTC_DateStruct->Day, RTC_DateStruct->Month, RTC_DateStruct->Year);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	4619      	mov	r1, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	789b      	ldrb	r3, [r3, #2]
 8002232:	461a      	mov	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	785b      	ldrb	r3, [r3, #1]
 8002238:	4618      	mov	r0, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	78db      	ldrb	r3, [r3, #3]
 800223e:	9300      	str	r3, [sp, #0]
 8002240:	4603      	mov	r3, r0
 8002242:	68f8      	ldr	r0, [r7, #12]
 8002244:	f7ff fe80 	bl	8001f48 <LL_RTC_DATE_Config>
 8002248:	e050      	b.n	80022ec <LL_RTC_DATE_Init+0x110>
    }
    else
    {
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	461c      	mov	r4, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	789b      	ldrb	r3, [r3, #2]
 8002254:	4a32      	ldr	r2, [pc, #200]	; (8002320 <LL_RTC_DATE_Init+0x144>)
 8002256:	fba2 2303 	umull	r2, r3, r2, r3
 800225a:	08db      	lsrs	r3, r3, #3
 800225c:	b2db      	uxtb	r3, r3
 800225e:	011b      	lsls	r3, r3, #4
 8002260:	b2d8      	uxtb	r0, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	789a      	ldrb	r2, [r3, #2]
 8002266:	4b2e      	ldr	r3, [pc, #184]	; (8002320 <LL_RTC_DATE_Init+0x144>)
 8002268:	fba3 1302 	umull	r1, r3, r3, r2
 800226c:	08d9      	lsrs	r1, r3, #3
 800226e:	460b      	mov	r3, r1
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	440b      	add	r3, r1
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	b2db      	uxtb	r3, r3
 800227a:	4303      	orrs	r3, r0
 800227c:	b2db      	uxtb	r3, r3
 800227e:	461d      	mov	r5, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Month), __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Year));
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	785b      	ldrb	r3, [r3, #1]
 8002284:	4a26      	ldr	r2, [pc, #152]	; (8002320 <LL_RTC_DATE_Init+0x144>)
 8002286:	fba2 2303 	umull	r2, r3, r2, r3
 800228a:	08db      	lsrs	r3, r3, #3
 800228c:	b2db      	uxtb	r3, r3
 800228e:	011b      	lsls	r3, r3, #4
 8002290:	b2d8      	uxtb	r0, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	785a      	ldrb	r2, [r3, #1]
 8002296:	4b22      	ldr	r3, [pc, #136]	; (8002320 <LL_RTC_DATE_Init+0x144>)
 8002298:	fba3 1302 	umull	r1, r3, r3, r2
 800229c:	08d9      	lsrs	r1, r3, #3
 800229e:	460b      	mov	r3, r1
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	440b      	add	r3, r1
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	4303      	orrs	r3, r0
 80022ac:	b2db      	uxtb	r3, r3
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 80022ae:	461e      	mov	r6, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Month), __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Year));
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	78db      	ldrb	r3, [r3, #3]
 80022b4:	4a1a      	ldr	r2, [pc, #104]	; (8002320 <LL_RTC_DATE_Init+0x144>)
 80022b6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ba:	08db      	lsrs	r3, r3, #3
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	011b      	lsls	r3, r3, #4
 80022c0:	b2d8      	uxtb	r0, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	78da      	ldrb	r2, [r3, #3]
 80022c6:	4b16      	ldr	r3, [pc, #88]	; (8002320 <LL_RTC_DATE_Init+0x144>)
 80022c8:	fba3 1302 	umull	r1, r3, r3, r2
 80022cc:	08d9      	lsrs	r1, r3, #3
 80022ce:	460b      	mov	r3, r1
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	440b      	add	r3, r1
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	4303      	orrs	r3, r0
 80022dc:	b2db      	uxtb	r3, r3
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 80022de:	9300      	str	r3, [sp, #0]
 80022e0:	4633      	mov	r3, r6
 80022e2:	462a      	mov	r2, r5
 80022e4:	4621      	mov	r1, r4
 80022e6:	68f8      	ldr	r0, [r7, #12]
 80022e8:	f7ff fe2e 	bl	8001f48 <LL_RTC_DATE_Config>
    }

    /* Exit Initialization mode */
    LL_RTC_DisableInitMode(RTCx);
 80022ec:	68f8      	ldr	r0, [r7, #12]
 80022ee:	f7ff fd9c 	bl	8001e2a <LL_RTC_DisableInitMode>

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if (LL_RTC_IsShadowRegBypassEnabled(RTCx) == 0U)
 80022f2:	68f8      	ldr	r0, [r7, #12]
 80022f4:	f7ff fda7 	bl	8001e46 <LL_RTC_IsShadowRegBypassEnabled>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d105      	bne.n	800230a <LL_RTC_DATE_Init+0x12e>
    {
      status = LL_RTC_WaitForSynchro(RTCx);
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	f000 f845 	bl	800238e <LL_RTC_WaitForSynchro>
 8002304:	4603      	mov	r3, r0
 8002306:	75fb      	strb	r3, [r7, #23]
 8002308:	e001      	b.n	800230e <LL_RTC_DATE_Init+0x132>
    }
    else
    {
      status = SUCCESS;
 800230a:	2300      	movs	r3, #0
 800230c:	75fb      	strb	r3, [r7, #23]
    }
  }
  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);
 800230e:	68f8      	ldr	r0, [r7, #12]
 8002310:	f7ff fdd5 	bl	8001ebe <LL_RTC_EnableWriteProtection>

  return status;
 8002314:	7dfb      	ldrb	r3, [r7, #23]
}
 8002316:	4618      	mov	r0, r3
 8002318:	371c      	adds	r7, #28
 800231a:	46bd      	mov	sp, r7
 800231c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800231e:	bf00      	nop
 8002320:	cccccccd 	.word	0xcccccccd

08002324 <LL_RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode
  */
ErrorStatus LL_RTC_EnterInitMode(RTC_TypeDef *RTCx)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  __IO uint32_t timeout = RTC_INITMODE_TIMEOUT;
 800232c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002330:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = SUCCESS;
 8002332:	2300      	movs	r3, #0
 8002334:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp = 0U;
 8002336:	2300      	movs	r3, #0
 8002338:	613b      	str	r3, [r7, #16]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Check if the Initialization mode is set */
  if (LL_RTC_IsActiveFlag_INIT(RTCx) == 0U)
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f7ff fe2c 	bl	8001f98 <LL_RTC_IsActiveFlag_INIT>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d11e      	bne.n	8002384 <LL_RTC_EnterInitMode+0x60>
  {
    /* Set the Initialization mode */
    LL_RTC_EnableInitMode(RTCx);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f7ff fd61 	bl	8001e0e <LL_RTC_EnableInitMode>

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f7ff fe23 	bl	8001f98 <LL_RTC_IsActiveFlag_INIT>
 8002352:	6138      	str	r0, [r7, #16]
    while ((timeout != 0U) && (tmp != 1U))
 8002354:	e010      	b.n	8002378 <LL_RTC_EnterInitMode+0x54>
    {
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8002356:	f7ff fe57 	bl	8002008 <LL_SYSTICK_IsActiveCounterFlag>
 800235a:	4603      	mov	r3, r0
 800235c:	2b01      	cmp	r3, #1
 800235e:	d102      	bne.n	8002366 <LL_RTC_EnterInitMode+0x42>
      {
        timeout --;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	3b01      	subs	r3, #1
 8002364:	60fb      	str	r3, [r7, #12]
      }
      tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f7ff fe16 	bl	8001f98 <LL_RTC_IsActiveFlag_INIT>
 800236c:	6138      	str	r0, [r7, #16]
      if (timeout == 0U)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d101      	bne.n	8002378 <LL_RTC_EnterInitMode+0x54>
      {
        status = ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	75fb      	strb	r3, [r7, #23]
    while ((timeout != 0U) && (tmp != 1U))
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d002      	beq.n	8002384 <LL_RTC_EnterInitMode+0x60>
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d1e8      	bne.n	8002356 <LL_RTC_EnterInitMode+0x32>
      }
    }
  }
  return status;
 8002384:	7dfb      	ldrb	r3, [r7, #23]
}
 8002386:	4618      	mov	r0, r3
 8002388:	3718      	adds	r7, #24
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <LL_RTC_WaitForSynchro>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus LL_RTC_WaitForSynchro(RTC_TypeDef *RTCx)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b086      	sub	sp, #24
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
  __IO uint32_t timeout = RTC_SYNCHRO_TIMEOUT;
 8002396:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800239a:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = SUCCESS;
 800239c:	2300      	movs	r3, #0
 800239e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp = 0U;
 80023a0:	2300      	movs	r3, #0
 80023a2:	613b      	str	r3, [r7, #16]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Clear RSF flag */
  LL_RTC_ClearFlag_RS(RTCx);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f7ff fe1d 	bl	8001fe4 <LL_RTC_ClearFlag_RS>

  /* Wait the registers to be synchronised */
  tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f7ff fe07 	bl	8001fbe <LL_RTC_IsActiveFlag_RS>
 80023b0:	6138      	str	r0, [r7, #16]
  while ((timeout != 0U) && (tmp != 0U))
 80023b2:	e010      	b.n	80023d6 <LL_RTC_WaitForSynchro+0x48>
  {
    if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 80023b4:	f7ff fe28 	bl	8002008 <LL_SYSTICK_IsActiveCounterFlag>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d102      	bne.n	80023c4 <LL_RTC_WaitForSynchro+0x36>
    {
      timeout--;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	3b01      	subs	r3, #1
 80023c2:	60fb      	str	r3, [r7, #12]
    }
    tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f7ff fdfa 	bl	8001fbe <LL_RTC_IsActiveFlag_RS>
 80023ca:	6138      	str	r0, [r7, #16]
    if (timeout == 0U)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <LL_RTC_WaitForSynchro+0x48>
    {
      status = ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	75fb      	strb	r3, [r7, #23]
  while ((timeout != 0U) && (tmp != 0U))
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d002      	beq.n	80023e2 <LL_RTC_WaitForSynchro+0x54>
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1e8      	bne.n	80023b4 <LL_RTC_WaitForSynchro+0x26>
    }
  }

  if (status != ERROR)
 80023e2:	7dfb      	ldrb	r3, [r7, #23]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d01e      	beq.n	8002426 <LL_RTC_WaitForSynchro+0x98>
  {
    timeout = RTC_SYNCHRO_TIMEOUT;
 80023e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023ec:	60fb      	str	r3, [r7, #12]
    tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f7ff fde5 	bl	8001fbe <LL_RTC_IsActiveFlag_RS>
 80023f4:	6138      	str	r0, [r7, #16]
    while ((timeout != 0U) && (tmp != 1U))
 80023f6:	e010      	b.n	800241a <LL_RTC_WaitForSynchro+0x8c>
    {
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 80023f8:	f7ff fe06 	bl	8002008 <LL_SYSTICK_IsActiveCounterFlag>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d102      	bne.n	8002408 <LL_RTC_WaitForSynchro+0x7a>
      {
        timeout--;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	3b01      	subs	r3, #1
 8002406:	60fb      	str	r3, [r7, #12]
      }
      tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f7ff fdd8 	bl	8001fbe <LL_RTC_IsActiveFlag_RS>
 800240e:	6138      	str	r0, [r7, #16]
      if (timeout == 0U)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <LL_RTC_WaitForSynchro+0x8c>
      {
        status = ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	75fb      	strb	r3, [r7, #23]
    while ((timeout != 0U) && (tmp != 1U))
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d002      	beq.n	8002426 <LL_RTC_WaitForSynchro+0x98>
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d1e8      	bne.n	80023f8 <LL_RTC_WaitForSynchro+0x6a>
      }
    }
  }

  return (status);
 8002426:	7dfb      	ldrb	r3, [r7, #23]
}
 8002428:	4618      	mov	r0, r3
 800242a:	3718      	adds	r7, #24
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <LL_SPI_IsEnabled>:
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002440:	2b40      	cmp	r3, #64	; 0x40
 8002442:	d101      	bne.n	8002448 <LL_SPI_IsEnabled+0x18>
 8002444:	2301      	movs	r3, #1
 8002446:	e000      	b.n	800244a <LL_SPI_IsEnabled+0x1a>
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr

08002456 <LL_SPI_SetRxFIFOThreshold>:
{
 8002456:	b480      	push	{r7}
 8002458:	b083      	sub	sp, #12
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
 800245e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	431a      	orrs	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	605a      	str	r2, [r3, #4]
}
 8002470:	bf00      	nop
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <LL_SPI_SetCRCPolynomial>:
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	b29b      	uxth	r3, r3
 800248a:	461a      	mov	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	611a      	str	r2, [r3, #16]
}
 8002490:	bf00      	nop
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f7ff ffc0 	bl	8002430 <LL_SPI_IsEnabled>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d145      	bne.n	8002542 <LL_SPI_Init+0xa6>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024be:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	6811      	ldr	r1, [r2, #0]
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	6852      	ldr	r2, [r2, #4]
 80024ca:	4311      	orrs	r1, r2
 80024cc:	683a      	ldr	r2, [r7, #0]
 80024ce:	68d2      	ldr	r2, [r2, #12]
 80024d0:	4311      	orrs	r1, r2
 80024d2:	683a      	ldr	r2, [r7, #0]
 80024d4:	6912      	ldr	r2, [r2, #16]
 80024d6:	4311      	orrs	r1, r2
 80024d8:	683a      	ldr	r2, [r7, #0]
 80024da:	6952      	ldr	r2, [r2, #20]
 80024dc:	4311      	orrs	r1, r2
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	6992      	ldr	r2, [r2, #24]
 80024e2:	4311      	orrs	r1, r2
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	69d2      	ldr	r2, [r2, #28]
 80024e8:	4311      	orrs	r1, r2
 80024ea:	683a      	ldr	r2, [r7, #0]
 80024ec:	6a12      	ldr	r2, [r2, #32]
 80024ee:	430a      	orrs	r2, r1
 80024f0:	431a      	orrs	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80024fe:	f023 0304 	bic.w	r3, r3, #4
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	6891      	ldr	r1, [r2, #8]
 8002506:	683a      	ldr	r2, [r7, #0]
 8002508:	6952      	ldr	r2, [r2, #20]
 800250a:	0c12      	lsrs	r2, r2, #16
 800250c:	430a      	orrs	r2, r1
 800250e:	431a      	orrs	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	605a      	str	r2, [r3, #4]
               SPI_CR2_DS | SPI_CR2_SSOE,
               SPI_InitStruct->DataWidth | (SPI_InitStruct->NSS >> 16U));

    /* Set Rx FIFO to Quarter (1 Byte) in case of 8 Bits mode. No DataPacking by default */
    if (SPI_InitStruct->DataWidth < LL_SPI_DATAWIDTH_9BIT)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800251c:	d204      	bcs.n	8002528 <LL_SPI_Init+0x8c>
    {
      LL_SPI_SetRxFIFOThreshold(SPIx, LL_SPI_RX_FIFO_TH_QUARTER);
 800251e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f7ff ff97 	bl	8002456 <LL_SPI_SetRxFIFOThreshold>

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	6a1b      	ldr	r3, [r3, #32]
 800252c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002530:	d105      	bne.n	800253e <LL_SPI_Init+0xa2>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002536:	4619      	mov	r1, r3
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f7ff ff9f 	bl	800247c <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 800253e:	2300      	movs	r3, #0
 8002540:	73fb      	strb	r3, [r7, #15]

#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2S_SUPPORT */
  return status;
 8002542:	7bfb      	ldrb	r3, [r7, #15]
}
 8002544:	4618      	mov	r0, r3
 8002546:	3710      	adds	r7, #16
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002556:	4909      	ldr	r1, [pc, #36]	; (800257c <LL_InitTick+0x30>)
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002560:	3b01      	subs	r3, #1
 8002562:	604b      	str	r3, [r1, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002564:	4b05      	ldr	r3, [pc, #20]	; (800257c <LL_InitTick+0x30>)
 8002566:	2200      	movs	r2, #0
 8002568:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800256a:	4b04      	ldr	r3, [pc, #16]	; (800257c <LL_InitTick+0x30>)
 800256c:	2205      	movs	r2, #5
 800256e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002570:	bf00      	nop
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr
 800257c:	e000e010 	.word	0xe000e010

08002580 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002588:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f7ff ffdd 	bl	800254c <LL_InitTick>
}
 8002592:	bf00      	nop
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
	...

0800259c <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80025a4:	4b0e      	ldr	r3, [pc, #56]	; (80025e0 <LL_mDelay+0x44>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80025aa:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b2:	d00c      	beq.n	80025ce <LL_mDelay+0x32>
  {
    Delay++;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	3301      	adds	r3, #1
 80025b8:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 80025ba:	e008      	b.n	80025ce <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80025bc:	4b08      	ldr	r3, [pc, #32]	; (80025e0 <LL_mDelay+0x44>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d002      	beq.n	80025ce <LL_mDelay+0x32>
    {
      Delay--;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3b01      	subs	r3, #1
 80025cc:	607b      	str	r3, [r7, #4]
  while (Delay)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1f3      	bne.n	80025bc <LL_mDelay+0x20>
    }
  }
}
 80025d4:	bf00      	nop
 80025d6:	3714      	adds	r7, #20
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr
 80025e0:	e000e010 	.word	0xe000e010

080025e4 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80025ec:	4a04      	ldr	r2, [pc, #16]	; (8002600 <LL_SetSystemCoreClock+0x1c>)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6013      	str	r3, [r2, #0]
}
 80025f2:	bf00      	nop
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	20000000 	.word	0x20000000

08002604 <EDO_0>:

// Estado inicial
Estados EA = E0;

// Funciones por estado
void EDO_0(int btnU, int btnD){
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
	// Codigo de estado inicio
	rgb_rojo();
 800260e:	f000 fbf3 	bl	8002df8 <rgb_rojo>
	// Codigo de estado fin
	// Cambio de estado
	if(btnU == 1 && btnU != btnUa && btnD == 0)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d10d      	bne.n	8002634 <EDO_0+0x30>
 8002618:	4b14      	ldr	r3, [pc, #80]	; (800266c <EDO_0+0x68>)
 800261a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800261e:	461a      	mov	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	429a      	cmp	r2, r3
 8002624:	d006      	beq.n	8002634 <EDO_0+0x30>
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d103      	bne.n	8002634 <EDO_0+0x30>
		EA = E1;
 800262c:	4b10      	ldr	r3, [pc, #64]	; (8002670 <EDO_0+0x6c>)
 800262e:	2201      	movs	r2, #1
 8002630:	701a      	strb	r2, [r3, #0]
 8002632:	e00f      	b.n	8002654 <EDO_0+0x50>
	else if(btnD == 1 && btnD != btnDa && btnU == 0)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d10c      	bne.n	8002654 <EDO_0+0x50>
 800263a:	4b0e      	ldr	r3, [pc, #56]	; (8002674 <EDO_0+0x70>)
 800263c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002640:	461a      	mov	r2, r3
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	429a      	cmp	r2, r3
 8002646:	d005      	beq.n	8002654 <EDO_0+0x50>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d102      	bne.n	8002654 <EDO_0+0x50>
		EA = E6;
 800264e:	4b08      	ldr	r3, [pc, #32]	; (8002670 <EDO_0+0x6c>)
 8002650:	2206      	movs	r2, #6
 8002652:	701a      	strb	r2, [r3, #0]
	btnUa = btnU;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	b21a      	sxth	r2, r3
 8002658:	4b04      	ldr	r3, [pc, #16]	; (800266c <EDO_0+0x68>)
 800265a:	801a      	strh	r2, [r3, #0]
	btnDa = btnD;
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	b21a      	sxth	r2, r3
 8002660:	4b04      	ldr	r3, [pc, #16]	; (8002674 <EDO_0+0x70>)
 8002662:	801a      	strh	r2, [r3, #0]
}
 8002664:	bf00      	nop
 8002666:	3708      	adds	r7, #8
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	2000055c 	.word	0x2000055c
 8002670:	20000556 	.word	0x20000556
 8002674:	2000055a 	.word	0x2000055a

08002678 <EDO_1>:

void EDO_1(int btnU, int btnD){
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
	// Codigo de estado inicio
	rgb_verde();
 8002682:	f000 fbc6 	bl	8002e12 <rgb_verde>
	// Codigo de estado fin
	// Cambio de estado
	if(btnU == 1 && btnU != btnUa && btnD == 0)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d10d      	bne.n	80026a8 <EDO_1+0x30>
 800268c:	4b14      	ldr	r3, [pc, #80]	; (80026e0 <EDO_1+0x68>)
 800268e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002692:	461a      	mov	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	429a      	cmp	r2, r3
 8002698:	d006      	beq.n	80026a8 <EDO_1+0x30>
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d103      	bne.n	80026a8 <EDO_1+0x30>
		EA = E2;
 80026a0:	4b10      	ldr	r3, [pc, #64]	; (80026e4 <EDO_1+0x6c>)
 80026a2:	2202      	movs	r2, #2
 80026a4:	701a      	strb	r2, [r3, #0]
 80026a6:	e00f      	b.n	80026c8 <EDO_1+0x50>
	else if(btnD == 1 && btnD != btnDa && btnU == 0)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d10c      	bne.n	80026c8 <EDO_1+0x50>
 80026ae:	4b0e      	ldr	r3, [pc, #56]	; (80026e8 <EDO_1+0x70>)
 80026b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026b4:	461a      	mov	r2, r3
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d005      	beq.n	80026c8 <EDO_1+0x50>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d102      	bne.n	80026c8 <EDO_1+0x50>
		EA = E0;
 80026c2:	4b08      	ldr	r3, [pc, #32]	; (80026e4 <EDO_1+0x6c>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	701a      	strb	r2, [r3, #0]
	btnUa = btnU;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	b21a      	sxth	r2, r3
 80026cc:	4b04      	ldr	r3, [pc, #16]	; (80026e0 <EDO_1+0x68>)
 80026ce:	801a      	strh	r2, [r3, #0]
	btnDa = btnD;
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	b21a      	sxth	r2, r3
 80026d4:	4b04      	ldr	r3, [pc, #16]	; (80026e8 <EDO_1+0x70>)
 80026d6:	801a      	strh	r2, [r3, #0]
}
 80026d8:	bf00      	nop
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	2000055c 	.word	0x2000055c
 80026e4:	20000556 	.word	0x20000556
 80026e8:	2000055a 	.word	0x2000055a

080026ec <EDO_2>:

void EDO_2(int btnU, int btnD){
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
	// Codigo de estado inicio
	rgb_azul();
 80026f6:	f000 fb99 	bl	8002e2c <rgb_azul>
	// Codigo de estado fin
	// Cambio de estado
	if(btnU == 1 && btnU != btnUa && btnD == 0)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d10d      	bne.n	800271c <EDO_2+0x30>
 8002700:	4b14      	ldr	r3, [pc, #80]	; (8002754 <EDO_2+0x68>)
 8002702:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002706:	461a      	mov	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	429a      	cmp	r2, r3
 800270c:	d006      	beq.n	800271c <EDO_2+0x30>
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d103      	bne.n	800271c <EDO_2+0x30>
		EA = E3;
 8002714:	4b10      	ldr	r3, [pc, #64]	; (8002758 <EDO_2+0x6c>)
 8002716:	2203      	movs	r2, #3
 8002718:	701a      	strb	r2, [r3, #0]
 800271a:	e00f      	b.n	800273c <EDO_2+0x50>
	else if(btnD == 1 && btnD != btnDa && btnU == 0)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d10c      	bne.n	800273c <EDO_2+0x50>
 8002722:	4b0e      	ldr	r3, [pc, #56]	; (800275c <EDO_2+0x70>)
 8002724:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002728:	461a      	mov	r2, r3
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	429a      	cmp	r2, r3
 800272e:	d005      	beq.n	800273c <EDO_2+0x50>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d102      	bne.n	800273c <EDO_2+0x50>
		EA = E1;
 8002736:	4b08      	ldr	r3, [pc, #32]	; (8002758 <EDO_2+0x6c>)
 8002738:	2201      	movs	r2, #1
 800273a:	701a      	strb	r2, [r3, #0]
	btnUa = btnU;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	b21a      	sxth	r2, r3
 8002740:	4b04      	ldr	r3, [pc, #16]	; (8002754 <EDO_2+0x68>)
 8002742:	801a      	strh	r2, [r3, #0]
	btnDa = btnD;
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	b21a      	sxth	r2, r3
 8002748:	4b04      	ldr	r3, [pc, #16]	; (800275c <EDO_2+0x70>)
 800274a:	801a      	strh	r2, [r3, #0]
}
 800274c:	bf00      	nop
 800274e:	3708      	adds	r7, #8
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	2000055c 	.word	0x2000055c
 8002758:	20000556 	.word	0x20000556
 800275c:	2000055a 	.word	0x2000055a

08002760 <EDO_3>:

void EDO_3(int btnU, int btnD){
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
	// Codigo de estado inicio
	rgb_amarillo();
 800276a:	f000 fb6c 	bl	8002e46 <rgb_amarillo>
	// Codigo de estado fin
	// Cambio de estado
	if(btnU == 1 && btnU != btnUa && btnD == 0)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d10d      	bne.n	8002790 <EDO_3+0x30>
 8002774:	4b14      	ldr	r3, [pc, #80]	; (80027c8 <EDO_3+0x68>)
 8002776:	f9b3 3000 	ldrsh.w	r3, [r3]
 800277a:	461a      	mov	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	429a      	cmp	r2, r3
 8002780:	d006      	beq.n	8002790 <EDO_3+0x30>
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d103      	bne.n	8002790 <EDO_3+0x30>
		EA = E4;
 8002788:	4b10      	ldr	r3, [pc, #64]	; (80027cc <EDO_3+0x6c>)
 800278a:	2204      	movs	r2, #4
 800278c:	701a      	strb	r2, [r3, #0]
 800278e:	e00f      	b.n	80027b0 <EDO_3+0x50>
	else if(btnD == 1 && btnD != btnDa && btnU == 0)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d10c      	bne.n	80027b0 <EDO_3+0x50>
 8002796:	4b0e      	ldr	r3, [pc, #56]	; (80027d0 <EDO_3+0x70>)
 8002798:	f9b3 3000 	ldrsh.w	r3, [r3]
 800279c:	461a      	mov	r2, r3
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d005      	beq.n	80027b0 <EDO_3+0x50>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d102      	bne.n	80027b0 <EDO_3+0x50>
		EA = E2;
 80027aa:	4b08      	ldr	r3, [pc, #32]	; (80027cc <EDO_3+0x6c>)
 80027ac:	2202      	movs	r2, #2
 80027ae:	701a      	strb	r2, [r3, #0]
	btnUa = btnU;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	b21a      	sxth	r2, r3
 80027b4:	4b04      	ldr	r3, [pc, #16]	; (80027c8 <EDO_3+0x68>)
 80027b6:	801a      	strh	r2, [r3, #0]
	btnDa = btnD;
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	b21a      	sxth	r2, r3
 80027bc:	4b04      	ldr	r3, [pc, #16]	; (80027d0 <EDO_3+0x70>)
 80027be:	801a      	strh	r2, [r3, #0]
}
 80027c0:	bf00      	nop
 80027c2:	3708      	adds	r7, #8
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	2000055c 	.word	0x2000055c
 80027cc:	20000556 	.word	0x20000556
 80027d0:	2000055a 	.word	0x2000055a

080027d4 <EDO_4>:

void EDO_4(int btnU, int btnD){
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
	// Codigo de estado inicio
	rgb_celeste();
 80027de:	f000 fb3f 	bl	8002e60 <rgb_celeste>
	// Codigo de estado fin
	// Cambio de estado
	if(btnU == 1 && btnU != btnUa && btnD == 0)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d10d      	bne.n	8002804 <EDO_4+0x30>
 80027e8:	4b14      	ldr	r3, [pc, #80]	; (800283c <EDO_4+0x68>)
 80027ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027ee:	461a      	mov	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d006      	beq.n	8002804 <EDO_4+0x30>
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d103      	bne.n	8002804 <EDO_4+0x30>
		EA = E5;
 80027fc:	4b10      	ldr	r3, [pc, #64]	; (8002840 <EDO_4+0x6c>)
 80027fe:	2205      	movs	r2, #5
 8002800:	701a      	strb	r2, [r3, #0]
 8002802:	e00f      	b.n	8002824 <EDO_4+0x50>
	else if(btnD == 1 && btnD != btnDa && btnU == 0)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	2b01      	cmp	r3, #1
 8002808:	d10c      	bne.n	8002824 <EDO_4+0x50>
 800280a:	4b0e      	ldr	r3, [pc, #56]	; (8002844 <EDO_4+0x70>)
 800280c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002810:	461a      	mov	r2, r3
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	429a      	cmp	r2, r3
 8002816:	d005      	beq.n	8002824 <EDO_4+0x50>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d102      	bne.n	8002824 <EDO_4+0x50>
		EA = E3;
 800281e:	4b08      	ldr	r3, [pc, #32]	; (8002840 <EDO_4+0x6c>)
 8002820:	2203      	movs	r2, #3
 8002822:	701a      	strb	r2, [r3, #0]
	btnUa = btnU;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	b21a      	sxth	r2, r3
 8002828:	4b04      	ldr	r3, [pc, #16]	; (800283c <EDO_4+0x68>)
 800282a:	801a      	strh	r2, [r3, #0]
	btnDa = btnD;
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	b21a      	sxth	r2, r3
 8002830:	4b04      	ldr	r3, [pc, #16]	; (8002844 <EDO_4+0x70>)
 8002832:	801a      	strh	r2, [r3, #0]
}
 8002834:	bf00      	nop
 8002836:	3708      	adds	r7, #8
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	2000055c 	.word	0x2000055c
 8002840:	20000556 	.word	0x20000556
 8002844:	2000055a 	.word	0x2000055a

08002848 <EDO_5>:

void EDO_5(int btnU, int btnD){
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
	// Codigo de estado inicio
	rgb_morado();
 8002852:	f000 fb12 	bl	8002e7a <rgb_morado>
	// Codigo de estado fin
	// Cambio de estado
	if(btnU == 1 && btnU != btnUa && btnD == 0)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d10d      	bne.n	8002878 <EDO_5+0x30>
 800285c:	4b14      	ldr	r3, [pc, #80]	; (80028b0 <EDO_5+0x68>)
 800285e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002862:	461a      	mov	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	429a      	cmp	r2, r3
 8002868:	d006      	beq.n	8002878 <EDO_5+0x30>
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d103      	bne.n	8002878 <EDO_5+0x30>
		EA = E6;
 8002870:	4b10      	ldr	r3, [pc, #64]	; (80028b4 <EDO_5+0x6c>)
 8002872:	2206      	movs	r2, #6
 8002874:	701a      	strb	r2, [r3, #0]
 8002876:	e00f      	b.n	8002898 <EDO_5+0x50>
	else if(btnD == 1 && btnD != btnDa && btnU == 0)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d10c      	bne.n	8002898 <EDO_5+0x50>
 800287e:	4b0e      	ldr	r3, [pc, #56]	; (80028b8 <EDO_5+0x70>)
 8002880:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002884:	461a      	mov	r2, r3
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	429a      	cmp	r2, r3
 800288a:	d005      	beq.n	8002898 <EDO_5+0x50>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d102      	bne.n	8002898 <EDO_5+0x50>
		EA = E4;
 8002892:	4b08      	ldr	r3, [pc, #32]	; (80028b4 <EDO_5+0x6c>)
 8002894:	2204      	movs	r2, #4
 8002896:	701a      	strb	r2, [r3, #0]
	btnUa = btnU;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	b21a      	sxth	r2, r3
 800289c:	4b04      	ldr	r3, [pc, #16]	; (80028b0 <EDO_5+0x68>)
 800289e:	801a      	strh	r2, [r3, #0]
	btnDa = btnD;
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	b21a      	sxth	r2, r3
 80028a4:	4b04      	ldr	r3, [pc, #16]	; (80028b8 <EDO_5+0x70>)
 80028a6:	801a      	strh	r2, [r3, #0]
}
 80028a8:	bf00      	nop
 80028aa:	3708      	adds	r7, #8
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	2000055c 	.word	0x2000055c
 80028b4:	20000556 	.word	0x20000556
 80028b8:	2000055a 	.word	0x2000055a

080028bc <EDO_6>:

void EDO_6(int btnU, int btnD){
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
	// Codigo de estado inicio
	rgb_blanco();
 80028c6:	f000 fae5 	bl	8002e94 <rgb_blanco>
	// Codigo de estado fin
	// Cambio de estado
	if(btnU == 1 && btnU != btnUa && btnD == 0)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d10d      	bne.n	80028ec <EDO_6+0x30>
 80028d0:	4b14      	ldr	r3, [pc, #80]	; (8002924 <EDO_6+0x68>)
 80028d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028d6:	461a      	mov	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d006      	beq.n	80028ec <EDO_6+0x30>
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d103      	bne.n	80028ec <EDO_6+0x30>
		EA = E0;
 80028e4:	4b10      	ldr	r3, [pc, #64]	; (8002928 <EDO_6+0x6c>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	701a      	strb	r2, [r3, #0]
 80028ea:	e00f      	b.n	800290c <EDO_6+0x50>
	else if(btnD == 1 && btnD != btnDa && btnU == 0)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d10c      	bne.n	800290c <EDO_6+0x50>
 80028f2:	4b0e      	ldr	r3, [pc, #56]	; (800292c <EDO_6+0x70>)
 80028f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028f8:	461a      	mov	r2, r3
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d005      	beq.n	800290c <EDO_6+0x50>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d102      	bne.n	800290c <EDO_6+0x50>
		EA = E5;
 8002906:	4b08      	ldr	r3, [pc, #32]	; (8002928 <EDO_6+0x6c>)
 8002908:	2205      	movs	r2, #5
 800290a:	701a      	strb	r2, [r3, #0]
	btnUa = btnU;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	b21a      	sxth	r2, r3
 8002910:	4b04      	ldr	r3, [pc, #16]	; (8002924 <EDO_6+0x68>)
 8002912:	801a      	strh	r2, [r3, #0]
	btnDa = btnD;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	b21a      	sxth	r2, r3
 8002918:	4b04      	ldr	r3, [pc, #16]	; (800292c <EDO_6+0x70>)
 800291a:	801a      	strh	r2, [r3, #0]
}
 800291c:	bf00      	nop
 800291e:	3708      	adds	r7, #8
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	2000055c 	.word	0x2000055c
 8002928:	20000556 	.word	0x20000556
 800292c:	2000055a 	.word	0x2000055a

08002930 <fsm>:
		{E4,EDO_4},
		{E5,EDO_5},
		{E6,EDO_6}
};

void fsm(short btnu, short btnd){
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	4603      	mov	r3, r0
 8002938:	460a      	mov	r2, r1
 800293a:	80fb      	strh	r3, [r7, #6]
 800293c:	4613      	mov	r3, r2
 800293e:	80bb      	strh	r3, [r7, #4]
	MDE[EA].func(btnu,btnd);
 8002940:	4b07      	ldr	r3, [pc, #28]	; (8002960 <fsm+0x30>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	4a07      	ldr	r2, [pc, #28]	; (8002964 <fsm+0x34>)
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	4413      	add	r3, r2
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002950:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002954:	4610      	mov	r0, r2
 8002956:	4798      	blx	r3
}
 8002958:	bf00      	nop
 800295a:	3708      	adds	r7, #8
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	20000556 	.word	0x20000556
 8002964:	20000004 	.word	0x20000004

08002968 <LL_GPIO_SetOutputPin>:
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	619a      	str	r2, [r3, #24]
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <LL_GPIO_ResetOutputPin>:
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <HAL_LCD_Init>:
uint8_t AlreadyEnterMenu=0;
uint8_t	ConfigurationStage=0;
uint8_t AlreadyEnterAlarmConfig=0;

void HAL_LCD_Init(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
	/* This function initialize the LCD, this function must be call first
	before performing any operation in the LCD, the used GPIOs were initialized in the main */

	/*Before starting sending information to the LCD,
	it is necessary to initialize the SPI communication*/
	MX_SPI1_Init();
 80029a4:	f7fe fe0c 	bl	80015c0 <MX_SPI1_Init>

	/*We need to make sure the LCD reaches 3.3V, therefore we make a delay of 1ms after reseting the LCD
	to start sending information*/
	HAL_LCD_Reset();
 80029a8:	f000 f822 	bl	80029f0 <HAL_LCD_Reset>
	LL_mDelay(1);
 80029ac:	2001      	movs	r0, #1
 80029ae:	f7ff fdf5 	bl	800259c <LL_mDelay>

	/*These commands are necessary to initialize the LCD, you can find
	them in the datasheet of the LCD NHD-C12832A1Z-FSW-FBW-3V3 or chip on glass ST7565R */

	/*We set the segment (columns) order to NORMAL*/
	HAL_LCD_Send_Command(CMD_ADC_SELECT(ADC_NORMAL));
 80029b2:	20a0      	movs	r0, #160	; 0xa0
 80029b4:	f000 f841 	bl	8002a3a <HAL_LCD_Send_Command>

	 /*TURNS OFF the display*/
	HAL_LCD_Send_Command(CMD_DISPLAY_ON_OFF(DISPLAY_OFF));
 80029b8:	20ae      	movs	r0, #174	; 0xae
 80029ba:	f000 f83e 	bl	8002a3a <HAL_LCD_Send_Command>

	/*Selects COM output scan direction to normal direction*/
	HAL_LCD_Send_Command(CMD_COM_DIRECTION(COM_DIRECTION_REVERSE));
 80029be:	20c8      	movs	r0, #200	; 0xc8
 80029c0:	f000 f83b 	bl	8002a3a <HAL_LCD_Send_Command>

	/*Sets the LCD drive voltage bias ratio to 1/9*/
	HAL_LCD_Send_Command(CMD_BIAS_RATIO(CMD_BIAS_19));
 80029c4:	20a2      	movs	r0, #162	; 0xa2
 80029c6:	f000 f838 	bl	8002a3a <HAL_LCD_Send_Command>

	/*Select internal power supply 111*/
	HAL_LCD_Send_Command(CMD_PWR_CONTROL(PWR_INTERNAL_SUPPLY));
 80029ca:	202f      	movs	r0, #47	; 0x2f
 80029cc:	f000 f835 	bl	8002a3a <HAL_LCD_Send_Command>

	/*Select internal resistor ratio 001 */
	HAL_LCD_Send_Command(CMD_RES_RATIO(RES_RATIO_35));
 80029d0:	2021      	movs	r0, #33	; 0x21
 80029d2:	f000 f832 	bl	8002a3a <HAL_LCD_Send_Command>

	/*Electronic volume mode  */
	HAL_LCD_Send_Command(CMD_ELEC_VOL_MODE);
 80029d6:	2081      	movs	r0, #129	; 0x81
 80029d8:	f000 f82f 	bl	8002a3a <HAL_LCD_Send_Command>

	/*SET electronic volume (contrast), please NOTE this value is different from the datasheet,
	the datasheet specifies to configure a 3F, however, the contrast is to high and we would have
	problems to see the configured pixel in further LCD configurations*/
	HAL_LCD_Send_Command(CMD_ELEC_VOL_SET_LOW);
 80029dc:	201f      	movs	r0, #31
 80029de:	f000 f82c 	bl	8002a3a <HAL_LCD_Send_Command>

	/* End of the initialization commands from datasheet, the following commands are just to prepare the
	 LCD before start implementing functions */

	/* With this command we want to set all the points in the LCD to work normal*/
	HAL_LCD_Send_Command(CMD_LCD_POINTS(LCD_POINTS_NORMAL));
 80029e2:	20a4      	movs	r0, #164	; 0xa4
 80029e4:	f000 f829 	bl	8002a3a <HAL_LCD_Send_Command>

	/*After initializating the LCD, it is necessary to clear all display because
	it could have information in RAM after it was turned off*/
	HAL_LCD_Clear();
 80029e8:	f000 f853 	bl	8002a92 <HAL_LCD_Clear>

	return;
 80029ec:	bf00      	nop
}
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <HAL_LCD_Reset>:
void HAL_LCD_Reset(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
	/*Pin PA6 is configured as RESET signal of LCD,
	when the reset signal is inactive, it is HIGH, if we want to reset the LCD
	, we reset the signal to LOW and release
	PA6   ------> LCD_RESET*/

	LL_GPIO_ResetOutputPin(LCD_RESET_GPIO_Port,LCD_RESET_Pin);
 80029f4:	2140      	movs	r1, #64	; 0x40
 80029f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029fa:	f7ff ffc3 	bl	8002984 <LL_GPIO_ResetOutputPin>
	LL_mDelay(1);
 80029fe:	2001      	movs	r0, #1
 8002a00:	f7ff fdcc 	bl	800259c <LL_mDelay>
	LL_GPIO_SetOutputPin(LCD_RESET_GPIO_Port,LCD_RESET_Pin);
 8002a04:	2140      	movs	r1, #64	; 0x40
 8002a06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a0a:	f7ff ffad 	bl	8002968 <LL_GPIO_SetOutputPin>

	return;
 8002a0e:	bf00      	nop
}
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <HAL_LCD_A0_Data>:

void HAL_LCD_A0_Data(void)
{
 8002a12:	b580      	push	{r7, lr}
 8002a14:	af00      	add	r7, sp, #0
	/*Pin PA8 is configured as A0 signal of LCD,
	when the A0 is HIGH, the information is a DATA
	PA8   ------> LCD_A0*/
	LL_GPIO_SetOutputPin(LCD_A0_GPIO_Port,LCD_A0_Pin);
 8002a16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a1e:	f7ff ffa3 	bl	8002968 <LL_GPIO_SetOutputPin>

	return;
 8002a22:	bf00      	nop
}
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <HAL_LCD_A0_Command>:
void HAL_LCD_A0_Command(void)
{
 8002a26:	b580      	push	{r7, lr}
 8002a28:	af00      	add	r7, sp, #0
	/*Pin PA8 is configured as A0 signal of LCD,
	when the A0 is LOW, the information is a COMMAND
	PA8   ------> LCD_A0*/
	LL_GPIO_ResetOutputPin(LCD_A0_GPIO_Port,LCD_A0_Pin);
 8002a2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a32:	f7ff ffa7 	bl	8002984 <LL_GPIO_ResetOutputPin>

	return;
 8002a36:	bf00      	nop
}
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <HAL_LCD_Send_Command>:

void HAL_LCD_Send_Command(uint8_t command)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b082      	sub	sp, #8
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	4603      	mov	r3, r0
 8002a42:	71fb      	strb	r3, [r7, #7]
	/*Function to send a command through SPI1, it configures automatically the A0=0
	therefore, it is a command. It enables CHIP SELECT signal and disables it after transmission is done */
	MX_SPI1_CS_Enable();
 8002a44:	f7fe fe46 	bl	80016d4 <MX_SPI1_CS_Enable>
	HAL_LCD_A0_Command();
 8002a48:	f7ff ffed 	bl	8002a26 <HAL_LCD_A0_Command>
	MX_SPI1_Send(command);
 8002a4c:	79fb      	ldrb	r3, [r7, #7]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7fe fe22 	bl	8001698 <MX_SPI1_Send>
	LL_mDelay(0.1);
 8002a54:	2000      	movs	r0, #0
 8002a56:	f7ff fda1 	bl	800259c <LL_mDelay>
	MX_SPI1_CS_Disable();
 8002a5a:	f7fe fe45 	bl	80016e8 <MX_SPI1_CS_Disable>

	return;
 8002a5e:	bf00      	nop
}
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <HAL_LCD_Send_Data>:

void HAL_LCD_Send_Data(uint8_t data)
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b082      	sub	sp, #8
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	71fb      	strb	r3, [r7, #7]
	/*Function to send a data through SPI1, it configures automatically the A0=1
	therefore, it is a data. It enables CHIP SELECT signal and disables it after transmission is done */
	MX_SPI1_CS_Enable();
 8002a70:	f7fe fe30 	bl	80016d4 <MX_SPI1_CS_Enable>
	HAL_LCD_A0_Data();
 8002a74:	f7ff ffcd 	bl	8002a12 <HAL_LCD_A0_Data>
	MX_SPI1_Send(data);
 8002a78:	79fb      	ldrb	r3, [r7, #7]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7fe fe0c 	bl	8001698 <MX_SPI1_Send>
	LL_mDelay(0.1);
 8002a80:	2000      	movs	r0, #0
 8002a82:	f7ff fd8b 	bl	800259c <LL_mDelay>
	MX_SPI1_CS_Disable();
 8002a86:	f7fe fe2f 	bl	80016e8 <MX_SPI1_CS_Disable>

	return;
 8002a8a:	bf00      	nop
}
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <HAL_LCD_Clear>:

void HAL_LCD_Clear(void)
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b082      	sub	sp, #8
 8002a96:	af00      	add	r7, sp, #0
	/*Function to clear ALL LCD, from page=0, column =0,
	to page = 3, column = 127, after clear, the cursor
	is set at page=0, column=0*/
	HAL_LCD_Send_Command(CMD_DISPLAY_ON_OFF(DISPLAY_OFF));
 8002a98:	20ae      	movs	r0, #174	; 0xae
 8002a9a:	f7ff ffce 	bl	8002a3a <HAL_LCD_Send_Command>
	for (uint8_t page=0 ; page <= MAX_PAGES ; page++)
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	71fb      	strb	r3, [r7, #7]
 8002aa2:	e014      	b.n	8002ace <HAL_LCD_Clear+0x3c>
	{

		HAL_LCD_Set_Position(0,page);
 8002aa4:	79fb      	ldrb	r3, [r7, #7]
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	2000      	movs	r0, #0
 8002aaa:	f000 f81e 	bl	8002aea <HAL_LCD_Set_Position>
		for(uint8_t column=0;column<= MAX_WIDHT ; column++)
 8002aae:	2300      	movs	r3, #0
 8002ab0:	71bb      	strb	r3, [r7, #6]
 8002ab2:	e005      	b.n	8002ac0 <HAL_LCD_Clear+0x2e>
		{
			HAL_LCD_Send_Data(ERASE_BYTE);
 8002ab4:	2000      	movs	r0, #0
 8002ab6:	f7ff ffd6 	bl	8002a66 <HAL_LCD_Send_Data>
		for(uint8_t column=0;column<= MAX_WIDHT ; column++)
 8002aba:	79bb      	ldrb	r3, [r7, #6]
 8002abc:	3301      	adds	r3, #1
 8002abe:	71bb      	strb	r3, [r7, #6]
 8002ac0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	daf5      	bge.n	8002ab4 <HAL_LCD_Clear+0x22>
	for (uint8_t page=0 ; page <= MAX_PAGES ; page++)
 8002ac8:	79fb      	ldrb	r3, [r7, #7]
 8002aca:	3301      	adds	r3, #1
 8002acc:	71fb      	strb	r3, [r7, #7]
 8002ace:	79fb      	ldrb	r3, [r7, #7]
 8002ad0:	2b03      	cmp	r3, #3
 8002ad2:	d9e7      	bls.n	8002aa4 <HAL_LCD_Clear+0x12>
		}
	}
	HAL_LCD_Set_Position(0,0);
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	2000      	movs	r0, #0
 8002ad8:	f000 f807 	bl	8002aea <HAL_LCD_Set_Position>
	HAL_LCD_Send_Command(CMD_DISPLAY_ON_OFF(DISPLAY_ON));
 8002adc:	20af      	movs	r0, #175	; 0xaf
 8002ade:	f7ff ffac 	bl	8002a3a <HAL_LCD_Send_Command>

	return;
 8002ae2:	bf00      	nop
}
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <HAL_LCD_Set_Position>:

void HAL_LCD_Set_Position(uint8_t column, uint8_t page)
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b082      	sub	sp, #8
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	4603      	mov	r3, r0
 8002af2:	460a      	mov	r2, r1
 8002af4:	71fb      	strb	r3, [r7, #7]
 8002af6:	4613      	mov	r3, r2
 8002af8:	71bb      	strb	r3, [r7, #6]
	/*This function sets the position of the cursor, remember that
	MAX COLUMN = 127 and MAX PAGE = 3, the cursor is not explicit showed in the LCD,
	it is just a reference word to understand where the LCD starting is*/
	HAL_LCD_Send_Command(CMD_COLUMN_MSB(column));
 8002afa:	79fb      	ldrb	r3, [r7, #7]
 8002afc:	091b      	lsrs	r3, r3, #4
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	b25b      	sxtb	r3, r3
 8002b02:	f043 0310 	orr.w	r3, r3, #16
 8002b06:	b25b      	sxtb	r3, r3
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7ff ff95 	bl	8002a3a <HAL_LCD_Send_Command>
	HAL_LCD_Send_Command(CMD_COLUMN_LSB(column));
 8002b10:	79fb      	ldrb	r3, [r7, #7]
 8002b12:	f003 030f 	and.w	r3, r3, #15
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7ff ff8e 	bl	8002a3a <HAL_LCD_Send_Command>
	HAL_LCD_Send_Command(CMD_PAGE(page));
 8002b1e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002b22:	f003 030f 	and.w	r3, r3, #15
 8002b26:	b25b      	sxtb	r3, r3
 8002b28:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8002b2c:	b25b      	sxtb	r3, r3
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff ff82 	bl	8002a3a <HAL_LCD_Send_Command>

	return;
 8002b36:	bf00      	nop
}
 8002b38:	3708      	adds	r7, #8
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
	...

08002b40 <HAL_LCD_Write_ascii>:
void HAL_LCD_Write_ascii(uint8_t ascii, uint8_t column, uint8_t page)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	4603      	mov	r3, r0
 8002b48:	71fb      	strb	r3, [r7, #7]
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	71bb      	strb	r3, [r7, #6]
 8002b4e:	4613      	mov	r3, r2
 8002b50:	717b      	strb	r3, [r7, #5]
	/*This function requires a byte to print a single ascii character in the LCD,
	this function also requires the exact page and column to print the ascii character in the lcd
	remember that, MAX_WIDTH = 127, MAX_PAGE = 3 */
	HAL_LCD_Send_Command(CMD_DISPLAY_ON_OFF(DISPLAY_ON));
 8002b52:	20af      	movs	r0, #175	; 0xaf
 8002b54:	f7ff ff71 	bl	8002a3a <HAL_LCD_Send_Command>
	HAL_LCD_Set_Position(column,page);
 8002b58:	797a      	ldrb	r2, [r7, #5]
 8002b5a:	79bb      	ldrb	r3, [r7, #6]
 8002b5c:	4611      	mov	r1, r2
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7ff ffc3 	bl	8002aea <HAL_LCD_Set_Position>

	uint8_t *arr = font;
 8002b64:	4b11      	ldr	r3, [pc, #68]	; (8002bac <HAL_LCD_Write_ascii+0x6c>)
 8002b66:	60bb      	str	r3, [r7, #8]
	for (uint8_t i=0; i<MAX_PIXEL_WIDTH ; i++)
 8002b68:	2300      	movs	r3, #0
 8002b6a:	73fb      	strb	r3, [r7, #15]
 8002b6c:	e013      	b.n	8002b96 <HAL_LCD_Write_ascii+0x56>
	{
		HAL_LCD_Send_Data(HAL_REVERSE_BYTE(arr[(ascii*5)+i]));
 8002b6e:	79fa      	ldrb	r2, [r7, #7]
 8002b70:	4613      	mov	r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	441a      	add	r2, r3
 8002b76:	7bfb      	ldrb	r3, [r7, #15]
 8002b78:	4413      	add	r3, r2
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	4413      	add	r3, r2
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f000 f814 	bl	8002bb0 <HAL_REVERSE_BYTE>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7ff ff6b 	bl	8002a66 <HAL_LCD_Send_Data>
	for (uint8_t i=0; i<MAX_PIXEL_WIDTH ; i++)
 8002b90:	7bfb      	ldrb	r3, [r7, #15]
 8002b92:	3301      	adds	r3, #1
 8002b94:	73fb      	strb	r3, [r7, #15]
 8002b96:	7bfb      	ldrb	r3, [r7, #15]
 8002b98:	2b04      	cmp	r3, #4
 8002b9a:	d9e8      	bls.n	8002b6e <HAL_LCD_Write_ascii+0x2e>
	}

	HAL_LCD_Send_Data(LETTER_SEPARATOR_BYTE);
 8002b9c:	2000      	movs	r0, #0
 8002b9e:	f7ff ff62 	bl	8002a66 <HAL_LCD_Send_Data>

	return;
 8002ba2:	bf00      	nop
}
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	2000003c 	.word	0x2000003c

08002bb0 <HAL_REVERSE_BYTE>:
uint8_t HAL_REVERSE_BYTE(uint8_t byte)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	71fb      	strb	r3, [r7, #7]
	/*This function reverse a single BYTE, why do we need this function?
	remember when we reversed the COMs in the HAL_LCD_Init() function, due this
	the line address of the pages was flip, this means that the MSB line of each page was in the bottom
	and the LSB was at the top. You need a function to reverse the data byte */
	byte = (byte & 0xF0) >> 4 | (byte & 0x0F) << 4;
 8002bba:	79fb      	ldrb	r3, [r7, #7]
 8002bbc:	091b      	lsrs	r3, r3, #4
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	b25a      	sxtb	r2, r3
 8002bc2:	79fb      	ldrb	r3, [r7, #7]
 8002bc4:	011b      	lsls	r3, r3, #4
 8002bc6:	b25b      	sxtb	r3, r3
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	b25b      	sxtb	r3, r3
 8002bcc:	71fb      	strb	r3, [r7, #7]
	byte = (byte & 0xCC) >> 2 | (byte & 0x33) << 2;
 8002bce:	79fb      	ldrb	r3, [r7, #7]
 8002bd0:	109b      	asrs	r3, r3, #2
 8002bd2:	b25b      	sxtb	r3, r3
 8002bd4:	f003 0333 	and.w	r3, r3, #51	; 0x33
 8002bd8:	b25a      	sxtb	r2, r3
 8002bda:	79fb      	ldrb	r3, [r7, #7]
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	b25b      	sxtb	r3, r3
 8002be0:	f023 0333 	bic.w	r3, r3, #51	; 0x33
 8002be4:	b25b      	sxtb	r3, r3
 8002be6:	4313      	orrs	r3, r2
 8002be8:	b25b      	sxtb	r3, r3
 8002bea:	71fb      	strb	r3, [r7, #7]
	byte = (byte & 0xAA) >> 1 | (byte & 0x55) << 1;
 8002bec:	79fb      	ldrb	r3, [r7, #7]
 8002bee:	105b      	asrs	r3, r3, #1
 8002bf0:	b25b      	sxtb	r3, r3
 8002bf2:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8002bf6:	b25a      	sxtb	r2, r3
 8002bf8:	79fb      	ldrb	r3, [r7, #7]
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	b25b      	sxtb	r3, r3
 8002bfe:	f023 0355 	bic.w	r3, r3, #85	; 0x55
 8002c02:	b25b      	sxtb	r3, r3
 8002c04:	4313      	orrs	r3, r2
 8002c06:	b25b      	sxtb	r3, r3
 8002c08:	71fb      	strb	r3, [r7, #7]

	return byte;
 8002c0a:	79fb      	ldrb	r3, [r7, #7]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <HAL_LCD_Write_AsciiString>:

void HAL_LCD_Write_AsciiString(uint8_t *word, uint8_t column, uint8_t page)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	460b      	mov	r3, r1
 8002c22:	70fb      	strb	r3, [r7, #3]
 8002c24:	4613      	mov	r3, r2
 8002c26:	70bb      	strb	r3, [r7, #2]
	/*This function writes a ascii string on the display, it could be a string like
	"Hello", "123", "Hello123" or "Hello 123", this function considers also spaces*/
	HAL_LCD_Set_Position(column,page);
 8002c28:	78ba      	ldrb	r2, [r7, #2]
 8002c2a:	78fb      	ldrb	r3, [r7, #3]
 8002c2c:	4611      	mov	r1, r2
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7ff ff5b 	bl	8002aea <HAL_LCD_Set_Position>
	for (uint8_t i=0;i<21;i++)
 8002c34:	2300      	movs	r3, #0
 8002c36:	73fb      	strb	r3, [r7, #15]
 8002c38:	e014      	b.n	8002c64 <HAL_LCD_Write_AsciiString+0x4c>
	{
		if (word[i]=='\0')
 8002c3a:	7bfb      	ldrb	r3, [r7, #15]
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	4413      	add	r3, r2
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d013      	beq.n	8002c6e <HAL_LCD_Write_AsciiString+0x56>
		{
			return;
		}//
		else
		{
		HAL_LCD_Write_ascii(word[i],column,page);
 8002c46:	7bfb      	ldrb	r3, [r7, #15]
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	78ba      	ldrb	r2, [r7, #2]
 8002c50:	78f9      	ldrb	r1, [r7, #3]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff ff74 	bl	8002b40 <HAL_LCD_Write_ascii>
		column+=6;
 8002c58:	78fb      	ldrb	r3, [r7, #3]
 8002c5a:	3306      	adds	r3, #6
 8002c5c:	70fb      	strb	r3, [r7, #3]
	for (uint8_t i=0;i<21;i++)
 8002c5e:	7bfb      	ldrb	r3, [r7, #15]
 8002c60:	3301      	adds	r3, #1
 8002c62:	73fb      	strb	r3, [r7, #15]
 8002c64:	7bfb      	ldrb	r3, [r7, #15]
 8002c66:	2b14      	cmp	r3, #20
 8002c68:	d9e7      	bls.n	8002c3a <HAL_LCD_Write_AsciiString+0x22>
		}
	}

	return;
 8002c6a:	bf00      	nop
 8002c6c:	e000      	b.n	8002c70 <HAL_LCD_Write_AsciiString+0x58>
			return;
 8002c6e:	bf00      	nop


}
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
	...

08002c78 <HAL_LCD_Write_Number>:

void HAL_LCD_Write_Number(uint8_t *number, uint8_t column, uint8_t page)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	460b      	mov	r3, r1
 8002c82:	70fb      	strb	r3, [r7, #3]
 8002c84:	4613      	mov	r3, r2
 8002c86:	70bb      	strb	r3, [r7, #2]
	/*This function writes a number of 2 digits, it also needs the column and page where you want the
	number, if the number is less than two digits, it will print 0#. Ex. If you want to print 9, the LCD
	will print 09*/
	uint8_t AsciiFirstDigit=*number/10+ADD_VALUE_TO_ASCII;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	4a12      	ldr	r2, [pc, #72]	; (8002cd8 <HAL_LCD_Write_Number+0x60>)
 8002c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c92:	08db      	lsrs	r3, r3, #3
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	3330      	adds	r3, #48	; 0x30
 8002c98:	73fb      	strb	r3, [r7, #15]
	uint8_t AsciiSecondDigit = *number%10+ADD_VALUE_TO_ASCII;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	781a      	ldrb	r2, [r3, #0]
 8002c9e:	4b0e      	ldr	r3, [pc, #56]	; (8002cd8 <HAL_LCD_Write_Number+0x60>)
 8002ca0:	fba3 1302 	umull	r1, r3, r3, r2
 8002ca4:	08d9      	lsrs	r1, r3, #3
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	440b      	add	r3, r1
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	3330      	adds	r3, #48	; 0x30
 8002cb4:	73bb      	strb	r3, [r7, #14]
	uint8_t numberAscii [3]= {AsciiFirstDigit, AsciiSecondDigit,'\0'};
 8002cb6:	7bfb      	ldrb	r3, [r7, #15]
 8002cb8:	723b      	strb	r3, [r7, #8]
 8002cba:	7bbb      	ldrb	r3, [r7, #14]
 8002cbc:	727b      	strb	r3, [r7, #9]
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	72bb      	strb	r3, [r7, #10]
	HAL_LCD_Write_AsciiString(numberAscii,column,page);
 8002cc2:	78ba      	ldrb	r2, [r7, #2]
 8002cc4:	78f9      	ldrb	r1, [r7, #3]
 8002cc6:	f107 0308 	add.w	r3, r7, #8
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7ff ffa4 	bl	8002c18 <HAL_LCD_Write_AsciiString>

	return;
 8002cd0:	bf00      	nop
}
 8002cd2:	3710      	adds	r7, #16
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	cccccccd 	.word	0xcccccccd

08002cdc <HAL_LCD_MENU>:
	}

	return;
}
void HAL_LCD_MENU(uint8_t *temperature,uint8_t *ActualHour, uint8_t *ActualMinute, uint8_t *ActualSecond)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]
 8002ce8:	603b      	str	r3, [r7, #0]
	/*Function to display the menu, this menu will refresh the time and the temperature*/


	if (AlreadyEnterMenu==1)
 8002cea:	4b1f      	ldr	r3, [pc, #124]	; (8002d68 <HAL_LCD_MENU+0x8c>)
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d114      	bne.n	8002d1c <HAL_LCD_MENU+0x40>
	{
		HAL_LCD_Write_Number(ActualHour, 30,0);
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	211e      	movs	r1, #30
 8002cf6:	68b8      	ldr	r0, [r7, #8]
 8002cf8:	f7ff ffbe 	bl	8002c78 <HAL_LCD_Write_Number>
		HAL_LCD_Write_Number(ActualMinute, 48,0);
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	2130      	movs	r1, #48	; 0x30
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f7ff ffb9 	bl	8002c78 <HAL_LCD_Write_Number>
		HAL_LCD_Write_Number(ActualSecond, 66,0);
 8002d06:	2200      	movs	r2, #0
 8002d08:	2142      	movs	r1, #66	; 0x42
 8002d0a:	6838      	ldr	r0, [r7, #0]
 8002d0c:	f7ff ffb4 	bl	8002c78 <HAL_LCD_Write_Number>
		HAL_LCD_Write_Number(temperature, 42,2);
 8002d10:	2202      	movs	r2, #2
 8002d12:	212a      	movs	r1, #42	; 0x2a
 8002d14:	68f8      	ldr	r0, [r7, #12]
 8002d16:	f7ff ffaf 	bl	8002c78 <HAL_LCD_Write_Number>
	HAL_LCD_Write_ascii('C', 60,2);
	AlreadyEnterMenu=1;

	}

	return;
 8002d1a:	e021      	b.n	8002d60 <HAL_LCD_MENU+0x84>
	HAL_LCD_Write_AsciiString("TIME ", 0,0);
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	2100      	movs	r1, #0
 8002d20:	4812      	ldr	r0, [pc, #72]	; (8002d6c <HAL_LCD_MENU+0x90>)
 8002d22:	f7ff ff79 	bl	8002c18 <HAL_LCD_Write_AsciiString>
	HAL_LCD_Write_ascii(':', 42,0);
 8002d26:	2200      	movs	r2, #0
 8002d28:	212a      	movs	r1, #42	; 0x2a
 8002d2a:	203a      	movs	r0, #58	; 0x3a
 8002d2c:	f7ff ff08 	bl	8002b40 <HAL_LCD_Write_ascii>
	HAL_LCD_Write_ascii(':', 60,0);
 8002d30:	2200      	movs	r2, #0
 8002d32:	213c      	movs	r1, #60	; 0x3c
 8002d34:	203a      	movs	r0, #58	; 0x3a
 8002d36:	f7ff ff03 	bl	8002b40 <HAL_LCD_Write_ascii>
	HAL_LCD_Write_AsciiString("SENSOR ", 0,2);
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	480c      	ldr	r0, [pc, #48]	; (8002d70 <HAL_LCD_MENU+0x94>)
 8002d40:	f7ff ff6a 	bl	8002c18 <HAL_LCD_Write_AsciiString>
	HAL_LCD_Write_ascii(SYMBOL_ASCII_CELSIUS, 54,2);
 8002d44:	2202      	movs	r2, #2
 8002d46:	2136      	movs	r1, #54	; 0x36
 8002d48:	20f8      	movs	r0, #248	; 0xf8
 8002d4a:	f7ff fef9 	bl	8002b40 <HAL_LCD_Write_ascii>
	HAL_LCD_Write_ascii('C', 60,2);
 8002d4e:	2202      	movs	r2, #2
 8002d50:	213c      	movs	r1, #60	; 0x3c
 8002d52:	2043      	movs	r0, #67	; 0x43
 8002d54:	f7ff fef4 	bl	8002b40 <HAL_LCD_Write_ascii>
	AlreadyEnterMenu=1;
 8002d58:	4b03      	ldr	r3, [pc, #12]	; (8002d68 <HAL_LCD_MENU+0x8c>)
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	701a      	strb	r2, [r3, #0]
	return;
 8002d5e:	bf00      	nop
}
 8002d60:	3710      	adds	r7, #16
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	20000557 	.word	0x20000557
 8002d6c:	08002fbc 	.word	0x08002fbc
 8002d70:	08002fc4 	.word	0x08002fc4

08002d74 <HAL_POT_Init>:
 */
#include "HAL_POT.h"

/*This function initialize the ADC*/
void HAL_POT_Init(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
	MX_ADC1_Init();
 8002d78:	f7fd fb96 	bl	80004a8 <MX_ADC1_Init>
	MX_ADC1_Calibration();
 8002d7c:	f7fd fc40 	bl	8000600 <MX_ADC1_Calibration>
	MX_ADC1_Enable();
 8002d80:	f7fd fc2e 	bl	80005e0 <MX_ADC1_Enable>
}
 8002d84:	bf00      	nop
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <HAL_POT_GetBinaryValue>:

/*This function returns the ADC value i an 8 bits format*/
uint16_t HAL_POT_GetBinaryValue (uint32_t Channel)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
	uint16_t POT_value = 0;
 8002d90:	2300      	movs	r3, #0
 8002d92:	81fb      	strh	r3, [r7, #14]
	MX_ADC1_SetChannel(Channel);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f7fd fc45 	bl	8000624 <MX_ADC1_SetChannel>
	MX_ADC1_StartConversion();
 8002d9a:	f7fd fc67 	bl	800066c <MX_ADC1_StartConversion>
	POT_value = MX_ADC1_GetValue();
 8002d9e:	f7fd fc79 	bl	8000694 <MX_ADC1_GetValue>
 8002da2:	4603      	mov	r3, r0
 8002da4:	81fb      	strh	r3, [r7, #14]
	LL_mDelay(10);
 8002da6:	200a      	movs	r0, #10
 8002da8:	f7ff fbf8 	bl	800259c <LL_mDelay>

	return POT_value;
 8002dac:	89fb      	ldrh	r3, [r7, #14]
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3710      	adds	r7, #16
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
	...

08002db8 <HAL_POT_Percentage>:
	return POT_VoltageValue;
}

/*This function returns the value of the potentiometer as a percentage*/
uint8_t HAL_POT_Percentage (uint32_t Channel)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
	uint8_t POT_Percent = 0;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	73fb      	strb	r3, [r7, #15]
	uint16_t measure = 0;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	81bb      	strh	r3, [r7, #12]

	measure = HAL_POT_GetBinaryValue(Channel);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f7ff ffdd 	bl	8002d88 <HAL_POT_GetBinaryValue>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	81bb      	strh	r3, [r7, #12]
	POT_Percent = (measure * 100)/POT_MAX_Count;
 8002dd2:	89bb      	ldrh	r3, [r7, #12]
 8002dd4:	2264      	movs	r2, #100	; 0x64
 8002dd6:	fb02 f303 	mul.w	r3, r2, r3
 8002dda:	4a06      	ldr	r2, [pc, #24]	; (8002df4 <HAL_POT_Percentage+0x3c>)
 8002ddc:	fb82 1203 	smull	r1, r2, r2, r3
 8002de0:	441a      	add	r2, r3
 8002de2:	11d2      	asrs	r2, r2, #7
 8002de4:	17db      	asrs	r3, r3, #31
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	73fb      	strb	r3, [r7, #15]

	return POT_Percent;
 8002dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3710      	adds	r7, #16
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	80808081 	.word	0x80808081

08002df8 <rgb_rojo>:
#include "HAL_RGB.h"
#include "gpio.h"

void rgb_rojo(){
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
	MX_RGB_Red(0);
 8002dfc:	2000      	movs	r0, #0
 8002dfe:	f7fd fd5d 	bl	80008bc <MX_RGB_Red>
	MX_RGB_Green(1);
 8002e02:	2001      	movs	r0, #1
 8002e04:	f7fd fd76 	bl	80008f4 <MX_RGB_Green>
	MX_RGB_Blue(1);
 8002e08:	2001      	movs	r0, #1
 8002e0a:	f7fd fd8f 	bl	800092c <MX_RGB_Blue>
}
 8002e0e:	bf00      	nop
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <rgb_verde>:
void rgb_verde(){
 8002e12:	b580      	push	{r7, lr}
 8002e14:	af00      	add	r7, sp, #0
	MX_RGB_Red(1);
 8002e16:	2001      	movs	r0, #1
 8002e18:	f7fd fd50 	bl	80008bc <MX_RGB_Red>
	MX_RGB_Green(0);
 8002e1c:	2000      	movs	r0, #0
 8002e1e:	f7fd fd69 	bl	80008f4 <MX_RGB_Green>
	MX_RGB_Blue(1);
 8002e22:	2001      	movs	r0, #1
 8002e24:	f7fd fd82 	bl	800092c <MX_RGB_Blue>
}
 8002e28:	bf00      	nop
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <rgb_azul>:
void rgb_azul(){
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
	MX_RGB_Red(1);
 8002e30:	2001      	movs	r0, #1
 8002e32:	f7fd fd43 	bl	80008bc <MX_RGB_Red>
	MX_RGB_Green(1);
 8002e36:	2001      	movs	r0, #1
 8002e38:	f7fd fd5c 	bl	80008f4 <MX_RGB_Green>
	MX_RGB_Blue(0);
 8002e3c:	2000      	movs	r0, #0
 8002e3e:	f7fd fd75 	bl	800092c <MX_RGB_Blue>
}
 8002e42:	bf00      	nop
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <rgb_amarillo>:
void rgb_amarillo(){
 8002e46:	b580      	push	{r7, lr}
 8002e48:	af00      	add	r7, sp, #0
	MX_RGB_Red(0);
 8002e4a:	2000      	movs	r0, #0
 8002e4c:	f7fd fd36 	bl	80008bc <MX_RGB_Red>
	MX_RGB_Green(0);
 8002e50:	2000      	movs	r0, #0
 8002e52:	f7fd fd4f 	bl	80008f4 <MX_RGB_Green>
	MX_RGB_Blue(1);
 8002e56:	2001      	movs	r0, #1
 8002e58:	f7fd fd68 	bl	800092c <MX_RGB_Blue>
}
 8002e5c:	bf00      	nop
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <rgb_celeste>:
void rgb_celeste(){
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
	MX_RGB_Red(1);
 8002e64:	2001      	movs	r0, #1
 8002e66:	f7fd fd29 	bl	80008bc <MX_RGB_Red>
	MX_RGB_Green(0);
 8002e6a:	2000      	movs	r0, #0
 8002e6c:	f7fd fd42 	bl	80008f4 <MX_RGB_Green>
	MX_RGB_Blue(0);
 8002e70:	2000      	movs	r0, #0
 8002e72:	f7fd fd5b 	bl	800092c <MX_RGB_Blue>
}
 8002e76:	bf00      	nop
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <rgb_morado>:
void rgb_morado(){
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	af00      	add	r7, sp, #0
	MX_RGB_Red(0);
 8002e7e:	2000      	movs	r0, #0
 8002e80:	f7fd fd1c 	bl	80008bc <MX_RGB_Red>
	MX_RGB_Green(1);
 8002e84:	2001      	movs	r0, #1
 8002e86:	f7fd fd35 	bl	80008f4 <MX_RGB_Green>
	MX_RGB_Blue(0);
 8002e8a:	2000      	movs	r0, #0
 8002e8c:	f7fd fd4e 	bl	800092c <MX_RGB_Blue>
}
 8002e90:	bf00      	nop
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <rgb_blanco>:
void rgb_blanco(){
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
	MX_RGB_Red(0);
 8002e98:	2000      	movs	r0, #0
 8002e9a:	f7fd fd0f 	bl	80008bc <MX_RGB_Red>
	MX_RGB_Green(0);
 8002e9e:	2000      	movs	r0, #0
 8002ea0:	f7fd fd28 	bl	80008f4 <MX_RGB_Green>
	MX_RGB_Blue(0);
 8002ea4:	2000      	movs	r0, #0
 8002ea6:	f7fd fd41 	bl	800092c <MX_RGB_Blue>
}
 8002eaa:	bf00      	nop
 8002eac:	bd80      	pop	{r7, pc}

08002eae <HAL_RTC_Init>:
 */
#include "HAL_RTC.h"

/*This function initialize the RTC module*/
void HAL_RTC_Init(void)
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	af00      	add	r7, sp, #0
	MX_RTC_Init();
 8002eb2:	f7fe fa4d 	bl	8001350 <MX_RTC_Init>
	return;
 8002eb6:	bf00      	nop
}
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <HAL_TEMPSen_Init>:
 *      Author: carlo
 */
#include "HAL_TEMPSen.h"

void HAL_TEMPSen_Init()
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	af00      	add	r7, sp, #0
	MX_I2C1_Init();
 8002ebe:	f7fd fdef 	bl	8000aa0 <MX_I2C1_Init>
	return;
 8002ec2:	bf00      	nop
}
 8002ec4:	bd80      	pop	{r7, pc}
	...

08002ec8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002ec8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f00 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ecc:	480d      	ldr	r0, [pc, #52]	; (8002f04 <LoopForever+0x6>)
  ldr r1, =_edata
 8002ece:	490e      	ldr	r1, [pc, #56]	; (8002f08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ed0:	4a0e      	ldr	r2, [pc, #56]	; (8002f0c <LoopForever+0xe>)
  movs r3, #0
 8002ed2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ed4:	e002      	b.n	8002edc <LoopCopyDataInit>

08002ed6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ed6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ed8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002eda:	3304      	adds	r3, #4

08002edc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002edc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ede:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ee0:	d3f9      	bcc.n	8002ed6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ee2:	4a0b      	ldr	r2, [pc, #44]	; (8002f10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ee4:	4c0b      	ldr	r4, [pc, #44]	; (8002f14 <LoopForever+0x16>)
  movs r3, #0
 8002ee6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ee8:	e001      	b.n	8002eee <LoopFillZerobss>

08002eea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002eea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002eec:	3204      	adds	r2, #4

08002eee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002eee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ef0:	d3fb      	bcc.n	8002eea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002ef2:	f7fe fc2f 	bl	8001754 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ef6:	f000 f811 	bl	8002f1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002efa:	f7fe f8a3 	bl	8001044 <main>

08002efe <LoopForever>:

LoopForever:
    b LoopForever
 8002efe:	e7fe      	b.n	8002efe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002f00:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8002f04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f08:	20000538 	.word	0x20000538
  ldr r2, =_sidata
 8002f0c:	08002fe4 	.word	0x08002fe4
  ldr r2, =_sbss
 8002f10:	20000538 	.word	0x20000538
  ldr r4, =_ebss
 8002f14:	20000560 	.word	0x20000560

08002f18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002f18:	e7fe      	b.n	8002f18 <ADC1_2_IRQHandler>
	...

08002f1c <__libc_init_array>:
 8002f1c:	b570      	push	{r4, r5, r6, lr}
 8002f1e:	4e0d      	ldr	r6, [pc, #52]	; (8002f54 <__libc_init_array+0x38>)
 8002f20:	4c0d      	ldr	r4, [pc, #52]	; (8002f58 <__libc_init_array+0x3c>)
 8002f22:	1ba4      	subs	r4, r4, r6
 8002f24:	10a4      	asrs	r4, r4, #2
 8002f26:	2500      	movs	r5, #0
 8002f28:	42a5      	cmp	r5, r4
 8002f2a:	d109      	bne.n	8002f40 <__libc_init_array+0x24>
 8002f2c:	4e0b      	ldr	r6, [pc, #44]	; (8002f5c <__libc_init_array+0x40>)
 8002f2e:	4c0c      	ldr	r4, [pc, #48]	; (8002f60 <__libc_init_array+0x44>)
 8002f30:	f000 f820 	bl	8002f74 <_init>
 8002f34:	1ba4      	subs	r4, r4, r6
 8002f36:	10a4      	asrs	r4, r4, #2
 8002f38:	2500      	movs	r5, #0
 8002f3a:	42a5      	cmp	r5, r4
 8002f3c:	d105      	bne.n	8002f4a <__libc_init_array+0x2e>
 8002f3e:	bd70      	pop	{r4, r5, r6, pc}
 8002f40:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f44:	4798      	blx	r3
 8002f46:	3501      	adds	r5, #1
 8002f48:	e7ee      	b.n	8002f28 <__libc_init_array+0xc>
 8002f4a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f4e:	4798      	blx	r3
 8002f50:	3501      	adds	r5, #1
 8002f52:	e7f2      	b.n	8002f3a <__libc_init_array+0x1e>
 8002f54:	08002fdc 	.word	0x08002fdc
 8002f58:	08002fdc 	.word	0x08002fdc
 8002f5c:	08002fdc 	.word	0x08002fdc
 8002f60:	08002fe0 	.word	0x08002fe0

08002f64 <memset>:
 8002f64:	4402      	add	r2, r0
 8002f66:	4603      	mov	r3, r0
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d100      	bne.n	8002f6e <memset+0xa>
 8002f6c:	4770      	bx	lr
 8002f6e:	f803 1b01 	strb.w	r1, [r3], #1
 8002f72:	e7f9      	b.n	8002f68 <memset+0x4>

08002f74 <_init>:
 8002f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f76:	bf00      	nop
 8002f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f7a:	bc08      	pop	{r3}
 8002f7c:	469e      	mov	lr, r3
 8002f7e:	4770      	bx	lr

08002f80 <_fini>:
 8002f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f82:	bf00      	nop
 8002f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f86:	bc08      	pop	{r3}
 8002f88:	469e      	mov	lr, r3
 8002f8a:	4770      	bx	lr
