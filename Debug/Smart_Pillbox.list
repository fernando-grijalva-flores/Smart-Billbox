
Smart_Pillbox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000478c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08004914  08004914  00014914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800493c  0800493c  0001493c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004940  08004940  00014940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000006bc  20000000  08004944  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  000206bc  2**0
                  CONTENTS
  7 .bss          00000048  200006bc  200006bc  000206bc  2**2
                  ALLOC
  8 ._user_heap_stack 00000080  20000704  20000704  000206bc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000206bc  2**0
                  CONTENTS, READONLY
 10 .debug_info   00008d34  00000000  00000000  000206ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001ed0  00000000  00000000  00029420  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000bd8  00000000  00000000  0002b2f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000aa8  00000000  00000000  0002bec8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004938  00000000  00000000  0002c970  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002a4c  00000000  00000000  000312a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00033cf4  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000304c  00000000  00000000  00033d70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200006bc 	.word	0x200006bc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080048fc 	.word	0x080048fc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200006c0 	.word	0x200006c0
 80001c4:	080048fc 	.word	0x080048fc

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__aeabi_d2uiz>:
 800095c:	004a      	lsls	r2, r1, #1
 800095e:	d211      	bcs.n	8000984 <__aeabi_d2uiz+0x28>
 8000960:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000964:	d211      	bcs.n	800098a <__aeabi_d2uiz+0x2e>
 8000966:	d50d      	bpl.n	8000984 <__aeabi_d2uiz+0x28>
 8000968:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800096c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000970:	d40e      	bmi.n	8000990 <__aeabi_d2uiz+0x34>
 8000972:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000976:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800097a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800097e:	fa23 f002 	lsr.w	r0, r3, r2
 8000982:	4770      	bx	lr
 8000984:	f04f 0000 	mov.w	r0, #0
 8000988:	4770      	bx	lr
 800098a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800098e:	d102      	bne.n	8000996 <__aeabi_d2uiz+0x3a>
 8000990:	f04f 30ff 	mov.w	r0, #4294967295
 8000994:	4770      	bx	lr
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	4770      	bx	lr

0800099c <LL_ADC_REG_SetSequencerRanks>:
  *         (5) On STM32F3, ADC channel available only on all ADC instances, but
  *             only one ADC instance is allowed to be connected to VrefInt at the same time.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800099c:	b480      	push	{r7}
 800099e:	b089      	sub	sp, #36	; 0x24
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	60b9      	str	r1, [r7, #8]
 80009a6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	3330      	adds	r3, #48	; 0x30
 80009ac:	4619      	mov	r1, r3
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80009b4:	f44f 7240 	mov.w	r2, #768	; 0x300
 80009b8:	61ba      	str	r2, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009ba:	69ba      	ldr	r2, [r7, #24]
 80009bc:	fa92 f2a2 	rbit	r2, r2
 80009c0:	617a      	str	r2, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80009c2:	697a      	ldr	r2, [r7, #20]
 80009c4:	fab2 f282 	clz	r2, r2
 80009c8:	b2d2      	uxtb	r2, r2
 80009ca:	40d3      	lsrs	r3, r2
 80009cc:	009b      	lsls	r3, r3, #2
 80009ce:	440b      	add	r3, r1
 80009d0:	61fb      	str	r3, [r7, #28]
  
  MODIFY_REG(*preg,
 80009d2:	69fb      	ldr	r3, [r7, #28]
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	f003 031f 	and.w	r3, r3, #31
 80009dc:	211f      	movs	r1, #31
 80009de:	fa01 f303 	lsl.w	r3, r1, r3
 80009e2:	43db      	mvns	r3, r3
 80009e4:	401a      	ands	r2, r3
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	0e9b      	lsrs	r3, r3, #26
 80009ea:	f003 011f 	and.w	r1, r3, #31
 80009ee:	68bb      	ldr	r3, [r7, #8]
 80009f0:	f003 031f 	and.w	r3, r3, #31
 80009f4:	fa01 f303 	lsl.w	r3, r1, r3
 80009f8:	431a      	orrs	r2, r3
 80009fa:	69fb      	ldr	r3, [r7, #28]
 80009fc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80009fe:	bf00      	nop
 8000a00:	3724      	adds	r7, #36	; 0x24
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr

08000a0a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_181CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_601CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	b08d      	sub	sp, #52	; 0x34
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	60f8      	str	r0, [r7, #12]
 8000a12:	60b9      	str	r1, [r7, #8]
 8000a14:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	3314      	adds	r3, #20
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a22:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000a26:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a28:	69ba      	ldr	r2, [r7, #24]
 8000a2a:	fa92 f2a2 	rbit	r2, r2
 8000a2e:	617a      	str	r2, [r7, #20]
  return result;
 8000a30:	697a      	ldr	r2, [r7, #20]
 8000a32:	fab2 f282 	clz	r2, r2
 8000a36:	b2d2      	uxtb	r2, r2
 8000a38:	40d3      	lsrs	r3, r2
 8000a3a:	009b      	lsls	r3, r3, #2
 8000a3c:	440b      	add	r3, r1
 8000a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  MODIFY_REG(*preg,
 8000a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a42:	681a      	ldr	r2, [r3, #0]
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8000a4a:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8000a4e:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a50:	6a39      	ldr	r1, [r7, #32]
 8000a52:	fa91 f1a1 	rbit	r1, r1
 8000a56:	61f9      	str	r1, [r7, #28]
  return result;
 8000a58:	69f9      	ldr	r1, [r7, #28]
 8000a5a:	fab1 f181 	clz	r1, r1
 8000a5e:	b2c9      	uxtb	r1, r1
 8000a60:	40cb      	lsrs	r3, r1
 8000a62:	2107      	movs	r1, #7
 8000a64:	fa01 f303 	lsl.w	r3, r1, r3
 8000a68:	43db      	mvns	r3, r3
 8000a6a:	401a      	ands	r2, r3
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8000a72:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8000a76:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000a7a:	fa91 f1a1 	rbit	r1, r1
 8000a7e:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 8000a80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000a82:	fab1 f181 	clz	r1, r1
 8000a86:	b2c9      	uxtb	r1, r1
 8000a88:	40cb      	lsrs	r3, r1
 8000a8a:	6879      	ldr	r1, [r7, #4]
 8000a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a90:	431a      	orrs	r2, r3
 8000a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a94:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 8000a96:	bf00      	nop
 8000a98:	3734      	adds	r7, #52	; 0x34
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
	...

08000aa4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	60f8      	str	r0, [r7, #12]
 8000aac:	60b9      	str	r1, [r7, #8]
 8000aae:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000ab6:	68b9      	ldr	r1, [r7, #8]
 8000ab8:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000aba:	400b      	ands	r3, r1
 8000abc:	43db      	mvns	r3, r3
 8000abe:	401a      	ands	r2, r3
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	f003 0318 	and.w	r3, r3, #24
 8000ac6:	4908      	ldr	r1, [pc, #32]	; (8000ae8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000ac8:	40d9      	lsrs	r1, r3
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	4019      	ands	r1, r3
 8000ace:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000ad0:	400b      	ands	r3, r1
 8000ad2:	431a      	orrs	r2, r3
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000ada:	bf00      	nop
 8000adc:	3714      	adds	r7, #20
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	0007fffe 	.word	0x0007fffe

08000aec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  /* 1. Set the intermediate state before moving the ADC voltage regulator    */
  /*    to state enable.                                                      */
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	689b      	ldr	r3, [r3, #8]
 8000af8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	609a      	str	r2, [r3, #8]
  /* 2. Set the final state of ADC voltage regulator enable                   */
  /*    (ADVREGEN bits set to 0x01).                                          */
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	689b      	ldr	r3, [r3, #8]
 8000b04:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000b08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000b0c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN_0);
}
 8000b14:	bf00      	nop
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	689b      	ldr	r3, [r3, #8]
 8000b2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000b30:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000b34:	f043 0201 	orr.w	r2, r3, #1
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000b3c:	bf00      	nop
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <LL_ADC_StartCalibration>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx, uint32_t SingleDiff)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	6039      	str	r1, [r7, #0]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	689b      	ldr	r3, [r3, #8]
 8000b56:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000b5a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000b5e:	683a      	ldr	r2, [r7, #0]
 8000b60:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8000b64:	4313      	orrs	r3, r2
 8000b66:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	609a      	str	r2, [r3, #8]
             ADC_CR_ADCALDIF | ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADCAL | (SingleDiff & ADC_SINGLEDIFF_CALIB_START_MASK));
}
 8000b6e:	bf00      	nop
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR       ADCAL          LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	b083      	sub	sp, #12
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	689b      	ldr	r3, [r3, #8]
 8000b86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000b8e:	bf0c      	ite	eq
 8000b90:	2301      	moveq	r3, #1
 8000b92:	2300      	movne	r3, #0
 8000b94:	b2db      	uxtb	r3, r3
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	b083      	sub	sp, #12
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	689b      	ldr	r3, [r3, #8]
 8000bae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000bb2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000bb6:	f043 0204 	orr.w	r2, r3, #4
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000bbe:	bf00      	nop
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr

08000bca <LL_ADC_REG_ReadConversionData8>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData8
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_ADC_REG_ReadConversionData8(ADC_TypeDef *ADCx)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	b083      	sub	sp, #12
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd6:	b2db      	uxtb	r3, r3
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <LL_ADC_IsActiveFlag_ADRDY>:
  * @rmtoll ISR      ADRDY          LL_ADC_IsActiveFlag_ADRDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_ADRDY(ADC_TypeDef *ADCx)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f003 0301 	and.w	r3, r3, #1
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	bf0c      	ite	eq
 8000bf8:	2301      	moveq	r3, #1
 8000bfa:	2300      	movne	r3, #0
 8000bfc:	b2db      	uxtb	r3, r3
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <LL_ADC_IsActiveFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_IsActiveFlag_EOC
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(ADC_TypeDef *ADCx)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	b083      	sub	sp, #12
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f003 0304 	and.w	r3, r3, #4
 8000c1a:	2b04      	cmp	r3, #4
 8000c1c:	bf0c      	ite	eq
 8000c1e:	2301      	moveq	r3, #1
 8000c20:	2300      	movne	r3, #0
 8000c22:	b2db      	uxtb	r3, r3
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <LL_ADC_ClearFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_ClearFlag_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2204      	movs	r2, #4
 8000c3c:	601a      	str	r2, [r3, #0]
}
 8000c3e:	bf00      	nop
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
	...

08000c4c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000c54:	4908      	ldr	r1, [pc, #32]	; (8000c78 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000c56:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000c58:	695a      	ldr	r2, [r3, #20]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000c60:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000c62:	695a      	ldr	r2, [r3, #20]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	4013      	ands	r3, r2
 8000c68:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
}
 8000c6c:	bf00      	nop
 8000c6e:	3714      	adds	r7, #20
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	40021000 	.word	0x40021000

08000c7c <MX_ADC1_Init>:
const uint32_t ADC_Sampling_Time_Map[ADC_Channel_Num] = {LL_ADC_SAMPLINGTIME_601CYCLES_5, LL_ADC_SAMPLINGTIME_601CYCLES_5};
/* USER CODE END 0 */

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b094      	sub	sp, #80	; 0x50
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000c82:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	605a      	str	r2, [r3, #4]
 8000c8c:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000c8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]
 8000c9a:	60da      	str	r2, [r3, #12]
 8000c9c:	611a      	str	r2, [r3, #16]
 8000c9e:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8000ca0:	f107 0318 	add.w	r3, r7, #24
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cae:	463b      	mov	r3, r7
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	611a      	str	r2, [r3, #16]
 8000cbc:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_ADC12);
 8000cbe:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000cc2:	f7ff ffc3 	bl	8000c4c <LL_AHB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000cc6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000cca:	f7ff ffbf 	bl	8000c4c <LL_AHB1_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PA0   ------> ADC1_IN1
  PA1   ------> ADC1_IN2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cda:	463b      	mov	r3, r7
 8000cdc:	4619      	mov	r1, r3
 8000cde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ce2:	f002 fd4e 	bl	8003782 <LL_GPIO_Init>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_8B;
 8000ce6:	2310      	movs	r3, #16
 8000ce8:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000cea:	2300      	movs	r3, #0
 8000cec:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8000cf2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000cfc:	f002 fbcc 	bl	8003498 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000d00:	2300      	movs	r3, #0
 8000d02:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8000d04:	2300      	movs	r3, #0
 8000d06:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_LIMITED;
 8000d10:	2301      	movs	r3, #1
 8000d12:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_OVERWRITTEN;
 8000d14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d18:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8000d1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d1e:	4619      	mov	r1, r3
 8000d20:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000d24:	f002 fbde 	bl	80034e4 <LL_ADC_REG_Init>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV1;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8000d30:	f107 0318 	add.w	r3, r7, #24
 8000d34:	4619      	mov	r1, r3
 8000d36:	481a      	ldr	r0, [pc, #104]	; (8000da0 <MX_ADC1_Init+0x124>)
 8000d38:	f002 fb6e 	bl	8003418 <LL_ADC_CommonInit>

  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC1);
 8000d3c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000d40:	f7ff fed4 	bl	8000aec <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8000d44:	4b17      	ldr	r3, [pc, #92]	; (8000da4 <MX_ADC1_Init+0x128>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	099b      	lsrs	r3, r3, #6
 8000d4a:	4a17      	ldr	r2, [pc, #92]	; (8000da8 <MX_ADC1_Init+0x12c>)
 8000d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d50:	099a      	lsrs	r2, r3, #6
 8000d52:	4613      	mov	r3, r2
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	4413      	add	r3, r2
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	4b13      	ldr	r3, [pc, #76]	; (8000dac <MX_ADC1_Init+0x130>)
 8000d5e:	fba3 2302 	umull	r2, r3, r3, r2
 8000d62:	08db      	lsrs	r3, r3, #3
 8000d64:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8000d66:	e002      	b.n	8000d6e <MX_ADC1_Init+0xf2>
  {
    wait_loop_index--;
 8000d68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8000d6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d1f9      	bne.n	8000d68 <MX_ADC1_Init+0xec>
  }
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 8000d74:	4a0e      	ldr	r2, [pc, #56]	; (8000db0 <MX_ADC1_Init+0x134>)
 8000d76:	2106      	movs	r1, #6
 8000d78:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000d7c:	f7ff fe0e 	bl	800099c <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_601CYCLES_5);
 8000d80:	2207      	movs	r2, #7
 8000d82:	490b      	ldr	r1, [pc, #44]	; (8000db0 <MX_ADC1_Init+0x134>)
 8000d84:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000d88:	f7ff fe3f 	bl	8000a0a <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SINGLE_ENDED);
 8000d8c:	227f      	movs	r2, #127	; 0x7f
 8000d8e:	4908      	ldr	r1, [pc, #32]	; (8000db0 <MX_ADC1_Init+0x134>)
 8000d90:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000d94:	f7ff fe86 	bl	8000aa4 <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d98:	bf00      	nop
 8000d9a:	3750      	adds	r7, #80	; 0x50
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	50000300 	.word	0x50000300
 8000da4:	200001bc 	.word	0x200001bc
 8000da8:	053e2d63 	.word	0x053e2d63
 8000dac:	cccccccd 	.word	0xcccccccd
 8000db0:	04300002 	.word	0x04300002

08000db4 <MX_ADC1_Enable>:

/* USER CODE BEGIN 1 */

/*This function enable ADC*/
void MX_ADC1_Enable(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
	LL_ADC_Enable(ADC1);
 8000db8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000dbc:	f7ff feb0 	bl	8000b20 <LL_ADC_Enable>
	while(!LL_ADC_IsActiveFlag_ADRDY(ADC1));
 8000dc0:	bf00      	nop
 8000dc2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000dc6:	f7ff ff0d 	bl	8000be4 <LL_ADC_IsActiveFlag_ADRDY>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d0f8      	beq.n	8000dc2 <MX_ADC1_Enable+0xe>

	return;
 8000dd0:	bf00      	nop
}
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <MX_ADC1_Calibration>:
/*This Function start the ADC calibration and wait into the cycle until calibration is in progress*/
void MX_ADC1_Calibration(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
	LL_ADC_StartCalibration(ADC1, LL_ADC_SINGLE_ENDED);
 8000dd8:	217f      	movs	r1, #127	; 0x7f
 8000dda:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000dde:	f7ff feb3 	bl	8000b48 <LL_ADC_StartCalibration>
	while(LL_ADC_IsCalibrationOnGoing(ADC1));
 8000de2:	bf00      	nop
 8000de4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000de8:	f7ff fec7 	bl	8000b7a <LL_ADC_IsCalibrationOnGoing>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d1f8      	bne.n	8000de4 <MX_ADC1_Calibration+0x10>

	return;
 8000df2:	bf00      	nop
}
 8000df4:	bd80      	pop	{r7, pc}
	...

08000df8 <MX_ADC1_SetChannel>:
 * just use one of the following arguments:
 * Channel 1: ADC_Channel_1
 * Channel 2: ADC_Channel_2
 */
void MX_ADC1_SetChannel(uint32_t Channel)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
	LL_ADC_REG_SetSequencerRanks(ADC1,LL_ADC_REG_RANK_1, ADC_Channel_Map[Channel]);
 8000e00:	4a0d      	ldr	r2, [pc, #52]	; (8000e38 <MX_ADC1_SetChannel+0x40>)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e08:	461a      	mov	r2, r3
 8000e0a:	2106      	movs	r1, #6
 8000e0c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000e10:	f7ff fdc4 	bl	800099c <LL_ADC_REG_SetSequencerRanks>
	LL_ADC_SetChannelSamplingTime(ADC1,ADC_Channel_Map[Channel],ADC_Sampling_Time_Map[Channel]);
 8000e14:	4a08      	ldr	r2, [pc, #32]	; (8000e38 <MX_ADC1_SetChannel+0x40>)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000e1c:	4a07      	ldr	r2, [pc, #28]	; (8000e3c <MX_ADC1_SetChannel+0x44>)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e24:	461a      	mov	r2, r3
 8000e26:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000e2a:	f7ff fdee 	bl	8000a0a <LL_ADC_SetChannelSamplingTime>

	return;
 8000e2e:	bf00      	nop
}
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	0800492c 	.word	0x0800492c
 8000e3c:	08004934 	.word	0x08004934

08000e40 <MX_ADC1_StartConversion>:

/*This function start the ADC conversion process*/
void MX_ADC1_StartConversion(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
	LL_ADC_REG_StartConversion(ADC1);
 8000e44:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000e48:	f7ff feab 	bl	8000ba2 <LL_ADC_REG_StartConversion>
	/*This cycle waits until the end of conversion flag is active*/
	while(!LL_ADC_IsActiveFlag_EOC(ADC1));
 8000e4c:	bf00      	nop
 8000e4e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000e52:	f7ff feda 	bl	8000c0a <LL_ADC_IsActiveFlag_EOC>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d0f8      	beq.n	8000e4e <MX_ADC1_StartConversion+0xe>
	/*When ADC finish the conversion just clear the EOC flag*/
	LL_ADC_ClearFlag_EOC(ADC1);
 8000e5c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000e60:	f7ff fee6 	bl	8000c30 <LL_ADC_ClearFlag_EOC>

	return;
 8000e64:	bf00      	nop
}
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <MX_ADC1_GetValue>:

/*This function get the ADC value on a 8 bits format*/
uint16_t MX_ADC1_GetValue(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
	uint16_t ADC_value;
	ADC_value=LL_ADC_REG_ReadConversionData8(ADC1);
 8000e6e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000e72:	f7ff feaa 	bl	8000bca <LL_ADC_REG_ReadConversionData8>
 8000e76:	4603      	mov	r3, r0
 8000e78:	80fb      	strh	r3, [r7, #6]
	return ADC_value;
 8000e7a:	88fb      	ldrh	r3, [r7, #6]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <LL_AHB1_GRP1_EnableClock>:
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000e8c:	4908      	ldr	r1, [pc, #32]	; (8000eb0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e8e:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e90:	695a      	ldr	r2, [r3, #20]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000e98:	4b05      	ldr	r3, [pc, #20]	; (8000eb0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e9a:	695a      	ldr	r2, [r3, #20]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
}
 8000ea4:	bf00      	nop
 8000ea6:	3714      	adds	r7, #20
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	40021000 	.word	0x40021000

08000eb4 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	691a      	ldr	r2, [r3, #16]
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	401a      	ands	r2, r3
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	bf0c      	ite	eq
 8000ecc:	2301      	moveq	r3, #1
 8000ece:	2300      	movne	r3, #0
 8000ed0:	b2db      	uxtb	r3, r3
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	b083      	sub	sp, #12
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
 8000ee6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	683a      	ldr	r2, [r7, #0]
 8000eec:	619a      	str	r2, [r3, #24]
}
 8000eee:	bf00      	nop
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000efa:	b480      	push	{r7}
 8000efc:	b083      	sub	sp, #12
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
 8000f02:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	683a      	ldr	r2, [r7, #0]
 8000f08:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f0a:	bf00      	nop
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
	...

08000f18 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1e:	463b      	mov	r3, r7
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
 8000f2c:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000f2e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000f32:	f7ff ffa7 	bl	8000e84 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000f36:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000f3a:	f7ff ffa3 	bl	8000e84 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000f3e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000f42:	f7ff ff9f 	bl	8000e84 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(GPIOA, LCD_RESET_Pin|LCD_A0_Pin);
 8000f46:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000f4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f4e:	f7ff ffc6 	bl	8000ede <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(LCD_CS_N_GPIO_Port, LCD_CS_N_Pin);
 8000f52:	2140      	movs	r1, #64	; 0x40
 8000f54:	483b      	ldr	r0, [pc, #236]	; (8001044 <MX_GPIO_Init+0x12c>)
 8000f56:	f7ff ffc2 	bl	8000ede <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 8000f5a:	2180      	movs	r1, #128	; 0x80
 8000f5c:	483a      	ldr	r0, [pc, #232]	; (8001048 <MX_GPIO_Init+0x130>)
 8000f5e:	f7ff ffcc 	bl	8000efa <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 8000f62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f6a:	f7ff ffc6 	bl	8000efa <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED_R_GPIO_Port, LED_R_Pin);
 8000f6e:	2110      	movs	r1, #16
 8000f70:	4834      	ldr	r0, [pc, #208]	; (8001044 <MX_GPIO_Init+0x12c>)
 8000f72:	f7ff ffc2 	bl	8000efa <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = J_RIGHT_Pin|J_LEFT_Pin;
 8000f76:	2303      	movs	r3, #3
 8000f78:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f82:	463b      	mov	r3, r7
 8000f84:	4619      	mov	r1, r3
 8000f86:	4830      	ldr	r0, [pc, #192]	; (8001048 <MX_GPIO_Init+0x130>)
 8000f88:	f002 fbfb 	bl	8003782 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = J_UP_Pin;
 8000f8c:	2310      	movs	r3, #16
 8000f8e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000f90:	2300      	movs	r3, #0
 8000f92:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f94:	2300      	movs	r3, #0
 8000f96:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(J_UP_GPIO_Port, &GPIO_InitStruct);
 8000f98:	463b      	mov	r3, r7
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa0:	f002 fbef 	bl	8003782 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LCD_RESET_Pin|LCD_A0_Pin;
 8000fa4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000fa8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000faa:	2301      	movs	r3, #1
 8000fac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fba:	463b      	mov	r3, r7
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fc2:	f002 fbde 	bl	8003782 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = J_DOWN_Pin|J_CENTER_Pin;
 8000fc6:	2321      	movs	r3, #33	; 0x21
 8000fc8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd2:	463b      	mov	r3, r7
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	481b      	ldr	r0, [pc, #108]	; (8001044 <MX_GPIO_Init+0x12c>)
 8000fd8:	f002 fbd3 	bl	8003782 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_G_Pin;
 8000fdc:	2380      	movs	r3, #128	; 0x80
 8000fde:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000fec:	2300      	movs	r3, #0
 8000fee:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED_G_GPIO_Port, &GPIO_InitStruct);
 8000ff0:	463b      	mov	r3, r7
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4814      	ldr	r0, [pc, #80]	; (8001048 <MX_GPIO_Init+0x130>)
 8000ff6:	f002 fbc4 	bl	8003782 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_B_Pin;
 8000ffa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ffe:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001000:	2301      	movs	r3, #1
 8001002:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001004:	2300      	movs	r3, #0
 8001006:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800100c:	2300      	movs	r3, #0
 800100e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 8001010:	463b      	mov	r3, r7
 8001012:	4619      	mov	r1, r3
 8001014:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001018:	f002 fbb3 	bl	8003782 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_R_Pin|LCD_CS_N_Pin;
 800101c:	2350      	movs	r3, #80	; 0x50
 800101e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001020:	2301      	movs	r3, #1
 8001022:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001024:	2300      	movs	r3, #0
 8001026:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800102c:	2300      	movs	r3, #0
 800102e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001030:	463b      	mov	r3, r7
 8001032:	4619      	mov	r1, r3
 8001034:	4803      	ldr	r0, [pc, #12]	; (8001044 <MX_GPIO_Init+0x12c>)
 8001036:	f002 fba4 	bl	8003782 <LL_GPIO_Init>

}
 800103a:	bf00      	nop
 800103c:	3718      	adds	r7, #24
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	48000400 	.word	0x48000400
 8001048:	48000800 	.word	0x48000800

0800104c <MX_Joystick_Up>:

/* USER CODE BEGIN 2 */
short MX_Joystick_Up(){
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
	/* Deteccion de Joystick Up */
	short v = LL_GPIO_IsInputPinSet(GPIOA,J_UP_Pin);
 8001052:	2110      	movs	r1, #16
 8001054:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001058:	f7ff ff2c 	bl	8000eb4 <LL_GPIO_IsInputPinSet>
 800105c:	4603      	mov	r3, r0
 800105e:	80fb      	strh	r3, [r7, #6]
	return v;
 8001060:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001064:	4618      	mov	r0, r3
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <MX_Joystick_Down>:
short MX_Joystick_Down(){
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
	/* Deteccion de Joystick Down */
	short v = LL_GPIO_IsInputPinSet(GPIOB,J_DOWN_Pin);
 8001072:	2101      	movs	r1, #1
 8001074:	4805      	ldr	r0, [pc, #20]	; (800108c <MX_Joystick_Down+0x20>)
 8001076:	f7ff ff1d 	bl	8000eb4 <LL_GPIO_IsInputPinSet>
 800107a:	4603      	mov	r3, r0
 800107c:	80fb      	strh	r3, [r7, #6]
	return v;
 800107e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001082:	4618      	mov	r0, r3
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	48000400 	.word	0x48000400

08001090 <MX_Joystick_Right>:
short MX_Joystick_Right(){
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
	/* Deteccion de Joystick Right */
	short v = LL_GPIO_IsInputPinSet(GPIOC,J_RIGHT_Pin);
 8001096:	2101      	movs	r1, #1
 8001098:	4805      	ldr	r0, [pc, #20]	; (80010b0 <MX_Joystick_Right+0x20>)
 800109a:	f7ff ff0b 	bl	8000eb4 <LL_GPIO_IsInputPinSet>
 800109e:	4603      	mov	r3, r0
 80010a0:	80fb      	strh	r3, [r7, #6]
	return v;
 80010a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	48000800 	.word	0x48000800

080010b4 <MX_Joystick_Left>:
short MX_Joystick_Left(){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
	/* Deteccion de Joystick Left */
	short v = LL_GPIO_IsInputPinSet(GPIOC,J_LEFT_Pin);
 80010ba:	2102      	movs	r1, #2
 80010bc:	4805      	ldr	r0, [pc, #20]	; (80010d4 <MX_Joystick_Left+0x20>)
 80010be:	f7ff fef9 	bl	8000eb4 <LL_GPIO_IsInputPinSet>
 80010c2:	4603      	mov	r3, r0
 80010c4:	80fb      	strh	r3, [r7, #6]
	return v;
 80010c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	48000800 	.word	0x48000800

080010d8 <MX_Joystick_Center>:
short MX_Joystick_Center(){
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
	/* Deteccion de Joystick Center */
	short v = LL_GPIO_IsInputPinSet(GPIOB,J_CENTER_Pin);
 80010de:	2120      	movs	r1, #32
 80010e0:	4805      	ldr	r0, [pc, #20]	; (80010f8 <MX_Joystick_Center+0x20>)
 80010e2:	f7ff fee7 	bl	8000eb4 <LL_GPIO_IsInputPinSet>
 80010e6:	4603      	mov	r3, r0
 80010e8:	80fb      	strh	r3, [r7, #6]
	return v;
 80010ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	48000400 	.word	0x48000400

080010fc <MX_RGB_Red>:
void MX_RGB_Red(short v){
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	80fb      	strh	r3, [r7, #6]
	/* Activacion o desactivacion led R */
	if (v == 1)
 8001106:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800110a:	2b01      	cmp	r3, #1
 800110c:	d104      	bne.n	8001118 <MX_RGB_Red+0x1c>
		LL_GPIO_SetOutputPin(GPIOB,LED_R_Pin);
 800110e:	2110      	movs	r1, #16
 8001110:	4807      	ldr	r0, [pc, #28]	; (8001130 <MX_RGB_Red+0x34>)
 8001112:	f7ff fee4 	bl	8000ede <LL_GPIO_SetOutputPin>
	else if (v == 0)
		LL_GPIO_ResetOutputPin(GPIOB,LED_R_Pin);
}
 8001116:	e007      	b.n	8001128 <MX_RGB_Red+0x2c>
	else if (v == 0)
 8001118:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d103      	bne.n	8001128 <MX_RGB_Red+0x2c>
		LL_GPIO_ResetOutputPin(GPIOB,LED_R_Pin);
 8001120:	2110      	movs	r1, #16
 8001122:	4803      	ldr	r0, [pc, #12]	; (8001130 <MX_RGB_Red+0x34>)
 8001124:	f7ff fee9 	bl	8000efa <LL_GPIO_ResetOutputPin>
}
 8001128:	bf00      	nop
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	48000400 	.word	0x48000400

08001134 <MX_RGB_Green>:
void MX_RGB_Green(short v){
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	80fb      	strh	r3, [r7, #6]
	/* Activacion o desactivacion led G */
	if (v == 1)
 800113e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d104      	bne.n	8001150 <MX_RGB_Green+0x1c>
		LL_GPIO_SetOutputPin(GPIOC,LED_G_Pin);
 8001146:	2180      	movs	r1, #128	; 0x80
 8001148:	4807      	ldr	r0, [pc, #28]	; (8001168 <MX_RGB_Green+0x34>)
 800114a:	f7ff fec8 	bl	8000ede <LL_GPIO_SetOutputPin>
	else if (v == 0)
		LL_GPIO_ResetOutputPin(GPIOC,LED_G_Pin);
}
 800114e:	e007      	b.n	8001160 <MX_RGB_Green+0x2c>
	else if (v == 0)
 8001150:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d103      	bne.n	8001160 <MX_RGB_Green+0x2c>
		LL_GPIO_ResetOutputPin(GPIOC,LED_G_Pin);
 8001158:	2180      	movs	r1, #128	; 0x80
 800115a:	4803      	ldr	r0, [pc, #12]	; (8001168 <MX_RGB_Green+0x34>)
 800115c:	f7ff fecd 	bl	8000efa <LL_GPIO_ResetOutputPin>
}
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	48000800 	.word	0x48000800

0800116c <MX_RGB_Blue>:
void MX_RGB_Blue(short v){
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	80fb      	strh	r3, [r7, #6]
	/* Activacion o desactivacion led B */
	if (v == 1)
 8001176:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d106      	bne.n	800118c <MX_RGB_Blue+0x20>
		LL_GPIO_SetOutputPin(GPIOA,LED_B_Pin);
 800117e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001182:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001186:	f7ff feaa 	bl	8000ede <LL_GPIO_SetOutputPin>
	else if (v == 0)
		LL_GPIO_ResetOutputPin(GPIOA,LED_B_Pin);
}
 800118a:	e009      	b.n	80011a0 <MX_RGB_Blue+0x34>
	else if (v == 0)
 800118c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d105      	bne.n	80011a0 <MX_RGB_Blue+0x34>
		LL_GPIO_ResetOutputPin(GPIOA,LED_B_Pin);
 8001194:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001198:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800119c:	f7ff fead 	bl	8000efa <LL_GPIO_ResetOutputPin>
}
 80011a0:	bf00      	nop
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	601a      	str	r2, [r3, #0]
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	601a      	str	r2, [r3, #0]
}
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <LL_I2C_SetMasterAddressingMode>:
  *         @arg @ref LL_I2C_ADDRESSING_MODE_7BIT
  *         @arg @ref LL_I2C_ADDRESSING_MODE_10BIT
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMasterAddressingMode(I2C_TypeDef *I2Cx, uint32_t AddressingMode)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_ADD10, AddressingMode);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	431a      	orrs	r2, r3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	605a      	str	r2, [r3, #4]
}
 8001202:	bf00      	nop
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 800120e:	b480      	push	{r7}
 8001210:	b085      	sub	sp, #20
 8001212:	af00      	add	r7, sp, #0
 8001214:	60f8      	str	r0, [r7, #12]
 8001216:	60b9      	str	r1, [r7, #8]
 8001218:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001222:	f023 0306 	bic.w	r3, r3, #6
 8001226:	68b9      	ldr	r1, [r7, #8]
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	430a      	orrs	r2, r1
 800122c:	431a      	orrs	r2, r3
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	60da      	str	r2, [r3, #12]
}
 8001232:	bf00      	nop
 8001234:	3714      	adds	r7, #20
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 800123e:	b480      	push	{r7}
 8001240:	b083      	sub	sp, #12
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	68db      	ldr	r3, [r3, #12]
 800124a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	60da      	str	r2, [r3, #12]
}
 8001252:	bf00      	nop
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr

0800125e <LL_I2C_IsActiveFlag_TXIS>:
  * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(I2C_TypeDef *I2Cx)
{
 800125e:	b480      	push	{r7}
 8001260:	b083      	sub	sp, #12
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	699b      	ldr	r3, [r3, #24]
 800126a:	f003 0302 	and.w	r3, r3, #2
 800126e:	2b02      	cmp	r3, #2
 8001270:	d101      	bne.n	8001276 <LL_I2C_IsActiveFlag_TXIS+0x18>
 8001272:	2301      	movs	r3, #1
 8001274:	e000      	b.n	8001278 <LL_I2C_IsActiveFlag_TXIS+0x1a>
 8001276:	2300      	movs	r3, #0
}
 8001278:	4618      	mov	r0, r3
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	f003 0304 	and.w	r3, r3, #4
 8001294:	2b04      	cmp	r3, #4
 8001296:	d101      	bne.n	800129c <LL_I2C_IsActiveFlag_RXNE+0x18>
 8001298:	2301      	movs	r3, #1
 800129a:	e000      	b.n	800129e <LL_I2C_IsActiveFlag_RXNE+0x1a>
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr

080012aa <LL_I2C_IsActiveFlag_STOP>:
  * @rmtoll ISR          STOPF         LL_I2C_IsActiveFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(I2C_TypeDef *I2Cx)
{
 80012aa:	b480      	push	{r7}
 80012ac:	b083      	sub	sp, #12
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	699b      	ldr	r3, [r3, #24]
 80012b6:	f003 0320 	and.w	r3, r3, #32
 80012ba:	2b20      	cmp	r3, #32
 80012bc:	d101      	bne.n	80012c2 <LL_I2C_IsActiveFlag_STOP+0x18>
 80012be:	2301      	movs	r3, #1
 80012c0:	e000      	b.n	80012c4 <LL_I2C_IsActiveFlag_STOP+0x1a>
 80012c2:	2300      	movs	r3, #0
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <LL_I2C_ClearFlag_STOP>:
  * @rmtoll ICR          STOPCF        LL_I2C_ClearFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	69db      	ldr	r3, [r3, #28]
 80012dc:	f043 0220 	orr.w	r2, r3, #32
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	61da      	str	r2, [r3, #28]
}
 80012e4:	bf00      	nop
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	605a      	str	r2, [r3, #4]
}
 8001304:	bf00      	nop
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <LL_I2C_SetTransferSize>:
  * @param  I2Cx I2C Instance.
  * @param  TransferSize This parameter must be a value between Min_Data=0x00 and Max_Data=0xFF.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetTransferSize(I2C_TypeDef *I2Cx, uint32_t TransferSize)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NBYTES, TransferSize << I2C_CR2_NBYTES_Pos);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	041b      	lsls	r3, r3, #16
 8001326:	431a      	orrs	r2, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	605a      	str	r2, [r3, #4]
}
 800132c:	bf00      	nop
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <LL_I2C_GenerateStartCondition>:
  * @rmtoll CR2          START           LL_I2C_GenerateStartCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStartCondition(I2C_TypeDef *I2Cx)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_START);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	605a      	str	r2, [r3, #4]
}
 800134c:	bf00      	nop
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <LL_I2C_SetTransferRequest>:
  *         @arg @ref LL_I2C_REQUEST_WRITE
  *         @arg @ref LL_I2C_REQUEST_READ
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetTransferRequest(I2C_TypeDef *I2Cx, uint32_t TransferRequest)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_RD_WRN, TransferRequest);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	431a      	orrs	r2, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	605a      	str	r2, [r3, #4]
}
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr

0800137e <LL_I2C_SetSlaveAddr>:
  * @param  I2Cx I2C Instance.
  * @param  SlaveAddr This parameter must be a value between Min_Data=0x00 and Max_Data=0x3F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetSlaveAddr(I2C_TypeDef *I2Cx, uint32_t SlaveAddr)
{
 800137e:	b480      	push	{r7}
 8001380:	b083      	sub	sp, #12
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
 8001386:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD, SlaveAddr);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001390:	f023 0303 	bic.w	r3, r3, #3
 8001394:	683a      	ldr	r2, [r7, #0]
 8001396:	431a      	orrs	r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	605a      	str	r2, [r3, #4]
}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b4:	b2db      	uxtb	r3, r3
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr

080013c2 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 80013c2:	b480      	push	{r7}
 80013c4:	b083      	sub	sp, #12
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
 80013ca:	460b      	mov	r3, r1
 80013cc:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 80013ce:	78fa      	ldrb	r2, [r7, #3]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <LL_AHB1_GRP1_EnableClock>:
{
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80013e8:	4908      	ldr	r1, [pc, #32]	; (800140c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80013ea:	4b08      	ldr	r3, [pc, #32]	; (800140c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80013ec:	695a      	ldr	r2, [r3, #20]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80013f4:	4b05      	ldr	r3, [pc, #20]	; (800140c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80013f6:	695a      	ldr	r2, [r3, #20]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4013      	ands	r3, r2
 80013fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013fe:	68fb      	ldr	r3, [r7, #12]
}
 8001400:	bf00      	nop
 8001402:	3714      	adds	r7, #20
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	40021000 	.word	0x40021000

08001410 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001418:	4908      	ldr	r1, [pc, #32]	; (800143c <LL_APB1_GRP1_EnableClock+0x2c>)
 800141a:	4b08      	ldr	r3, [pc, #32]	; (800143c <LL_APB1_GRP1_EnableClock+0x2c>)
 800141c:	69da      	ldr	r2, [r3, #28]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4313      	orrs	r3, r2
 8001422:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001424:	4b05      	ldr	r3, [pc, #20]	; (800143c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001426:	69da      	ldr	r2, [r3, #28]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4013      	ands	r3, r2
 800142c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800142e:	68fb      	ldr	r3, [r7, #12]
}
 8001430:	bf00      	nop
 8001432:	3714      	adds	r7, #20
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	40021000 	.word	0x40021000

08001440 <MX_I2C1_Init>:

/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b08e      	sub	sp, #56	; 0x38
 8001444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8001446:	f107 031c 	add.w	r3, r7, #28
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	605a      	str	r2, [r3, #4]
 8001450:	609a      	str	r2, [r3, #8]
 8001452:	60da      	str	r2, [r3, #12]
 8001454:	611a      	str	r2, [r3, #16]
 8001456:	615a      	str	r2, [r3, #20]
 8001458:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145a:	1d3b      	adds	r3, r7, #4
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]
 8001468:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800146a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800146e:	f7ff ffb7 	bl	80013e0 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB8   ------> I2C1_SCL
  PB9   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 8001472:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001476:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001478:	2302      	movs	r3, #2
 800147a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800147c:	2303      	movs	r3, #3
 800147e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001480:	2301      	movs	r3, #1
 8001482:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001488:	2304      	movs	r3, #4
 800148a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800148c:	1d3b      	adds	r3, r7, #4
 800148e:	4619      	mov	r1, r3
 8001490:	481a      	ldr	r0, [pc, #104]	; (80014fc <MX_I2C1_Init+0xbc>)
 8001492:	f002 f976 	bl	8003782 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8001496:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800149a:	f7ff ffb9 	bl	8001410 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 800149e:	4818      	ldr	r0, [pc, #96]	; (8001500 <MX_I2C1_Init+0xc0>)
 80014a0:	f7ff ff26 	bl	80012f0 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 80014a4:	4816      	ldr	r0, [pc, #88]	; (8001500 <MX_I2C1_Init+0xc0>)
 80014a6:	f7ff feca 	bl	800123e <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 80014aa:	4815      	ldr	r0, [pc, #84]	; (8001500 <MX_I2C1_Init+0xc0>)
 80014ac:	f7ff fe8c 	bl	80011c8 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 80014b0:	4813      	ldr	r0, [pc, #76]	; (8001500 <MX_I2C1_Init+0xc0>)
 80014b2:	f7ff fe79 	bl	80011a8 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80014b6:	2300      	movs	r3, #0
 80014b8:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x00101D7C;
 80014ba:	4b12      	ldr	r3, [pc, #72]	; (8001504 <MX_I2C1_Init+0xc4>)
 80014bc:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 80014be:	2300      	movs	r3, #0
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80014ca:	2300      	movs	r3, #0
 80014cc:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_10BIT;
 80014ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014d2:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 80014d4:	f107 031c 	add.w	r3, r7, #28
 80014d8:	4619      	mov	r1, r3
 80014da:	4809      	ldr	r0, [pc, #36]	; (8001500 <MX_I2C1_Init+0xc0>)
 80014dc:	f002 fa64 	bl	80039a8 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 80014e0:	2200      	movs	r2, #0
 80014e2:	2100      	movs	r1, #0
 80014e4:	4806      	ldr	r0, [pc, #24]	; (8001500 <MX_I2C1_Init+0xc0>)
 80014e6:	f7ff fe92 	bl	800120e <LL_I2C_SetOwnAddress2>
  LL_I2C_SetMasterAddressingMode(I2C1, LL_I2C_ADDRESSING_MODE_10BIT);
 80014ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014ee:	4804      	ldr	r0, [pc, #16]	; (8001500 <MX_I2C1_Init+0xc0>)
 80014f0:	f7ff fe7a 	bl	80011e8 <LL_I2C_SetMasterAddressingMode>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014f4:	bf00      	nop
 80014f6:	3738      	adds	r7, #56	; 0x38
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	48000400 	.word	0x48000400
 8001500:	40005400 	.word	0x40005400
 8001504:	00101d7c 	.word	0x00101d7c

08001508 <MX_I2C1_MasterInit>:

/* USER CODE BEGIN 1 */

void MX_I2C1_MasterInit(MX_I2C1_XferType transferType, uint8_t transferSize, uint16_t periph_addr)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	71fb      	strb	r3, [r7, #7]
 8001512:	460b      	mov	r3, r1
 8001514:	71bb      	strb	r3, [r7, #6]
 8001516:	4613      	mov	r3, r2
 8001518:	80bb      	strh	r3, [r7, #4]
	/*Define Addressing mode*/
	LL_I2C_SetMasterAddressingMode(I2C1, LL_I2C_ADDRESSING_MODE_7BIT);
 800151a:	2100      	movs	r1, #0
 800151c:	4810      	ldr	r0, [pc, #64]	; (8001560 <MX_I2C1_MasterInit+0x58>)
 800151e:	f7ff fe63 	bl	80011e8 <LL_I2C_SetMasterAddressingMode>

	/*Define Slave Address*/
	LL_I2C_SetSlaveAddr(I2C1, periph_addr);
 8001522:	88bb      	ldrh	r3, [r7, #4]
 8001524:	4619      	mov	r1, r3
 8001526:	480e      	ldr	r0, [pc, #56]	; (8001560 <MX_I2C1_MasterInit+0x58>)
 8001528:	f7ff ff29 	bl	800137e <LL_I2C_SetSlaveAddr>

	/*Define Transfer Type*/
	if(transferType == MX_I2C1_xferRead)
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d105      	bne.n	800153e <MX_I2C1_MasterInit+0x36>
	{
		LL_I2C_SetTransferRequest(I2C1, LL_I2C_REQUEST_READ);
 8001532:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001536:	480a      	ldr	r0, [pc, #40]	; (8001560 <MX_I2C1_MasterInit+0x58>)
 8001538:	f7ff ff0e 	bl	8001358 <LL_I2C_SetTransferRequest>
 800153c:	e003      	b.n	8001546 <MX_I2C1_MasterInit+0x3e>
	}
	else
	{
		LL_I2C_SetTransferRequest(I2C1, LL_I2C_REQUEST_WRITE);
 800153e:	2100      	movs	r1, #0
 8001540:	4807      	ldr	r0, [pc, #28]	; (8001560 <MX_I2C1_MasterInit+0x58>)
 8001542:	f7ff ff09 	bl	8001358 <LL_I2C_SetTransferRequest>
	}

	/*Define transfer size*/
	LL_I2C_SetTransferSize(I2C1, transferSize);
 8001546:	79bb      	ldrb	r3, [r7, #6]
 8001548:	4619      	mov	r1, r3
 800154a:	4805      	ldr	r0, [pc, #20]	; (8001560 <MX_I2C1_MasterInit+0x58>)
 800154c:	f7ff fee0 	bl	8001310 <LL_I2C_SetTransferSize>

	/*Enable Auto End Mode*/
	LL_I2C_EnableAutoEndMode(I2C1);
 8001550:	4803      	ldr	r0, [pc, #12]	; (8001560 <MX_I2C1_MasterInit+0x58>)
 8001552:	f7ff fecd 	bl	80012f0 <LL_I2C_EnableAutoEndMode>

	return;
 8001556:	bf00      	nop
}
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40005400 	.word	0x40005400

08001564 <MX_I2C_Read>:

void MX_I2C_Read (uint8_t transferSize, uint8_t *dataRx, uint16_t periph_addr)
{
 8001564:	b590      	push	{r4, r7, lr}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	6039      	str	r1, [r7, #0]
 800156e:	71fb      	strb	r3, [r7, #7]
 8001570:	4613      	mov	r3, r2
 8001572:	80bb      	strh	r3, [r7, #4]
	/*Counter to read data*/
	uint8_t i = 0;
 8001574:	2300      	movs	r3, #0
 8001576:	73fb      	strb	r3, [r7, #15]

	/*Master Initialization*/
	MX_I2C1_MasterInit(MX_I2C1_xferRead, transferSize, periph_addr);
 8001578:	88ba      	ldrh	r2, [r7, #4]
 800157a:	79fb      	ldrb	r3, [r7, #7]
 800157c:	4619      	mov	r1, r3
 800157e:	2000      	movs	r0, #0
 8001580:	f7ff ffc2 	bl	8001508 <MX_I2C1_MasterInit>

	/*Generate Start Condition*/
	LL_I2C_GenerateStartCondition(I2C1);
 8001584:	4810      	ldr	r0, [pc, #64]	; (80015c8 <MX_I2C_Read+0x64>)
 8001586:	f7ff fed7 	bl	8001338 <LL_I2C_GenerateStartCondition>

	/*Check if Stop Flag is active or not*/
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 800158a:	e010      	b.n	80015ae <MX_I2C_Read+0x4a>
	{
		/*This condition is used to check if the buffer is not empty, if not dataRx pointer take information from the salve*/
		if(LL_I2C_IsActiveFlag_RXNE(I2C1))
 800158c:	480e      	ldr	r0, [pc, #56]	; (80015c8 <MX_I2C_Read+0x64>)
 800158e:	f7ff fe79 	bl	8001284 <LL_I2C_IsActiveFlag_RXNE>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d00a      	beq.n	80015ae <MX_I2C_Read+0x4a>
		{
			dataRx[i++] = LL_I2C_ReceiveData8(I2C1);
 8001598:	7bfb      	ldrb	r3, [r7, #15]
 800159a:	1c5a      	adds	r2, r3, #1
 800159c:	73fa      	strb	r2, [r7, #15]
 800159e:	461a      	mov	r2, r3
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	189c      	adds	r4, r3, r2
 80015a4:	4808      	ldr	r0, [pc, #32]	; (80015c8 <MX_I2C_Read+0x64>)
 80015a6:	f7ff feff 	bl	80013a8 <LL_I2C_ReceiveData8>
 80015aa:	4603      	mov	r3, r0
 80015ac:	7023      	strb	r3, [r4, #0]
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 80015ae:	4806      	ldr	r0, [pc, #24]	; (80015c8 <MX_I2C_Read+0x64>)
 80015b0:	f7ff fe7b 	bl	80012aa <LL_I2C_IsActiveFlag_STOP>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d0e8      	beq.n	800158c <MX_I2C_Read+0x28>
		}
	}

	/*Clear Stop flag when the data transmission has ended*/
	LL_I2C_ClearFlag_STOP(I2C1);
 80015ba:	4803      	ldr	r0, [pc, #12]	; (80015c8 <MX_I2C_Read+0x64>)
 80015bc:	f7ff fe88 	bl	80012d0 <LL_I2C_ClearFlag_STOP>

	return;
 80015c0:	bf00      	nop
}
 80015c2:	3714      	adds	r7, #20
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd90      	pop	{r4, r7, pc}
 80015c8:	40005400 	.word	0x40005400

080015cc <MX_I2C1_Write>:

void MX_I2C1_Write (uint8_t transferSize, uint8_t *dataTx, uint16_t periph_addr)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	6039      	str	r1, [r7, #0]
 80015d6:	71fb      	strb	r3, [r7, #7]
 80015d8:	4613      	mov	r3, r2
 80015da:	80bb      	strh	r3, [r7, #4]
	uint8_t i = 0;
 80015dc:	2300      	movs	r3, #0
 80015de:	73fb      	strb	r3, [r7, #15]

	/*Master Initialization*/
	MX_I2C1_MasterInit(MX_I2C1_xferWrite, transferSize, periph_addr);
 80015e0:	88ba      	ldrh	r2, [r7, #4]
 80015e2:	79fb      	ldrb	r3, [r7, #7]
 80015e4:	4619      	mov	r1, r3
 80015e6:	2001      	movs	r0, #1
 80015e8:	f7ff ff8e 	bl	8001508 <MX_I2C1_MasterInit>

	/*Generate Start Condition*/
	LL_I2C_GenerateStartCondition(I2C1);
 80015ec:	4810      	ldr	r0, [pc, #64]	; (8001630 <MX_I2C1_Write+0x64>)
 80015ee:	f7ff fea3 	bl	8001338 <LL_I2C_GenerateStartCondition>

	/*Check if Stop Flag is active or not*/
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 80015f2:	e010      	b.n	8001616 <MX_I2C1_Write+0x4a>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 80015f4:	480e      	ldr	r0, [pc, #56]	; (8001630 <MX_I2C1_Write+0x64>)
 80015f6:	f7ff fe32 	bl	800125e <LL_I2C_IsActiveFlag_TXIS>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d00a      	beq.n	8001616 <MX_I2C1_Write+0x4a>
		{
			LL_I2C_TransmitData8(I2C1, dataTx[i++]);
 8001600:	7bfb      	ldrb	r3, [r7, #15]
 8001602:	1c5a      	adds	r2, r3, #1
 8001604:	73fa      	strb	r2, [r7, #15]
 8001606:	461a      	mov	r2, r3
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	4413      	add	r3, r2
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	4619      	mov	r1, r3
 8001610:	4807      	ldr	r0, [pc, #28]	; (8001630 <MX_I2C1_Write+0x64>)
 8001612:	f7ff fed6 	bl	80013c2 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001616:	4806      	ldr	r0, [pc, #24]	; (8001630 <MX_I2C1_Write+0x64>)
 8001618:	f7ff fe47 	bl	80012aa <LL_I2C_IsActiveFlag_STOP>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d0e8      	beq.n	80015f4 <MX_I2C1_Write+0x28>
		}
	}

	/*Clear Stop flag when the data transmission has ended*/
	LL_I2C_ClearFlag_STOP(I2C1);
 8001622:	4803      	ldr	r0, [pc, #12]	; (8001630 <MX_I2C1_Write+0x64>)
 8001624:	f7ff fe54 	bl	80012d0 <LL_I2C_ClearFlag_STOP>

	return;
 8001628:	bf00      	nop
}
 800162a:	3710      	adds	r7, #16
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40005400 	.word	0x40005400

08001634 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001634:	b480      	push	{r7}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f003 0307 	and.w	r3, r3, #7
 8001642:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001644:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <__NVIC_SetPriorityGrouping+0x44>)
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800164a:	68ba      	ldr	r2, [r7, #8]
 800164c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001650:	4013      	ands	r3, r2
 8001652:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800165c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001664:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001666:	4a04      	ldr	r2, [pc, #16]	; (8001678 <__NVIC_SetPriorityGrouping+0x44>)
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	60d3      	str	r3, [r2, #12]
}
 800166c:	bf00      	nop
 800166e:	3714      	adds	r7, #20
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001680:	4b04      	ldr	r3, [pc, #16]	; (8001694 <__NVIC_GetPriorityGrouping+0x18>)
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	0a1b      	lsrs	r3, r3, #8
 8001686:	f003 0307 	and.w	r3, r3, #7
}
 800168a:	4618      	mov	r0, r3
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	6039      	str	r1, [r7, #0]
 80016a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	db0a      	blt.n	80016c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ac:	490d      	ldr	r1, [pc, #52]	; (80016e4 <__NVIC_SetPriority+0x4c>)
 80016ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b2:	683a      	ldr	r2, [r7, #0]
 80016b4:	b2d2      	uxtb	r2, r2
 80016b6:	0112      	lsls	r2, r2, #4
 80016b8:	b2d2      	uxtb	r2, r2
 80016ba:	440b      	add	r3, r1
 80016bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016c0:	e00a      	b.n	80016d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c2:	4909      	ldr	r1, [pc, #36]	; (80016e8 <__NVIC_SetPriority+0x50>)
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	f003 030f 	and.w	r3, r3, #15
 80016ca:	3b04      	subs	r3, #4
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	b2d2      	uxtb	r2, r2
 80016d0:	0112      	lsls	r2, r2, #4
 80016d2:	b2d2      	uxtb	r2, r2
 80016d4:	440b      	add	r3, r1
 80016d6:	761a      	strb	r2, [r3, #24]
}
 80016d8:	bf00      	nop
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	e000e100 	.word	0xe000e100
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b089      	sub	sp, #36	; 0x24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	f1c3 0307 	rsb	r3, r3, #7
 8001706:	2b04      	cmp	r3, #4
 8001708:	bf28      	it	cs
 800170a:	2304      	movcs	r3, #4
 800170c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	3304      	adds	r3, #4
 8001712:	2b06      	cmp	r3, #6
 8001714:	d902      	bls.n	800171c <NVIC_EncodePriority+0x30>
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	3b03      	subs	r3, #3
 800171a:	e000      	b.n	800171e <NVIC_EncodePriority+0x32>
 800171c:	2300      	movs	r3, #0
 800171e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001720:	2201      	movs	r2, #1
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	1e5a      	subs	r2, r3, #1
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	401a      	ands	r2, r3
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001732:	2101      	movs	r1, #1
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	fa01 f303 	lsl.w	r3, r1, r3
 800173a:	1e59      	subs	r1, r3, #1
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001740:	4313      	orrs	r3, r2
         );
}
 8001742:	4618      	mov	r0, r3
 8001744:	3724      	adds	r7, #36	; 0x24
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
	...

08001750 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001754:	4a05      	ldr	r2, [pc, #20]	; (800176c <LL_RCC_HSI_Enable+0x1c>)
 8001756:	4b05      	ldr	r3, [pc, #20]	; (800176c <LL_RCC_HSI_Enable+0x1c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f043 0301 	orr.w	r3, r3, #1
 800175e:	6013      	str	r3, [r2, #0]
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	40021000 	.word	0x40021000

08001770 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001774:	4b06      	ldr	r3, [pc, #24]	; (8001790 <LL_RCC_HSI_IsReady+0x20>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0302 	and.w	r3, r3, #2
 800177c:	2b02      	cmp	r3, #2
 800177e:	bf0c      	ite	eq
 8001780:	2301      	moveq	r3, #1
 8001782:	2300      	movne	r3, #0
 8001784:	b2db      	uxtb	r3, r3
}
 8001786:	4618      	mov	r0, r3
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	40021000 	.word	0x40021000

08001794 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 800179c:	4907      	ldr	r1, [pc, #28]	; (80017bc <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800179e:	4b07      	ldr	r3, [pc, #28]	; (80017bc <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	00db      	lsls	r3, r3, #3
 80017aa:	4313      	orrs	r3, r2
 80017ac:	600b      	str	r3, [r1, #0]
}
 80017ae:	bf00      	nop
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	40021000 	.word	0x40021000

080017c0 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80017c4:	4a05      	ldr	r2, [pc, #20]	; (80017dc <LL_RCC_LSI_Enable+0x1c>)
 80017c6:	4b05      	ldr	r3, [pc, #20]	; (80017dc <LL_RCC_LSI_Enable+0x1c>)
 80017c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ca:	f043 0301 	orr.w	r3, r3, #1
 80017ce:	6253      	str	r3, [r2, #36]	; 0x24
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	40021000 	.word	0x40021000

080017e0 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY));
 80017e4:	4b06      	ldr	r3, [pc, #24]	; (8001800 <LL_RCC_LSI_IsReady+0x20>)
 80017e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e8:	f003 0302 	and.w	r3, r3, #2
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	bf0c      	ite	eq
 80017f0:	2301      	moveq	r3, #1
 80017f2:	2300      	movne	r3, #0
 80017f4:	b2db      	uxtb	r3, r3
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	40021000 	.word	0x40021000

08001804 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800180c:	4906      	ldr	r1, [pc, #24]	; (8001828 <LL_RCC_SetSysClkSource+0x24>)
 800180e:	4b06      	ldr	r3, [pc, #24]	; (8001828 <LL_RCC_SetSysClkSource+0x24>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f023 0203 	bic.w	r2, r3, #3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4313      	orrs	r3, r2
 800181a:	604b      	str	r3, [r1, #4]
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	40021000 	.word	0x40021000

0800182c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001830:	4b04      	ldr	r3, [pc, #16]	; (8001844 <LL_RCC_GetSysClkSource+0x18>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f003 030c 	and.w	r3, r3, #12
}
 8001838:	4618      	mov	r0, r3
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	40021000 	.word	0x40021000

08001848 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001850:	4906      	ldr	r1, [pc, #24]	; (800186c <LL_RCC_SetAHBPrescaler+0x24>)
 8001852:	4b06      	ldr	r3, [pc, #24]	; (800186c <LL_RCC_SetAHBPrescaler+0x24>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4313      	orrs	r3, r2
 800185e:	604b      	str	r3, [r1, #4]
}
 8001860:	bf00      	nop
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	40021000 	.word	0x40021000

08001870 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001878:	4906      	ldr	r1, [pc, #24]	; (8001894 <LL_RCC_SetAPB1Prescaler+0x24>)
 800187a:	4b06      	ldr	r3, [pc, #24]	; (8001894 <LL_RCC_SetAPB1Prescaler+0x24>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4313      	orrs	r3, r2
 8001886:	604b      	str	r3, [r1, #4]
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	40021000 	.word	0x40021000

08001898 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80018a0:	4906      	ldr	r1, [pc, #24]	; (80018bc <LL_RCC_SetAPB2Prescaler+0x24>)
 80018a2:	4b06      	ldr	r3, [pc, #24]	; (80018bc <LL_RCC_SetAPB2Prescaler+0x24>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	604b      	str	r3, [r1, #4]
}
 80018b0:	bf00      	nop
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	40021000 	.word	0x40021000

080018c0 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 80018c8:	4908      	ldr	r1, [pc, #32]	; (80018ec <LL_RCC_SetI2CClockSource+0x2c>)
 80018ca:	4b08      	ldr	r3, [pc, #32]	; (80018ec <LL_RCC_SetI2CClockSource+0x2c>)
 80018cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	0e1b      	lsrs	r3, r3, #24
 80018d2:	43db      	mvns	r3, r3
 80018d4:	401a      	ands	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80018dc:	4313      	orrs	r3, r2
 80018de:	630b      	str	r3, [r1, #48]	; 0x30
}
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	40021000 	.word	0x40021000

080018f0 <LL_RCC_SetADCClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
#if defined(RCC_CFGR2_ADCPRE34)
  MODIFY_REG(RCC->CFGR2, (ADCxSource >> 16U), (ADCxSource & 0x0000FFFFU));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_ADCPRE12, ADCxSource);
 80018f8:	4906      	ldr	r1, [pc, #24]	; (8001914 <LL_RCC_SetADCClockSource+0x24>)
 80018fa:	4b06      	ldr	r3, [pc, #24]	; (8001914 <LL_RCC_SetADCClockSource+0x24>)
 80018fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fe:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4313      	orrs	r3, r2
 8001906:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_ADCPRE34 */
}
 8001908:	bf00      	nop
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	40021000 	.word	0x40021000

08001918 <LL_RCC_SetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV32
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRTCClockSource(uint32_t Source)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8001920:	4906      	ldr	r1, [pc, #24]	; (800193c <LL_RCC_SetRTCClockSource+0x24>)
 8001922:	4b06      	ldr	r3, [pc, #24]	; (800193c <LL_RCC_SetRTCClockSource+0x24>)
 8001924:	6a1b      	ldr	r3, [r3, #32]
 8001926:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4313      	orrs	r3, r2
 800192e:	620b      	str	r3, [r1, #32]
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	40021000 	.word	0x40021000

08001940 <LL_RCC_GetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSE
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV32
  */
__STATIC_INLINE uint32_t LL_RCC_GetRTCClockSource(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8001944:	4b04      	ldr	r3, [pc, #16]	; (8001958 <LL_RCC_GetRTCClockSource+0x18>)
 8001946:	6a1b      	ldr	r3, [r3, #32]
 8001948:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800194c:	4618      	mov	r0, r3
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	40021000 	.word	0x40021000

0800195c <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001960:	4a05      	ldr	r2, [pc, #20]	; (8001978 <LL_RCC_EnableRTC+0x1c>)
 8001962:	4b05      	ldr	r3, [pc, #20]	; (8001978 <LL_RCC_EnableRTC+0x1c>)
 8001964:	6a1b      	ldr	r3, [r3, #32]
 8001966:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800196a:	6213      	str	r3, [r2, #32]
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	40021000 	.word	0x40021000

0800197c <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001980:	4a05      	ldr	r2, [pc, #20]	; (8001998 <LL_RCC_ForceBackupDomainReset+0x1c>)
 8001982:	4b05      	ldr	r3, [pc, #20]	; (8001998 <LL_RCC_ForceBackupDomainReset+0x1c>)
 8001984:	6a1b      	ldr	r3, [r3, #32]
 8001986:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800198a:	6213      	str	r3, [r2, #32]
}
 800198c:	bf00      	nop
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	40021000 	.word	0x40021000

0800199c <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80019a0:	4a05      	ldr	r2, [pc, #20]	; (80019b8 <LL_RCC_ReleaseBackupDomainReset+0x1c>)
 80019a2:	4b05      	ldr	r3, [pc, #20]	; (80019b8 <LL_RCC_ReleaseBackupDomainReset+0x1c>)
 80019a4:	6a1b      	ldr	r3, [r3, #32]
 80019a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019aa:	6213      	str	r3, [r2, #32]
}
 80019ac:	bf00      	nop
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	40021000 	.word	0x40021000

080019bc <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80019c0:	4a05      	ldr	r2, [pc, #20]	; (80019d8 <LL_RCC_PLL_Enable+0x1c>)
 80019c2:	4b05      	ldr	r3, [pc, #20]	; (80019d8 <LL_RCC_PLL_Enable+0x1c>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019ca:	6013      	str	r3, [r2, #0]
}
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	40021000 	.word	0x40021000

080019dc <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80019e0:	4b07      	ldr	r3, [pc, #28]	; (8001a00 <LL_RCC_PLL_IsReady+0x24>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80019ec:	bf0c      	ite	eq
 80019ee:	2301      	moveq	r3, #1
 80019f0:	2300      	movne	r3, #0
 80019f2:	b2db      	uxtb	r3, r3
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	40021000 	.word	0x40021000

08001a04 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, (Source & RCC_CFGR_PLLSRC) | PLLMul);
 8001a0e:	480e      	ldr	r0, [pc, #56]	; (8001a48 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001a10:	4b0d      	ldr	r3, [pc, #52]	; (8001a48 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	430b      	orrs	r3, r1
 8001a22:	4313      	orrs	r3, r2
 8001a24:	6043      	str	r3, [r0, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, (Source & RCC_CFGR2_PREDIV));
 8001a26:	4908      	ldr	r1, [pc, #32]	; (8001a48 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001a28:	4b07      	ldr	r3, [pc, #28]	; (8001a48 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a2c:	f023 020f 	bic.w	r2, r3, #15
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f003 030f 	and.w	r3, r3, #15
 8001a36:	4313      	orrs	r3, r2
 8001a38:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8001a3a:	bf00      	nop
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	40021000 	.word	0x40021000

08001a4c <LL_APB1_GRP1_EnableClock>:
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001a54:	4908      	ldr	r1, [pc, #32]	; (8001a78 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a56:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a58:	69da      	ldr	r2, [r3, #28]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001a60:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a62:	69da      	ldr	r2, [r3, #28]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	4013      	ands	r3, r2
 8001a68:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
}
 8001a6c:	bf00      	nop
 8001a6e:	3714      	adds	r7, #20
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	40021000 	.word	0x40021000

08001a7c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001a84:	4908      	ldr	r1, [pc, #32]	; (8001aa8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001a86:	4b08      	ldr	r3, [pc, #32]	; (8001aa8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001a88:	699a      	ldr	r2, [r3, #24]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001a90:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001a92:	699a      	ldr	r2, [r3, #24]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	4013      	ands	r3, r2
 8001a98:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
}
 8001a9c:	bf00      	nop
 8001a9e:	3714      	adds	r7, #20
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	40021000 	.word	0x40021000

08001aac <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001ab4:	4906      	ldr	r1, [pc, #24]	; (8001ad0 <LL_FLASH_SetLatency+0x24>)
 8001ab6:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <LL_FLASH_SetLatency+0x24>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f023 0207 	bic.w	r2, r3, #7
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	600b      	str	r3, [r1, #0]
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	40022000 	.word	0x40022000

08001ad4 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001ad8:	4b04      	ldr	r3, [pc, #16]	; (8001aec <LL_FLASH_GetLatency+0x18>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0307 	and.w	r3, r3, #7
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	40022000 	.word	0x40022000

08001af0 <LL_PWR_EnableBkUpAccess>:
  * @brief  Enable access to the backup domain
  * @rmtoll CR    DBP       LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8001af4:	4a05      	ldr	r2, [pc, #20]	; (8001b0c <LL_PWR_EnableBkUpAccess+0x1c>)
 8001af6:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <LL_PWR_EnableBkUpAccess+0x1c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001afe:	6013      	str	r3, [r2, #0]
}
 8001b00:	bf00      	nop
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	40007000 	.word	0x40007000

08001b10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b10:	b590      	push	{r4, r7, lr}
 8001b12:	b087      	sub	sp, #28
 8001b14:	af02      	add	r7, sp, #8

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001b16:	2001      	movs	r0, #1
 8001b18:	f7ff ffb0 	bl	8001a7c <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001b1c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001b20:	f7ff ff94 	bl	8001a4c <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b24:	2003      	movs	r0, #3
 8001b26:	f7ff fd85 	bl	8001634 <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8001b2a:	f7ff fda7 	bl	800167c <__NVIC_GetPriorityGrouping>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2200      	movs	r2, #0
 8001b32:	210f      	movs	r1, #15
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff fdd9 	bl	80016ec <NVIC_EncodePriority>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	f04f 30ff 	mov.w	r0, #4294967295
 8001b42:	f7ff fda9 	bl	8001698 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b46:	f000 f8bf 	bl	8001cc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b4a:	f7ff f9e5 	bl	8000f18 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_TEMPSen_Init();
 8001b4e:	f002 fe33 	bl	80047b8 <HAL_TEMPSen_Init>
  HAL_RTC_Init();
 8001b52:	f002 fe03 	bl	800475c <HAL_RTC_Init>
  HAL_LCD_Init();
 8001b56:	f002 fbbe 	bl	80042d6 <HAL_LCD_Init>
  HAL_POT_Init();
 8001b5a:	f002 fd55 	bl	8004608 <HAL_POT_Init>
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_LCD_Write_AsciiString(word[iniciando],36,1);
 8001b5e:	2201      	movs	r2, #1
 8001b60:	2124      	movs	r1, #36	; 0x24
 8001b62:	4849      	ldr	r0, [pc, #292]	; (8001c88 <main+0x178>)
 8001b64:	f002 fcee 	bl	8004544 <HAL_LCD_Write_AsciiString>
  LL_mDelay(1000);
 8001b68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b6c:	f002 fb40 	bl	80041f0 <LL_mDelay>
  HAL_LCD_Clear();
 8001b70:	f002 fc2a 	bl	80043c8 <HAL_LCD_Clear>
  uint8_t inicio2=0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	73fb      	strb	r3, [r7, #15]
  while (1)
  {
	  HAL_Get_ActualTime(&Hora,&Minuto,&Segundo);
 8001b78:	4a44      	ldr	r2, [pc, #272]	; (8001c8c <main+0x17c>)
 8001b7a:	4945      	ldr	r1, [pc, #276]	; (8001c90 <main+0x180>)
 8001b7c:	4845      	ldr	r0, [pc, #276]	; (8001c94 <main+0x184>)
 8001b7e:	f002 fdf3 	bl	8004768 <HAL_Get_ActualTime>
	  if (inicio==1)
 8001b82:	4b45      	ldr	r3, [pc, #276]	; (8001c98 <main+0x188>)
 8001b84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d159      	bne.n	8001c40 <main+0x130>
	  	  {

		  if (IntervaloH1==Hora && IntervaloM1==Minuto && alarma1==inactive)
 8001b8c:	4b43      	ldr	r3, [pc, #268]	; (8001c9c <main+0x18c>)
 8001b8e:	781a      	ldrb	r2, [r3, #0]
 8001b90:	4b40      	ldr	r3, [pc, #256]	; (8001c94 <main+0x184>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d117      	bne.n	8001bc8 <main+0xb8>
 8001b98:	4b41      	ldr	r3, [pc, #260]	; (8001ca0 <main+0x190>)
 8001b9a:	781a      	ldrb	r2, [r3, #0]
 8001b9c:	4b3c      	ldr	r3, [pc, #240]	; (8001c90 <main+0x180>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d111      	bne.n	8001bc8 <main+0xb8>
 8001ba4:	4b3f      	ldr	r3, [pc, #252]	; (8001ca4 <main+0x194>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d10d      	bne.n	8001bc8 <main+0xb8>
		  {
			  if (inicio2==0)
 8001bac:	7bfb      	ldrb	r3, [r7, #15]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d104      	bne.n	8001bbc <main+0xac>
			  {
				  first=0;
 8001bb2:	4b3d      	ldr	r3, [pc, #244]	; (8001ca8 <main+0x198>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	801a      	strh	r2, [r3, #0]
				  inicio2=1;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	73fb      	strb	r3, [r7, #15]
			  }
		  	  EA=E5;
 8001bbc:	4b3b      	ldr	r3, [pc, #236]	; (8001cac <main+0x19c>)
 8001bbe:	2205      	movs	r2, #5
 8001bc0:	701a      	strb	r2, [r3, #0]
		  	  alarma1=active;
 8001bc2:	4b38      	ldr	r3, [pc, #224]	; (8001ca4 <main+0x194>)
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	701a      	strb	r2, [r3, #0]

		  }
		  if (IntervaloH2==Hora && IntervaloM2==Minuto && alarma2==inactive)
 8001bc8:	4b39      	ldr	r3, [pc, #228]	; (8001cb0 <main+0x1a0>)
 8001bca:	781a      	ldrb	r2, [r3, #0]
 8001bcc:	4b31      	ldr	r3, [pc, #196]	; (8001c94 <main+0x184>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d117      	bne.n	8001c04 <main+0xf4>
 8001bd4:	4b37      	ldr	r3, [pc, #220]	; (8001cb4 <main+0x1a4>)
 8001bd6:	781a      	ldrb	r2, [r3, #0]
 8001bd8:	4b2d      	ldr	r3, [pc, #180]	; (8001c90 <main+0x180>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d111      	bne.n	8001c04 <main+0xf4>
 8001be0:	4b35      	ldr	r3, [pc, #212]	; (8001cb8 <main+0x1a8>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d10d      	bne.n	8001c04 <main+0xf4>
		  {
			  if (inicio2==0)
 8001be8:	7bfb      	ldrb	r3, [r7, #15]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d104      	bne.n	8001bf8 <main+0xe8>
			  {
			  first=0;
 8001bee:	4b2e      	ldr	r3, [pc, #184]	; (8001ca8 <main+0x198>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	801a      	strh	r2, [r3, #0]
			  inicio2=1;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	73fb      	strb	r3, [r7, #15]
			  }
			  EA=E5;
 8001bf8:	4b2c      	ldr	r3, [pc, #176]	; (8001cac <main+0x19c>)
 8001bfa:	2205      	movs	r2, #5
 8001bfc:	701a      	strb	r2, [r3, #0]
		  	  alarma2=active;
 8001bfe:	4b2e      	ldr	r3, [pc, #184]	; (8001cb8 <main+0x1a8>)
 8001c00:	2201      	movs	r2, #1
 8001c02:	701a      	strb	r2, [r3, #0]

		  }
		  if (IntervaloH3 == Hora && IntervaloM3 == Minuto && alarma3==inactive)
 8001c04:	4b2d      	ldr	r3, [pc, #180]	; (8001cbc <main+0x1ac>)
 8001c06:	781a      	ldrb	r2, [r3, #0]
 8001c08:	4b22      	ldr	r3, [pc, #136]	; (8001c94 <main+0x184>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d117      	bne.n	8001c40 <main+0x130>
 8001c10:	4b2b      	ldr	r3, [pc, #172]	; (8001cc0 <main+0x1b0>)
 8001c12:	781a      	ldrb	r2, [r3, #0]
 8001c14:	4b1e      	ldr	r3, [pc, #120]	; (8001c90 <main+0x180>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d111      	bne.n	8001c40 <main+0x130>
 8001c1c:	4b29      	ldr	r3, [pc, #164]	; (8001cc4 <main+0x1b4>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d10d      	bne.n	8001c40 <main+0x130>
		  {
			  if (inicio2==0)
 8001c24:	7bfb      	ldrb	r3, [r7, #15]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d104      	bne.n	8001c34 <main+0x124>
			  {
			  first=0;
 8001c2a:	4b1f      	ldr	r3, [pc, #124]	; (8001ca8 <main+0x198>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	801a      	strh	r2, [r3, #0]
			  inicio2=1;
 8001c30:	2301      	movs	r3, #1
 8001c32:	73fb      	strb	r3, [r7, #15]
			  }
			  EA=E5;
 8001c34:	4b1d      	ldr	r3, [pc, #116]	; (8001cac <main+0x19c>)
 8001c36:	2205      	movs	r2, #5
 8001c38:	701a      	strb	r2, [r3, #0]
		  	  alarma3=active;
 8001c3a:	4b22      	ldr	r3, [pc, #136]	; (8001cc4 <main+0x1b4>)
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	701a      	strb	r2, [r3, #0]

		  }
	  }
	  short btnu = HAL_JOYSTICK_UpPressed();
 8001c40:	f002 fb11 	bl	8004266 <HAL_JOYSTICK_UpPressed>
 8001c44:	4603      	mov	r3, r0
 8001c46:	81bb      	strh	r3, [r7, #12]
	 // LL_mDelay(2);
	  short btnd = HAL_JOYSTICK_DownPressed();
 8001c48:	f002 fb14 	bl	8004274 <HAL_JOYSTICK_DownPressed>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	817b      	strh	r3, [r7, #10]
	  //LL_mDelay(2);
	  short btnl = HAL_JOYSTICK_LeftPressed();
 8001c50:	f002 fb1e 	bl	8004290 <HAL_JOYSTICK_LeftPressed>
 8001c54:	4603      	mov	r3, r0
 8001c56:	813b      	strh	r3, [r7, #8]
	  //LL_mDelay(2);
	  short btnr = HAL_JOYSTICK_RightPressed();
 8001c58:	f002 fb13 	bl	8004282 <HAL_JOYSTICK_RightPressed>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	80fb      	strh	r3, [r7, #6]
	 // LL_mDelay(2);
	  short btnc = HAL_JOYSTICK_CenterPressed();
 8001c60:	f002 fafa 	bl	8004258 <HAL_JOYSTICK_CenterPressed>
 8001c64:	4603      	mov	r3, r0
 8001c66:	80bb      	strh	r3, [r7, #4]
	  fsm(btnu, btnd, btnl, btnr, btnc);
 8001c68:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8001c6c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001c70:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001c74:	f9b7 000c 	ldrsh.w	r0, [r7, #12]
 8001c78:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001c7c:	9300      	str	r3, [sp, #0]
 8001c7e:	4623      	mov	r3, r4
 8001c80:	f000 ff76 	bl	8002b70 <fsm>
  {
 8001c84:	e778      	b.n	8001b78 <main+0x68>
 8001c86:	bf00      	nop
 8001c88:	20000069 	.word	0x20000069
 8001c8c:	200006fb 	.word	0x200006fb
 8001c90:	200006f5 	.word	0x200006f5
 8001c94:	200006fe 	.word	0x200006fe
 8001c98:	200006de 	.word	0x200006de
 8001c9c:	200006fa 	.word	0x200006fa
 8001ca0:	200006f9 	.word	0x200006f9
 8001ca4:	200006f6 	.word	0x200006f6
 8001ca8:	200006dc 	.word	0x200006dc
 8001cac:	200006d8 	.word	0x200006d8
 8001cb0:	200006fc 	.word	0x200006fc
 8001cb4:	200006fd 	.word	0x200006fd
 8001cb8:	200006ff 	.word	0x200006ff
 8001cbc:	20000700 	.word	0x20000700
 8001cc0:	200006f7 	.word	0x200006f7
 8001cc4:	200006f8 	.word	0x200006f8

08001cc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8001ccc:	2002      	movs	r0, #2
 8001cce:	f7ff feed 	bl	8001aac <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8001cd2:	bf00      	nop
 8001cd4:	f7ff fefe 	bl	8001ad4 <LL_FLASH_GetLatency>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d1fa      	bne.n	8001cd4 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 8001cde:	f7ff fd37 	bl	8001750 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001ce2:	bf00      	nop
 8001ce4:	f7ff fd44 	bl	8001770 <LL_RCC_HSI_IsReady>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d1fa      	bne.n	8001ce4 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8001cee:	2010      	movs	r0, #16
 8001cf0:	f7ff fd50 	bl	8001794 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_LSI_Enable();
 8001cf4:	f7ff fd64 	bl	80017c0 <LL_RCC_LSI_Enable>

   /* Wait till LSI is ready */
  while(LL_RCC_LSI_IsReady() != 1)
 8001cf8:	bf00      	nop
 8001cfa:	f7ff fd71 	bl	80017e0 <LL_RCC_LSI_IsReady>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d1fa      	bne.n	8001cfa <SystemClock_Config+0x32>
  {

  }
  LL_PWR_EnableBkUpAccess();
 8001d04:	f7ff fef4 	bl	8001af0 <LL_PWR_EnableBkUpAccess>
  if(LL_RCC_GetRTCClockSource() != LL_RCC_RTC_CLKSOURCE_LSI)
 8001d08:	f7ff fe1a 	bl	8001940 <LL_RCC_GetRTCClockSource>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d12:	d007      	beq.n	8001d24 <SystemClock_Config+0x5c>
  {
    LL_RCC_ForceBackupDomainReset();
 8001d14:	f7ff fe32 	bl	800197c <LL_RCC_ForceBackupDomainReset>
    LL_RCC_ReleaseBackupDomainReset();
 8001d18:	f7ff fe40 	bl	800199c <LL_RCC_ReleaseBackupDomainReset>
    LL_RCC_SetRTCClockSource(LL_RCC_RTC_CLKSOURCE_LSI);
 8001d1c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001d20:	f7ff fdfa 	bl	8001918 <LL_RCC_SetRTCClockSource>
  }
  LL_RCC_EnableRTC();
 8001d24:	f7ff fe1a 	bl	800195c <LL_RCC_EnableRTC>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI_DIV_2, LL_RCC_PLL_MUL_16);
 8001d28:	f44f 1160 	mov.w	r1, #3670016	; 0x380000
 8001d2c:	2000      	movs	r0, #0
 8001d2e:	f7ff fe69 	bl	8001a04 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8001d32:	f7ff fe43 	bl	80019bc <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001d36:	bf00      	nop
 8001d38:	f7ff fe50 	bl	80019dc <LL_RCC_PLL_IsReady>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d1fa      	bne.n	8001d38 <SystemClock_Config+0x70>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001d42:	2000      	movs	r0, #0
 8001d44:	f7ff fd80 	bl	8001848 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8001d48:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001d4c:	f7ff fd90 	bl	8001870 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_16);
 8001d50:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8001d54:	f7ff fda0 	bl	8001898 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001d58:	2002      	movs	r0, #2
 8001d5a:	f7ff fd53 	bl	8001804 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001d5e:	bf00      	nop
 8001d60:	f7ff fd64 	bl	800182c <LL_RCC_GetSysClkSource>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b08      	cmp	r3, #8
 8001d68:	d1fa      	bne.n	8001d60 <SystemClock_Config+0x98>
  {

  }
  LL_Init1msTick(64000000);
 8001d6a:	4808      	ldr	r0, [pc, #32]	; (8001d8c <SystemClock_Config+0xc4>)
 8001d6c:	f002 fa32 	bl	80041d4 <LL_Init1msTick>
  LL_SetSystemCoreClock(64000000);
 8001d70:	4806      	ldr	r0, [pc, #24]	; (8001d8c <SystemClock_Config+0xc4>)
 8001d72:	f002 fa61 	bl	8004238 <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 8001d76:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001d7a:	f7ff fda1 	bl	80018c0 <LL_RCC_SetI2CClockSource>
  LL_RCC_SetADCClockSource(LL_RCC_ADC12_CLKSRC_PLL_DIV_1);
 8001d7e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001d82:	f7ff fdb5 	bl	80018f0 <LL_RCC_SetADCClockSource>
}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	03d09000 	.word	0x03d09000

08001d90 <estado_Anterior>:

/* USER CODE BEGIN 4 */
void estado_Anterior(short btnU, short btnD, short btnL, short btnR, short btnC){
 8001d90:	b490      	push	{r4, r7}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4604      	mov	r4, r0
 8001d98:	4608      	mov	r0, r1
 8001d9a:	4611      	mov	r1, r2
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	4623      	mov	r3, r4
 8001da0:	80fb      	strh	r3, [r7, #6]
 8001da2:	4603      	mov	r3, r0
 8001da4:	80bb      	strh	r3, [r7, #4]
 8001da6:	460b      	mov	r3, r1
 8001da8:	807b      	strh	r3, [r7, #2]
 8001daa:	4613      	mov	r3, r2
 8001dac:	803b      	strh	r3, [r7, #0]
	btnUa = btnU;
 8001dae:	4a0a      	ldr	r2, [pc, #40]	; (8001dd8 <estado_Anterior+0x48>)
 8001db0:	88fb      	ldrh	r3, [r7, #6]
 8001db2:	8013      	strh	r3, [r2, #0]
	btnDa = btnD;
 8001db4:	4a09      	ldr	r2, [pc, #36]	; (8001ddc <estado_Anterior+0x4c>)
 8001db6:	88bb      	ldrh	r3, [r7, #4]
 8001db8:	8013      	strh	r3, [r2, #0]
	btnLa = btnL;
 8001dba:	4a09      	ldr	r2, [pc, #36]	; (8001de0 <estado_Anterior+0x50>)
 8001dbc:	887b      	ldrh	r3, [r7, #2]
 8001dbe:	8013      	strh	r3, [r2, #0]
	btnRa = btnR;
 8001dc0:	4a08      	ldr	r2, [pc, #32]	; (8001de4 <estado_Anterior+0x54>)
 8001dc2:	883b      	ldrh	r3, [r7, #0]
 8001dc4:	8013      	strh	r3, [r2, #0]
	btnCa = btnC;
 8001dc6:	4a08      	ldr	r2, [pc, #32]	; (8001de8 <estado_Anterior+0x58>)
 8001dc8:	8a3b      	ldrh	r3, [r7, #16]
 8001dca:	8013      	strh	r3, [r2, #0]
}
 8001dcc:	bf00      	nop
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bc90      	pop	{r4, r7}
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	200006e8 	.word	0x200006e8
 8001ddc:	200006e4 	.word	0x200006e4
 8001de0:	200006e6 	.word	0x200006e6
 8001de4:	200006e0 	.word	0x200006e0
 8001de8:	200006ec 	.word	0x200006ec

08001dec <EDO_0>:

// Funciones por estado
void EDO_0(short btnU, short btnD, short btnL, short btnR, short btnC){
 8001dec:	b590      	push	{r4, r7, lr}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af02      	add	r7, sp, #8
 8001df2:	4604      	mov	r4, r0
 8001df4:	4608      	mov	r0, r1
 8001df6:	4611      	mov	r1, r2
 8001df8:	461a      	mov	r2, r3
 8001dfa:	4623      	mov	r3, r4
 8001dfc:	80fb      	strh	r3, [r7, #6]
 8001dfe:	4603      	mov	r3, r0
 8001e00:	80bb      	strh	r3, [r7, #4]
 8001e02:	460b      	mov	r3, r1
 8001e04:	807b      	strh	r3, [r7, #2]
 8001e06:	4613      	mov	r3, r2
 8001e08:	803b      	strh	r3, [r7, #0]
	// Configuracion de reloj
	if(first == 0){
 8001e0a:	4b4d      	ldr	r3, [pc, #308]	; (8001f40 <EDO_0+0x154>)
 8001e0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d116      	bne.n	8001e42 <EDO_0+0x56>
		// Mostrado de valores fijos
		HAL_LCD_Write_AsciiString(word[configuracion],24,0);
 8001e14:	2200      	movs	r2, #0
 8001e16:	2118      	movs	r1, #24
 8001e18:	484a      	ldr	r0, [pc, #296]	; (8001f44 <EDO_0+0x158>)
 8001e1a:	f002 fb93 	bl	8004544 <HAL_LCD_Write_AsciiString>
		HAL_LCD_Write_AsciiString(word[reloj],48,1);
 8001e1e:	2201      	movs	r2, #1
 8001e20:	2130      	movs	r1, #48	; 0x30
 8001e22:	4849      	ldr	r0, [pc, #292]	; (8001f48 <EDO_0+0x15c>)
 8001e24:	f002 fb8e 	bl	8004544 <HAL_LCD_Write_AsciiString>
		HAL_LCD_Write_ascii(':',60,2);
 8001e28:	2202      	movs	r2, #2
 8001e2a:	213c      	movs	r1, #60	; 0x3c
 8001e2c:	203a      	movs	r0, #58	; 0x3a
 8001e2e:	f002 fb21 	bl	8004474 <HAL_LCD_Write_ascii>
		HAL_LCD_Write_AsciiString(word[aceptar],36,3);
 8001e32:	2203      	movs	r2, #3
 8001e34:	2124      	movs	r1, #36	; 0x24
 8001e36:	4845      	ldr	r0, [pc, #276]	; (8001f4c <EDO_0+0x160>)
 8001e38:	f002 fb84 	bl	8004544 <HAL_LCD_Write_AsciiString>
		first = 1;
 8001e3c:	4b40      	ldr	r3, [pc, #256]	; (8001f40 <EDO_0+0x154>)
 8001e3e:	2201      	movs	r2, #1
 8001e40:	801a      	strh	r2, [r3, #0]
	}
	Horas = HAL_POT_Percentage(POT1_Channel)*23/100;
 8001e42:	2000      	movs	r0, #0
 8001e44:	f002 fc02 	bl	800464c <HAL_POT_Percentage>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	4413      	add	r3, r2
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	1a9b      	subs	r3, r3, r2
 8001e56:	4a3e      	ldr	r2, [pc, #248]	; (8001f50 <EDO_0+0x164>)
 8001e58:	fb82 1203 	smull	r1, r2, r2, r3
 8001e5c:	1152      	asrs	r2, r2, #5
 8001e5e:	17db      	asrs	r3, r3, #31
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	b2da      	uxtb	r2, r3
 8001e64:	4b3b      	ldr	r3, [pc, #236]	; (8001f54 <EDO_0+0x168>)
 8001e66:	701a      	strb	r2, [r3, #0]
	Minutos = HAL_POT_Percentage(POT2_Channel)*59/100;
 8001e68:	2001      	movs	r0, #1
 8001e6a:	f002 fbef 	bl	800464c <HAL_POT_Percentage>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	461a      	mov	r2, r3
 8001e72:	4613      	mov	r3, r2
 8001e74:	011b      	lsls	r3, r3, #4
 8001e76:	1a9b      	subs	r3, r3, r2
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	1a9b      	subs	r3, r3, r2
 8001e7c:	4a34      	ldr	r2, [pc, #208]	; (8001f50 <EDO_0+0x164>)
 8001e7e:	fb82 1203 	smull	r1, r2, r2, r3
 8001e82:	1152      	asrs	r2, r2, #5
 8001e84:	17db      	asrs	r3, r3, #31
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	b2da      	uxtb	r2, r3
 8001e8a:	4b33      	ldr	r3, [pc, #204]	; (8001f58 <EDO_0+0x16c>)
 8001e8c:	701a      	strb	r2, [r3, #0]
	HAL_LCD_Write_Number(&Horas,48,2);
 8001e8e:	2202      	movs	r2, #2
 8001e90:	2130      	movs	r1, #48	; 0x30
 8001e92:	4830      	ldr	r0, [pc, #192]	; (8001f54 <EDO_0+0x168>)
 8001e94:	f002 fb86 	bl	80045a4 <HAL_LCD_Write_Number>
	HAL_LCD_Write_Number(&Minutos,67,2);
 8001e98:	2202      	movs	r2, #2
 8001e9a:	2143      	movs	r1, #67	; 0x43
 8001e9c:	482e      	ldr	r0, [pc, #184]	; (8001f58 <EDO_0+0x16c>)
 8001e9e:	f002 fb81 	bl	80045a4 <HAL_LCD_Write_Number>
	if(btnC == 1 && btnC != btnCa && inicio == 0){
 8001ea2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d11c      	bne.n	8001ee4 <EDO_0+0xf8>
 8001eaa:	4b2c      	ldr	r3, [pc, #176]	; (8001f5c <EDO_0+0x170>)
 8001eac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eb0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d015      	beq.n	8001ee4 <EDO_0+0xf8>
 8001eb8:	4b29      	ldr	r3, [pc, #164]	; (8001f60 <EDO_0+0x174>)
 8001eba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d110      	bne.n	8001ee4 <EDO_0+0xf8>
		// Cambio de estado
		EA = E1;
 8001ec2:	4b28      	ldr	r3, [pc, #160]	; (8001f64 <EDO_0+0x178>)
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	701a      	strb	r2, [r3, #0]
		first = 0;
 8001ec8:	4b1d      	ldr	r3, [pc, #116]	; (8001f40 <EDO_0+0x154>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	801a      	strh	r2, [r3, #0]
		HAL_LCD_Clear();
 8001ece:	f002 fa7b 	bl	80043c8 <HAL_LCD_Clear>
		HAL_Set_ActualTime(Horas,Minutos,0);
 8001ed2:	4b20      	ldr	r3, [pc, #128]	; (8001f54 <EDO_0+0x168>)
 8001ed4:	7818      	ldrb	r0, [r3, #0]
 8001ed6:	4b20      	ldr	r3, [pc, #128]	; (8001f58 <EDO_0+0x16c>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	2200      	movs	r2, #0
 8001edc:	4619      	mov	r1, r3
 8001ede:	f002 fc55 	bl	800478c <HAL_Set_ActualTime>
 8001ee2:	e01a      	b.n	8001f1a <EDO_0+0x12e>
	}
	else if(btnC == 1 && btnC != btnCa){
 8001ee4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d116      	bne.n	8001f1a <EDO_0+0x12e>
 8001eec:	4b1b      	ldr	r3, [pc, #108]	; (8001f5c <EDO_0+0x170>)
 8001eee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ef2:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d00f      	beq.n	8001f1a <EDO_0+0x12e>
		// Cambio de estado
		EA = E3;
 8001efa:	4b1a      	ldr	r3, [pc, #104]	; (8001f64 <EDO_0+0x178>)
 8001efc:	2203      	movs	r2, #3
 8001efe:	701a      	strb	r2, [r3, #0]
		first = 0;
 8001f00:	4b0f      	ldr	r3, [pc, #60]	; (8001f40 <EDO_0+0x154>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	801a      	strh	r2, [r3, #0]
		HAL_LCD_Clear();
 8001f06:	f002 fa5f 	bl	80043c8 <HAL_LCD_Clear>
		HAL_Set_ActualTime(Horas,Minutos,0);
 8001f0a:	4b12      	ldr	r3, [pc, #72]	; (8001f54 <EDO_0+0x168>)
 8001f0c:	7818      	ldrb	r0, [r3, #0]
 8001f0e:	4b12      	ldr	r3, [pc, #72]	; (8001f58 <EDO_0+0x16c>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	2200      	movs	r2, #0
 8001f14:	4619      	mov	r1, r3
 8001f16:	f002 fc39 	bl	800478c <HAL_Set_ActualTime>
	}
	estado_Anterior(btnU, btnD, btnL, btnR, btnC);
 8001f1a:	f9b7 4000 	ldrsh.w	r4, [r7]
 8001f1e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001f22:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001f26:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001f2a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001f2e:	9300      	str	r3, [sp, #0]
 8001f30:	4623      	mov	r3, r4
 8001f32:	f7ff ff2d 	bl	8001d90 <estado_Anterior>
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd90      	pop	{r4, r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	200006dc 	.word	0x200006dc
 8001f44:	20000000 	.word	0x20000000
 8001f48:	20000015 	.word	0x20000015
 8001f4c:	2000002a 	.word	0x2000002a
 8001f50:	51eb851f 	.word	0x51eb851f
 8001f54:	20000701 	.word	0x20000701
 8001f58:	200006f4 	.word	0x200006f4
 8001f5c:	200006ec 	.word	0x200006ec
 8001f60:	200006de 	.word	0x200006de
 8001f64:	200006d8 	.word	0x200006d8

08001f68 <EDO_1>:

void EDO_1(short btnU, short btnD, short btnL, short btnR, short btnC){
 8001f68:	b590      	push	{r4, r7, lr}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af02      	add	r7, sp, #8
 8001f6e:	4604      	mov	r4, r0
 8001f70:	4608      	mov	r0, r1
 8001f72:	4611      	mov	r1, r2
 8001f74:	461a      	mov	r2, r3
 8001f76:	4623      	mov	r3, r4
 8001f78:	80fb      	strh	r3, [r7, #6]
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	80bb      	strh	r3, [r7, #4]
 8001f7e:	460b      	mov	r3, r1
 8001f80:	807b      	strh	r3, [r7, #2]
 8001f82:	4613      	mov	r3, r2
 8001f84:	803b      	strh	r3, [r7, #0]
	// Configuracion pastillas
	if(first == 0){
 8001f86:	4bbc      	ldr	r3, [pc, #752]	; (8002278 <EDO_1+0x310>)
 8001f88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d125      	bne.n	8001fdc <EDO_1+0x74>
		// Mostrado de valores fijos
		HAL_LCD_Write_AsciiString(word[pastillasABC],18,0);
 8001f90:	2200      	movs	r2, #0
 8001f92:	2112      	movs	r1, #18
 8001f94:	48b9      	ldr	r0, [pc, #740]	; (800227c <EDO_1+0x314>)
 8001f96:	f002 fad5 	bl	8004544 <HAL_LCD_Write_AsciiString>
		HAL_LCD_Write_AsciiString(word[w_timeInterval],36,1);
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	2124      	movs	r1, #36	; 0x24
 8001f9e:	48b8      	ldr	r0, [pc, #736]	; (8002280 <EDO_1+0x318>)
 8001fa0:	f002 fad0 	bl	8004544 <HAL_LCD_Write_AsciiString>
		HAL_LCD_Write_ascii(':',60,2);
 8001fa4:	2202      	movs	r2, #2
 8001fa6:	213c      	movs	r1, #60	; 0x3c
 8001fa8:	203a      	movs	r0, #58	; 0x3a
 8001faa:	f002 fa63 	bl	8004474 <HAL_LCD_Write_ascii>
		HAL_LCD_Write_AsciiString(word[w_accept],36,3);
 8001fae:	2203      	movs	r2, #3
 8001fb0:	2124      	movs	r1, #36	; 0x24
 8001fb2:	48b4      	ldr	r0, [pc, #720]	; (8002284 <EDO_1+0x31c>)
 8001fb4:	f002 fac6 	bl	8004544 <HAL_LCD_Write_AsciiString>
		// > en A la primera vez
		HAL_LCD_Write_ascii('>',72,0);
 8001fb8:	2200      	movs	r2, #0
 8001fba:	2148      	movs	r1, #72	; 0x48
 8001fbc:	203e      	movs	r0, #62	; 0x3e
 8001fbe:	f002 fa59 	bl	8004474 <HAL_LCD_Write_ascii>
		HAL_LCD_Write_ascii(' ',84,0);
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	2154      	movs	r1, #84	; 0x54
 8001fc6:	2020      	movs	r0, #32
 8001fc8:	f002 fa54 	bl	8004474 <HAL_LCD_Write_ascii>
		HAL_LCD_Write_ascii(' ',96,0);
 8001fcc:	2200      	movs	r2, #0
 8001fce:	2160      	movs	r1, #96	; 0x60
 8001fd0:	2020      	movs	r0, #32
 8001fd2:	f002 fa4f 	bl	8004474 <HAL_LCD_Write_ascii>
		first = 1;
 8001fd6:	4ba8      	ldr	r3, [pc, #672]	; (8002278 <EDO_1+0x310>)
 8001fd8:	2201      	movs	r2, #1
 8001fda:	801a      	strh	r2, [r3, #0]
	}
	// Obtencion horas y minutos
	Horas = HAL_POT_Percentage(POT1_Channel)*23/100;
 8001fdc:	2000      	movs	r0, #0
 8001fde:	f002 fb35 	bl	800464c <HAL_POT_Percentage>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	4413      	add	r3, r2
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	1a9b      	subs	r3, r3, r2
 8001ff0:	4aa5      	ldr	r2, [pc, #660]	; (8002288 <EDO_1+0x320>)
 8001ff2:	fb82 1203 	smull	r1, r2, r2, r3
 8001ff6:	1152      	asrs	r2, r2, #5
 8001ff8:	17db      	asrs	r3, r3, #31
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	b2da      	uxtb	r2, r3
 8001ffe:	4ba3      	ldr	r3, [pc, #652]	; (800228c <EDO_1+0x324>)
 8002000:	701a      	strb	r2, [r3, #0]
	Minutos = HAL_POT_Percentage(POT2_Channel)*59/100;
 8002002:	2001      	movs	r0, #1
 8002004:	f002 fb22 	bl	800464c <HAL_POT_Percentage>
 8002008:	4603      	mov	r3, r0
 800200a:	461a      	mov	r2, r3
 800200c:	4613      	mov	r3, r2
 800200e:	011b      	lsls	r3, r3, #4
 8002010:	1a9b      	subs	r3, r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	1a9b      	subs	r3, r3, r2
 8002016:	4a9c      	ldr	r2, [pc, #624]	; (8002288 <EDO_1+0x320>)
 8002018:	fb82 1203 	smull	r1, r2, r2, r3
 800201c:	1152      	asrs	r2, r2, #5
 800201e:	17db      	asrs	r3, r3, #31
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	b2da      	uxtb	r2, r3
 8002024:	4b9a      	ldr	r3, [pc, #616]	; (8002290 <EDO_1+0x328>)
 8002026:	701a      	strb	r2, [r3, #0]
	// Mostrado valor seleccionado
	HAL_LCD_Write_Number(&Horas,48,2);
 8002028:	2202      	movs	r2, #2
 800202a:	2130      	movs	r1, #48	; 0x30
 800202c:	4897      	ldr	r0, [pc, #604]	; (800228c <EDO_1+0x324>)
 800202e:	f002 fab9 	bl	80045a4 <HAL_LCD_Write_Number>
	HAL_LCD_Write_Number(&Minutos,67,2);
 8002032:	2202      	movs	r2, #2
 8002034:	2143      	movs	r1, #67	; 0x43
 8002036:	4896      	ldr	r0, [pc, #600]	; (8002290 <EDO_1+0x328>)
 8002038:	f002 fab4 	bl	80045a4 <HAL_LCD_Write_Number>

	if(Puntero == 0){
 800203c:	4b95      	ldr	r3, [pc, #596]	; (8002294 <EDO_1+0x32c>)
 800203e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d108      	bne.n	8002058 <EDO_1+0xf0>
		// Si el puntero esta en A carga los valores a A
		IntervaloH1 = Horas;
 8002046:	4b91      	ldr	r3, [pc, #580]	; (800228c <EDO_1+0x324>)
 8002048:	781a      	ldrb	r2, [r3, #0]
 800204a:	4b93      	ldr	r3, [pc, #588]	; (8002298 <EDO_1+0x330>)
 800204c:	701a      	strb	r2, [r3, #0]
		IntervaloM1 = Minutos;
 800204e:	4b90      	ldr	r3, [pc, #576]	; (8002290 <EDO_1+0x328>)
 8002050:	781a      	ldrb	r2, [r3, #0]
 8002052:	4b92      	ldr	r3, [pc, #584]	; (800229c <EDO_1+0x334>)
 8002054:	701a      	strb	r2, [r3, #0]
 8002056:	e01a      	b.n	800208e <EDO_1+0x126>
	}
	else if(Puntero == 1){
 8002058:	4b8e      	ldr	r3, [pc, #568]	; (8002294 <EDO_1+0x32c>)
 800205a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d108      	bne.n	8002074 <EDO_1+0x10c>
		// Si el puntero esta en B carga los valores a B
		IntervaloH2 = Horas;
 8002062:	4b8a      	ldr	r3, [pc, #552]	; (800228c <EDO_1+0x324>)
 8002064:	781a      	ldrb	r2, [r3, #0]
 8002066:	4b8e      	ldr	r3, [pc, #568]	; (80022a0 <EDO_1+0x338>)
 8002068:	701a      	strb	r2, [r3, #0]
		IntervaloM2 = Minutos;
 800206a:	4b89      	ldr	r3, [pc, #548]	; (8002290 <EDO_1+0x328>)
 800206c:	781a      	ldrb	r2, [r3, #0]
 800206e:	4b8d      	ldr	r3, [pc, #564]	; (80022a4 <EDO_1+0x33c>)
 8002070:	701a      	strb	r2, [r3, #0]
 8002072:	e00c      	b.n	800208e <EDO_1+0x126>
	}
	else if(Puntero == 2){
 8002074:	4b87      	ldr	r3, [pc, #540]	; (8002294 <EDO_1+0x32c>)
 8002076:	f9b3 3000 	ldrsh.w	r3, [r3]
 800207a:	2b02      	cmp	r3, #2
 800207c:	d107      	bne.n	800208e <EDO_1+0x126>
		// Si el puntero esta en C carga los valores a C
		IntervaloH3 = Horas;
 800207e:	4b83      	ldr	r3, [pc, #524]	; (800228c <EDO_1+0x324>)
 8002080:	781a      	ldrb	r2, [r3, #0]
 8002082:	4b89      	ldr	r3, [pc, #548]	; (80022a8 <EDO_1+0x340>)
 8002084:	701a      	strb	r2, [r3, #0]
		IntervaloM3 = Minutos;
 8002086:	4b82      	ldr	r3, [pc, #520]	; (8002290 <EDO_1+0x328>)
 8002088:	781a      	ldrb	r2, [r3, #0]
 800208a:	4b88      	ldr	r3, [pc, #544]	; (80022ac <EDO_1+0x344>)
 800208c:	701a      	strb	r2, [r3, #0]
	}
	// Puntero
	if(btnL == 1 && btnL != btnLa && btnR == 0){
 800208e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d156      	bne.n	8002144 <EDO_1+0x1dc>
 8002096:	4b86      	ldr	r3, [pc, #536]	; (80022b0 <EDO_1+0x348>)
 8002098:	f9b3 3000 	ldrsh.w	r3, [r3]
 800209c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d04f      	beq.n	8002144 <EDO_1+0x1dc>
 80020a4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d14b      	bne.n	8002144 <EDO_1+0x1dc>
		Puntero -= 1;
 80020ac:	4b79      	ldr	r3, [pc, #484]	; (8002294 <EDO_1+0x32c>)
 80020ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	3b01      	subs	r3, #1
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	b21a      	sxth	r2, r3
 80020ba:	4b76      	ldr	r3, [pc, #472]	; (8002294 <EDO_1+0x32c>)
 80020bc:	801a      	strh	r2, [r3, #0]
		if (Puntero < 0)
 80020be:	4b75      	ldr	r3, [pc, #468]	; (8002294 <EDO_1+0x32c>)
 80020c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	da02      	bge.n	80020ce <EDO_1+0x166>
			Puntero = 2;
 80020c8:	4b72      	ldr	r3, [pc, #456]	; (8002294 <EDO_1+0x32c>)
 80020ca:	2202      	movs	r2, #2
 80020cc:	801a      	strh	r2, [r3, #0]
		switch (Puntero){
 80020ce:	4b71      	ldr	r3, [pc, #452]	; (8002294 <EDO_1+0x32c>)
 80020d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d014      	beq.n	8002102 <EDO_1+0x19a>
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d022      	beq.n	8002122 <EDO_1+0x1ba>
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d000      	beq.n	80020e2 <EDO_1+0x17a>
				HAL_LCD_Write_ascii(' ',72,0);
				HAL_LCD_Write_ascii(' ',84,0);
				HAL_LCD_Write_ascii('>',96,0);
				break;
		}
	}
 80020e0:	e089      	b.n	80021f6 <EDO_1+0x28e>
				HAL_LCD_Write_ascii('>',72,0);
 80020e2:	2200      	movs	r2, #0
 80020e4:	2148      	movs	r1, #72	; 0x48
 80020e6:	203e      	movs	r0, #62	; 0x3e
 80020e8:	f002 f9c4 	bl	8004474 <HAL_LCD_Write_ascii>
				HAL_LCD_Write_ascii(' ',84,0);
 80020ec:	2200      	movs	r2, #0
 80020ee:	2154      	movs	r1, #84	; 0x54
 80020f0:	2020      	movs	r0, #32
 80020f2:	f002 f9bf 	bl	8004474 <HAL_LCD_Write_ascii>
				HAL_LCD_Write_ascii(' ',96,0);
 80020f6:	2200      	movs	r2, #0
 80020f8:	2160      	movs	r1, #96	; 0x60
 80020fa:	2020      	movs	r0, #32
 80020fc:	f002 f9ba 	bl	8004474 <HAL_LCD_Write_ascii>
				break;
 8002100:	e01f      	b.n	8002142 <EDO_1+0x1da>
				HAL_LCD_Write_ascii(' ',72,0);
 8002102:	2200      	movs	r2, #0
 8002104:	2148      	movs	r1, #72	; 0x48
 8002106:	2020      	movs	r0, #32
 8002108:	f002 f9b4 	bl	8004474 <HAL_LCD_Write_ascii>
				HAL_LCD_Write_ascii('>',84,0);
 800210c:	2200      	movs	r2, #0
 800210e:	2154      	movs	r1, #84	; 0x54
 8002110:	203e      	movs	r0, #62	; 0x3e
 8002112:	f002 f9af 	bl	8004474 <HAL_LCD_Write_ascii>
				HAL_LCD_Write_ascii(' ',96,0);
 8002116:	2200      	movs	r2, #0
 8002118:	2160      	movs	r1, #96	; 0x60
 800211a:	2020      	movs	r0, #32
 800211c:	f002 f9aa 	bl	8004474 <HAL_LCD_Write_ascii>
				break;
 8002120:	e00f      	b.n	8002142 <EDO_1+0x1da>
				HAL_LCD_Write_ascii(' ',72,0);
 8002122:	2200      	movs	r2, #0
 8002124:	2148      	movs	r1, #72	; 0x48
 8002126:	2020      	movs	r0, #32
 8002128:	f002 f9a4 	bl	8004474 <HAL_LCD_Write_ascii>
				HAL_LCD_Write_ascii(' ',84,0);
 800212c:	2200      	movs	r2, #0
 800212e:	2154      	movs	r1, #84	; 0x54
 8002130:	2020      	movs	r0, #32
 8002132:	f002 f99f 	bl	8004474 <HAL_LCD_Write_ascii>
				HAL_LCD_Write_ascii('>',96,0);
 8002136:	2200      	movs	r2, #0
 8002138:	2160      	movs	r1, #96	; 0x60
 800213a:	203e      	movs	r0, #62	; 0x3e
 800213c:	f002 f99a 	bl	8004474 <HAL_LCD_Write_ascii>
				break;
 8002140:	bf00      	nop
	}
 8002142:	e058      	b.n	80021f6 <EDO_1+0x28e>
	else if(btnR == 1 && btnR != btnRa && btnL == 0){
 8002144:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d154      	bne.n	80021f6 <EDO_1+0x28e>
 800214c:	4b59      	ldr	r3, [pc, #356]	; (80022b4 <EDO_1+0x34c>)
 800214e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002152:	f9b7 2000 	ldrsh.w	r2, [r7]
 8002156:	429a      	cmp	r2, r3
 8002158:	d04d      	beq.n	80021f6 <EDO_1+0x28e>
 800215a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d149      	bne.n	80021f6 <EDO_1+0x28e>
		Puntero += 1;
 8002162:	4b4c      	ldr	r3, [pc, #304]	; (8002294 <EDO_1+0x32c>)
 8002164:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002168:	b29b      	uxth	r3, r3
 800216a:	3301      	adds	r3, #1
 800216c:	b29b      	uxth	r3, r3
 800216e:	b21a      	sxth	r2, r3
 8002170:	4b48      	ldr	r3, [pc, #288]	; (8002294 <EDO_1+0x32c>)
 8002172:	801a      	strh	r2, [r3, #0]
		if (Puntero > 2)
 8002174:	4b47      	ldr	r3, [pc, #284]	; (8002294 <EDO_1+0x32c>)
 8002176:	f9b3 3000 	ldrsh.w	r3, [r3]
 800217a:	2b02      	cmp	r3, #2
 800217c:	dd02      	ble.n	8002184 <EDO_1+0x21c>
			Puntero = 0;
 800217e:	4b45      	ldr	r3, [pc, #276]	; (8002294 <EDO_1+0x32c>)
 8002180:	2200      	movs	r2, #0
 8002182:	801a      	strh	r2, [r3, #0]
		switch (Puntero){
 8002184:	4b43      	ldr	r3, [pc, #268]	; (8002294 <EDO_1+0x32c>)
 8002186:	f9b3 3000 	ldrsh.w	r3, [r3]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d013      	beq.n	80021b6 <EDO_1+0x24e>
 800218e:	2b02      	cmp	r3, #2
 8002190:	d021      	beq.n	80021d6 <EDO_1+0x26e>
 8002192:	2b00      	cmp	r3, #0
 8002194:	d12f      	bne.n	80021f6 <EDO_1+0x28e>
			case 0:
				HAL_LCD_Write_ascii('>',72,0);
 8002196:	2200      	movs	r2, #0
 8002198:	2148      	movs	r1, #72	; 0x48
 800219a:	203e      	movs	r0, #62	; 0x3e
 800219c:	f002 f96a 	bl	8004474 <HAL_LCD_Write_ascii>
				HAL_LCD_Write_ascii(' ',84,0);
 80021a0:	2200      	movs	r2, #0
 80021a2:	2154      	movs	r1, #84	; 0x54
 80021a4:	2020      	movs	r0, #32
 80021a6:	f002 f965 	bl	8004474 <HAL_LCD_Write_ascii>
				HAL_LCD_Write_ascii(' ',96,0);
 80021aa:	2200      	movs	r2, #0
 80021ac:	2160      	movs	r1, #96	; 0x60
 80021ae:	2020      	movs	r0, #32
 80021b0:	f002 f960 	bl	8004474 <HAL_LCD_Write_ascii>
				break;
 80021b4:	e01f      	b.n	80021f6 <EDO_1+0x28e>
			case 1:
				HAL_LCD_Write_ascii(' ',72,0);
 80021b6:	2200      	movs	r2, #0
 80021b8:	2148      	movs	r1, #72	; 0x48
 80021ba:	2020      	movs	r0, #32
 80021bc:	f002 f95a 	bl	8004474 <HAL_LCD_Write_ascii>
				HAL_LCD_Write_ascii('>',84,0);
 80021c0:	2200      	movs	r2, #0
 80021c2:	2154      	movs	r1, #84	; 0x54
 80021c4:	203e      	movs	r0, #62	; 0x3e
 80021c6:	f002 f955 	bl	8004474 <HAL_LCD_Write_ascii>
				HAL_LCD_Write_ascii(' ',96,0);
 80021ca:	2200      	movs	r2, #0
 80021cc:	2160      	movs	r1, #96	; 0x60
 80021ce:	2020      	movs	r0, #32
 80021d0:	f002 f950 	bl	8004474 <HAL_LCD_Write_ascii>
				break;
 80021d4:	e00f      	b.n	80021f6 <EDO_1+0x28e>
			case 2:
				HAL_LCD_Write_ascii(' ',72,0);
 80021d6:	2200      	movs	r2, #0
 80021d8:	2148      	movs	r1, #72	; 0x48
 80021da:	2020      	movs	r0, #32
 80021dc:	f002 f94a 	bl	8004474 <HAL_LCD_Write_ascii>
				HAL_LCD_Write_ascii(' ',84,0);
 80021e0:	2200      	movs	r2, #0
 80021e2:	2154      	movs	r1, #84	; 0x54
 80021e4:	2020      	movs	r0, #32
 80021e6:	f002 f945 	bl	8004474 <HAL_LCD_Write_ascii>
				HAL_LCD_Write_ascii('>',96,0);
 80021ea:	2200      	movs	r2, #0
 80021ec:	2160      	movs	r1, #96	; 0x60
 80021ee:	203e      	movs	r0, #62	; 0x3e
 80021f0:	f002 f940 	bl	8004474 <HAL_LCD_Write_ascii>
				break;
 80021f4:	bf00      	nop
		}
	}


	// Aceptar
	if(btnC == 1 && btnC != btnCa && inicio == 0){
 80021f6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d117      	bne.n	800222e <EDO_1+0x2c6>
 80021fe:	4b2e      	ldr	r3, [pc, #184]	; (80022b8 <EDO_1+0x350>)
 8002200:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002204:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002208:	429a      	cmp	r2, r3
 800220a:	d010      	beq.n	800222e <EDO_1+0x2c6>
 800220c:	4b2b      	ldr	r3, [pc, #172]	; (80022bc <EDO_1+0x354>)
 800220e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d10b      	bne.n	800222e <EDO_1+0x2c6>
		// Cambio de estado
		EA = E2;
 8002216:	4b2a      	ldr	r3, [pc, #168]	; (80022c0 <EDO_1+0x358>)
 8002218:	2202      	movs	r2, #2
 800221a:	701a      	strb	r2, [r3, #0]
		first = 0;
 800221c:	4b16      	ldr	r3, [pc, #88]	; (8002278 <EDO_1+0x310>)
 800221e:	2200      	movs	r2, #0
 8002220:	801a      	strh	r2, [r3, #0]
		inicio = 1; //cambio, se setea en 0 cuando entramos a imprimir
 8002222:	4b26      	ldr	r3, [pc, #152]	; (80022bc <EDO_1+0x354>)
 8002224:	2201      	movs	r2, #1
 8002226:	801a      	strh	r2, [r3, #0]
		HAL_LCD_Clear();
 8002228:	f002 f8ce 	bl	80043c8 <HAL_LCD_Clear>
 800222c:	e012      	b.n	8002254 <EDO_1+0x2ec>
	}
	else if(btnC == 1 && btnC != btnCa){
 800222e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d10e      	bne.n	8002254 <EDO_1+0x2ec>
 8002236:	4b20      	ldr	r3, [pc, #128]	; (80022b8 <EDO_1+0x350>)
 8002238:	f9b3 3000 	ldrsh.w	r3, [r3]
 800223c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002240:	429a      	cmp	r2, r3
 8002242:	d007      	beq.n	8002254 <EDO_1+0x2ec>
		// Cambio de estado
		EA = E3;
 8002244:	4b1e      	ldr	r3, [pc, #120]	; (80022c0 <EDO_1+0x358>)
 8002246:	2203      	movs	r2, #3
 8002248:	701a      	strb	r2, [r3, #0]
		first = 0;
 800224a:	4b0b      	ldr	r3, [pc, #44]	; (8002278 <EDO_1+0x310>)
 800224c:	2200      	movs	r2, #0
 800224e:	801a      	strh	r2, [r3, #0]
		HAL_LCD_Clear();
 8002250:	f002 f8ba 	bl	80043c8 <HAL_LCD_Clear>
	}
	estado_Anterior(btnU, btnD, btnL, btnR, btnC);
 8002254:	f9b7 4000 	ldrsh.w	r4, [r7]
 8002258:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800225c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002260:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002264:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002268:	9300      	str	r3, [sp, #0]
 800226a:	4623      	mov	r3, r4
 800226c:	f7ff fd90 	bl	8001d90 <estado_Anterior>
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	bd90      	pop	{r4, r7, pc}
 8002278:	200006dc 	.word	0x200006dc
 800227c:	2000003f 	.word	0x2000003f
 8002280:	20000054 	.word	0x20000054
 8002284:	2000002a 	.word	0x2000002a
 8002288:	51eb851f 	.word	0x51eb851f
 800228c:	20000701 	.word	0x20000701
 8002290:	200006f4 	.word	0x200006f4
 8002294:	200006da 	.word	0x200006da
 8002298:	200006fa 	.word	0x200006fa
 800229c:	200006f9 	.word	0x200006f9
 80022a0:	200006fc 	.word	0x200006fc
 80022a4:	200006fd 	.word	0x200006fd
 80022a8:	20000700 	.word	0x20000700
 80022ac:	200006f7 	.word	0x200006f7
 80022b0:	200006e6 	.word	0x200006e6
 80022b4:	200006e0 	.word	0x200006e0
 80022b8:	200006ec 	.word	0x200006ec
 80022bc:	200006de 	.word	0x200006de
 80022c0:	200006d8 	.word	0x200006d8

080022c4 <EDO_2>:

void EDO_2(short btnU, short btnD, short btnL, short btnR, short btnC){
 80022c4:	b590      	push	{r4, r7, lr}
 80022c6:	b087      	sub	sp, #28
 80022c8:	af02      	add	r7, sp, #8
 80022ca:	4604      	mov	r4, r0
 80022cc:	4608      	mov	r0, r1
 80022ce:	4611      	mov	r1, r2
 80022d0:	461a      	mov	r2, r3
 80022d2:	4623      	mov	r3, r4
 80022d4:	80fb      	strh	r3, [r7, #6]
 80022d6:	4603      	mov	r3, r0
 80022d8:	80bb      	strh	r3, [r7, #4]
 80022da:	460b      	mov	r3, r1
 80022dc:	807b      	strh	r3, [r7, #2]
 80022de:	4613      	mov	r3, r2
 80022e0:	803b      	strh	r3, [r7, #0]
	// Pantalla principal
	if(first == 0){
 80022e2:	4b2f      	ldr	r3, [pc, #188]	; (80023a0 <EDO_2+0xdc>)
 80022e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d11b      	bne.n	8002324 <EDO_2+0x60>
		// Mostrado de valores fijos
		HAL_LCD_Write_AsciiString(word[reloj],48,0);
 80022ec:	2200      	movs	r2, #0
 80022ee:	2130      	movs	r1, #48	; 0x30
 80022f0:	482c      	ldr	r0, [pc, #176]	; (80023a4 <EDO_2+0xe0>)
 80022f2:	f002 f927 	bl	8004544 <HAL_LCD_Write_AsciiString>
		HAL_LCD_Write_ascii(':',60,1);
 80022f6:	2201      	movs	r2, #1
 80022f8:	213c      	movs	r1, #60	; 0x3c
 80022fa:	203a      	movs	r0, #58	; 0x3a
 80022fc:	f002 f8ba 	bl	8004474 <HAL_LCD_Write_ascii>
		HAL_LCD_Write_AsciiString(word[temperatura],30,2);
 8002300:	2202      	movs	r2, #2
 8002302:	211e      	movs	r1, #30
 8002304:	4828      	ldr	r0, [pc, #160]	; (80023a8 <EDO_2+0xe4>)
 8002306:	f002 f91d 	bl	8004544 <HAL_LCD_Write_AsciiString>
		HAL_LCD_Write_ascii(SYMBOL_ASCII_CELSIUS,66,3);
 800230a:	2203      	movs	r2, #3
 800230c:	2142      	movs	r1, #66	; 0x42
 800230e:	20f8      	movs	r0, #248	; 0xf8
 8002310:	f002 f8b0 	bl	8004474 <HAL_LCD_Write_ascii>
		HAL_LCD_Write_ascii('C',72,3);
 8002314:	2203      	movs	r2, #3
 8002316:	2148      	movs	r1, #72	; 0x48
 8002318:	2043      	movs	r0, #67	; 0x43
 800231a:	f002 f8ab 	bl	8004474 <HAL_LCD_Write_ascii>
		first = 1;
 800231e:	4b20      	ldr	r3, [pc, #128]	; (80023a0 <EDO_2+0xdc>)
 8002320:	2201      	movs	r2, #1
 8002322:	801a      	strh	r2, [r3, #0]
	}
	// Obtener tiempo
	// Mostrar tiempo
	HAL_LCD_Write_Number(&Hora,48,1);
 8002324:	2201      	movs	r2, #1
 8002326:	2130      	movs	r1, #48	; 0x30
 8002328:	4820      	ldr	r0, [pc, #128]	; (80023ac <EDO_2+0xe8>)
 800232a:	f002 f93b 	bl	80045a4 <HAL_LCD_Write_Number>
	HAL_LCD_Write_Number(&Minuto,66,1);
 800232e:	2201      	movs	r2, #1
 8002330:	2142      	movs	r1, #66	; 0x42
 8002332:	481f      	ldr	r0, [pc, #124]	; (80023b0 <EDO_2+0xec>)
 8002334:	f002 f936 	bl	80045a4 <HAL_LCD_Write_Number>
	// Temperatura
	uint8_t Temp = HAL_TEMPSen_ReadTemperature();
 8002338:	f002 fa44 	bl	80047c4 <HAL_TEMPSen_ReadTemperature>
 800233c:	4603      	mov	r3, r0
 800233e:	73fb      	strb	r3, [r7, #15]
	LL_mDelay(1);
 8002340:	2001      	movs	r0, #1
 8002342:	f001 ff55 	bl	80041f0 <LL_mDelay>
	// Mostrar Temperaura
	HAL_LCD_Write_Number(&Temp,54,3);
 8002346:	f107 030f 	add.w	r3, r7, #15
 800234a:	2203      	movs	r2, #3
 800234c:	2136      	movs	r1, #54	; 0x36
 800234e:	4618      	mov	r0, r3
 8002350:	f002 f928 	bl	80045a4 <HAL_LCD_Write_Number>
	if(btnC == 1 && btnC != btnCa){
 8002354:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d10e      	bne.n	800237a <EDO_2+0xb6>
 800235c:	4b15      	ldr	r3, [pc, #84]	; (80023b4 <EDO_2+0xf0>)
 800235e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002362:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8002366:	429a      	cmp	r2, r3
 8002368:	d007      	beq.n	800237a <EDO_2+0xb6>
		// Cambio de estado
		EA = E3;
 800236a:	4b13      	ldr	r3, [pc, #76]	; (80023b8 <EDO_2+0xf4>)
 800236c:	2203      	movs	r2, #3
 800236e:	701a      	strb	r2, [r3, #0]
		first = 0;
 8002370:	4b0b      	ldr	r3, [pc, #44]	; (80023a0 <EDO_2+0xdc>)
 8002372:	2200      	movs	r2, #0
 8002374:	801a      	strh	r2, [r3, #0]
		HAL_LCD_Clear();
 8002376:	f002 f827 	bl	80043c8 <HAL_LCD_Clear>
	}
	estado_Anterior(btnU, btnD, btnL, btnR, btnC);
 800237a:	f9b7 4000 	ldrsh.w	r4, [r7]
 800237e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002382:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002386:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800238a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800238e:	9300      	str	r3, [sp, #0]
 8002390:	4623      	mov	r3, r4
 8002392:	f7ff fcfd 	bl	8001d90 <estado_Anterior>
}
 8002396:	bf00      	nop
 8002398:	3714      	adds	r7, #20
 800239a:	46bd      	mov	sp, r7
 800239c:	bd90      	pop	{r4, r7, pc}
 800239e:	bf00      	nop
 80023a0:	200006dc 	.word	0x200006dc
 80023a4:	20000015 	.word	0x20000015
 80023a8:	2000007e 	.word	0x2000007e
 80023ac:	200006fe 	.word	0x200006fe
 80023b0:	200006f5 	.word	0x200006f5
 80023b4:	200006ec 	.word	0x200006ec
 80023b8:	200006d8 	.word	0x200006d8

080023bc <EDO_3>:

void EDO_3(short btnU, short btnD, short btnL, short btnR, short btnC){
 80023bc:	b590      	push	{r4, r7, lr}
 80023be:	b085      	sub	sp, #20
 80023c0:	af02      	add	r7, sp, #8
 80023c2:	4604      	mov	r4, r0
 80023c4:	4608      	mov	r0, r1
 80023c6:	4611      	mov	r1, r2
 80023c8:	461a      	mov	r2, r3
 80023ca:	4623      	mov	r3, r4
 80023cc:	80fb      	strh	r3, [r7, #6]
 80023ce:	4603      	mov	r3, r0
 80023d0:	80bb      	strh	r3, [r7, #4]
 80023d2:	460b      	mov	r3, r1
 80023d4:	807b      	strh	r3, [r7, #2]
 80023d6:	4613      	mov	r3, r2
 80023d8:	803b      	strh	r3, [r7, #0]
	// Menu
	if(first == 0){
 80023da:	4bcf      	ldr	r3, [pc, #828]	; (8002718 <EDO_3+0x35c>)
 80023dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d12d      	bne.n	8002440 <EDO_3+0x84>
			// Mostrado de valores fijos
			HAL_LCD_Write_AsciiString(word[w_adjustClock],24,0);
 80023e4:	2200      	movs	r2, #0
 80023e6:	2118      	movs	r1, #24
 80023e8:	48cc      	ldr	r0, [pc, #816]	; (800271c <EDO_3+0x360>)
 80023ea:	f002 f8ab 	bl	8004544 <HAL_LCD_Write_AsciiString>
			HAL_LCD_Write_AsciiString(word[w_adjustPill],12,1);
 80023ee:	2201      	movs	r2, #1
 80023f0:	210c      	movs	r1, #12
 80023f2:	48cb      	ldr	r0, [pc, #812]	; (8002720 <EDO_3+0x364>)
 80023f4:	f002 f8a6 	bl	8004544 <HAL_LCD_Write_AsciiString>
			HAL_LCD_Write_AsciiString(word[w_timeAndTemp],13,2);
 80023f8:	2202      	movs	r2, #2
 80023fa:	210d      	movs	r1, #13
 80023fc:	48c9      	ldr	r0, [pc, #804]	; (8002724 <EDO_3+0x368>)
 80023fe:	f002 f8a1 	bl	8004544 <HAL_LCD_Write_AsciiString>
			HAL_LCD_Write_AsciiString(word[w_timePills],6,3);
 8002402:	2203      	movs	r2, #3
 8002404:	2106      	movs	r1, #6
 8002406:	48c8      	ldr	r0, [pc, #800]	; (8002728 <EDO_3+0x36c>)
 8002408:	f002 f89c 	bl	8004544 <HAL_LCD_Write_AsciiString>
			// > en A la primera vez
			HAL_LCD_Write_ascii('>',18,0);
 800240c:	2200      	movs	r2, #0
 800240e:	2112      	movs	r1, #18
 8002410:	203e      	movs	r0, #62	; 0x3e
 8002412:	f002 f82f 	bl	8004474 <HAL_LCD_Write_ascii>
			HAL_LCD_Write_ascii(' ',6,1);
 8002416:	2201      	movs	r2, #1
 8002418:	2106      	movs	r1, #6
 800241a:	2020      	movs	r0, #32
 800241c:	f002 f82a 	bl	8004474 <HAL_LCD_Write_ascii>
			HAL_LCD_Write_ascii(' ',6,2);
 8002420:	2202      	movs	r2, #2
 8002422:	2106      	movs	r1, #6
 8002424:	2020      	movs	r0, #32
 8002426:	f002 f825 	bl	8004474 <HAL_LCD_Write_ascii>
			HAL_LCD_Write_ascii(' ',0,3);
 800242a:	2203      	movs	r2, #3
 800242c:	2100      	movs	r1, #0
 800242e:	2020      	movs	r0, #32
 8002430:	f002 f820 	bl	8004474 <HAL_LCD_Write_ascii>
			first = 1;
 8002434:	4bb8      	ldr	r3, [pc, #736]	; (8002718 <EDO_3+0x35c>)
 8002436:	2201      	movs	r2, #1
 8002438:	801a      	strh	r2, [r3, #0]
			Puntero=0;
 800243a:	4bbc      	ldr	r3, [pc, #752]	; (800272c <EDO_3+0x370>)
 800243c:	2200      	movs	r2, #0
 800243e:	801a      	strh	r2, [r3, #0]
		}

	if(Puntero == 0 && btnC == 1 && btnC != btnCa){
 8002440:	4bba      	ldr	r3, [pc, #744]	; (800272c <EDO_3+0x370>)
 8002442:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d113      	bne.n	8002472 <EDO_3+0xb6>
 800244a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d10f      	bne.n	8002472 <EDO_3+0xb6>
 8002452:	4bb7      	ldr	r3, [pc, #732]	; (8002730 <EDO_3+0x374>)
 8002454:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002458:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800245c:	429a      	cmp	r2, r3
 800245e:	d008      	beq.n	8002472 <EDO_3+0xb6>
		//Si puntero es igual a 0 y el boton central es presionado, ira a ajustar reloj
		EA=E0;
 8002460:	4bb4      	ldr	r3, [pc, #720]	; (8002734 <EDO_3+0x378>)
 8002462:	2200      	movs	r2, #0
 8002464:	701a      	strb	r2, [r3, #0]
		HAL_LCD_Clear();
 8002466:	f001 ffaf 	bl	80043c8 <HAL_LCD_Clear>
		first=0;
 800246a:	4bab      	ldr	r3, [pc, #684]	; (8002718 <EDO_3+0x35c>)
 800246c:	2200      	movs	r2, #0
 800246e:	801a      	strh	r2, [r3, #0]
 8002470:	e049      	b.n	8002506 <EDO_3+0x14a>
	}
	else if(Puntero == 1 && btnC == 1 && btnC != btnCa){
 8002472:	4bae      	ldr	r3, [pc, #696]	; (800272c <EDO_3+0x370>)
 8002474:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d113      	bne.n	80024a4 <EDO_3+0xe8>
 800247c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d10f      	bne.n	80024a4 <EDO_3+0xe8>
 8002484:	4baa      	ldr	r3, [pc, #680]	; (8002730 <EDO_3+0x374>)
 8002486:	f9b3 3000 	ldrsh.w	r3, [r3]
 800248a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800248e:	429a      	cmp	r2, r3
 8002490:	d008      	beq.n	80024a4 <EDO_3+0xe8>
		//Si puntero es igual a 1 y el boton central es presionado, ira a ajustar intervalos pastilla
		EA=E1;
 8002492:	4ba8      	ldr	r3, [pc, #672]	; (8002734 <EDO_3+0x378>)
 8002494:	2201      	movs	r2, #1
 8002496:	701a      	strb	r2, [r3, #0]
		HAL_LCD_Clear();
 8002498:	f001 ff96 	bl	80043c8 <HAL_LCD_Clear>
		first=0;
 800249c:	4b9e      	ldr	r3, [pc, #632]	; (8002718 <EDO_3+0x35c>)
 800249e:	2200      	movs	r2, #0
 80024a0:	801a      	strh	r2, [r3, #0]
 80024a2:	e030      	b.n	8002506 <EDO_3+0x14a>
	}
	else if(Puntero == 2 && btnC == 1 && btnC != btnCa){
 80024a4:	4ba1      	ldr	r3, [pc, #644]	; (800272c <EDO_3+0x370>)
 80024a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d113      	bne.n	80024d6 <EDO_3+0x11a>
 80024ae:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d10f      	bne.n	80024d6 <EDO_3+0x11a>
 80024b6:	4b9e      	ldr	r3, [pc, #632]	; (8002730 <EDO_3+0x374>)
 80024b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024bc:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d008      	beq.n	80024d6 <EDO_3+0x11a>
		//Si puntero es igual a 2 y el boton central es presionado, ira a mostrar hora actual y temp
		EA=E2;
 80024c4:	4b9b      	ldr	r3, [pc, #620]	; (8002734 <EDO_3+0x378>)
 80024c6:	2202      	movs	r2, #2
 80024c8:	701a      	strb	r2, [r3, #0]
		HAL_LCD_Clear();
 80024ca:	f001 ff7d 	bl	80043c8 <HAL_LCD_Clear>
		first=0;
 80024ce:	4b92      	ldr	r3, [pc, #584]	; (8002718 <EDO_3+0x35c>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	801a      	strh	r2, [r3, #0]
 80024d4:	e017      	b.n	8002506 <EDO_3+0x14a>
	}
	else if(Puntero == 3 && btnC == 1 && btnC != btnCa){
 80024d6:	4b95      	ldr	r3, [pc, #596]	; (800272c <EDO_3+0x370>)
 80024d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024dc:	2b03      	cmp	r3, #3
 80024de:	d112      	bne.n	8002506 <EDO_3+0x14a>
 80024e0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d10e      	bne.n	8002506 <EDO_3+0x14a>
 80024e8:	4b91      	ldr	r3, [pc, #580]	; (8002730 <EDO_3+0x374>)
 80024ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024ee:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d007      	beq.n	8002506 <EDO_3+0x14a>
		//Si puntero es igual a 3 y el boton central es presionado, ira a mostrar los intervalos configurados
		EA=E7;
 80024f6:	4b8f      	ldr	r3, [pc, #572]	; (8002734 <EDO_3+0x378>)
 80024f8:	2207      	movs	r2, #7
 80024fa:	701a      	strb	r2, [r3, #0]
		HAL_LCD_Clear();
 80024fc:	f001 ff64 	bl	80043c8 <HAL_LCD_Clear>
		first=0;
 8002500:	4b85      	ldr	r3, [pc, #532]	; (8002718 <EDO_3+0x35c>)
 8002502:	2200      	movs	r2, #0
 8002504:	801a      	strh	r2, [r3, #0]
		}
	// Puntero
	if(btnD == 1 && btnD != btnDa && btnU == 0){
 8002506:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800250a:	2b01      	cmp	r3, #1
 800250c:	f040 8091 	bne.w	8002632 <EDO_3+0x276>
 8002510:	4b89      	ldr	r3, [pc, #548]	; (8002738 <EDO_3+0x37c>)
 8002512:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002516:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800251a:	429a      	cmp	r2, r3
 800251c:	f000 8089 	beq.w	8002632 <EDO_3+0x276>
 8002520:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002524:	2b00      	cmp	r3, #0
 8002526:	f040 8084 	bne.w	8002632 <EDO_3+0x276>
		Puntero += 1;
 800252a:	4b80      	ldr	r3, [pc, #512]	; (800272c <EDO_3+0x370>)
 800252c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002530:	b29b      	uxth	r3, r3
 8002532:	3301      	adds	r3, #1
 8002534:	b29b      	uxth	r3, r3
 8002536:	b21a      	sxth	r2, r3
 8002538:	4b7c      	ldr	r3, [pc, #496]	; (800272c <EDO_3+0x370>)
 800253a:	801a      	strh	r2, [r3, #0]
		if (Puntero > 3)
 800253c:	4b7b      	ldr	r3, [pc, #492]	; (800272c <EDO_3+0x370>)
 800253e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002542:	2b03      	cmp	r3, #3
 8002544:	dd02      	ble.n	800254c <EDO_3+0x190>
			Puntero = 0;
 8002546:	4b79      	ldr	r3, [pc, #484]	; (800272c <EDO_3+0x370>)
 8002548:	2200      	movs	r2, #0
 800254a:	801a      	strh	r2, [r3, #0]
		switch (Puntero){
 800254c:	4b77      	ldr	r3, [pc, #476]	; (800272c <EDO_3+0x370>)
 800254e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002552:	2b03      	cmp	r3, #3
 8002554:	f200 8109 	bhi.w	800276a <EDO_3+0x3ae>
 8002558:	a201      	add	r2, pc, #4	; (adr r2, 8002560 <EDO_3+0x1a4>)
 800255a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800255e:	bf00      	nop
 8002560:	08002571 	.word	0x08002571
 8002564:	080025a1 	.word	0x080025a1
 8002568:	080025d1 	.word	0x080025d1
 800256c:	08002601 	.word	0x08002601
			case 0:
				LL_mDelay(1);
 8002570:	2001      	movs	r0, #1
 8002572:	f001 fe3d 	bl	80041f0 <LL_mDelay>
				HAL_LCD_Write_ascii('>',18,0);
 8002576:	2200      	movs	r2, #0
 8002578:	2112      	movs	r1, #18
 800257a:	203e      	movs	r0, #62	; 0x3e
 800257c:	f001 ff7a 	bl	8004474 <HAL_LCD_Write_ascii>
				HAL_LCD_Write_ascii(' ',6,1);
 8002580:	2201      	movs	r2, #1
 8002582:	2106      	movs	r1, #6
 8002584:	2020      	movs	r0, #32
 8002586:	f001 ff75 	bl	8004474 <HAL_LCD_Write_ascii>
				HAL_LCD_Write_ascii(' ',6,2);
 800258a:	2202      	movs	r2, #2
 800258c:	2106      	movs	r1, #6
 800258e:	2020      	movs	r0, #32
 8002590:	f001 ff70 	bl	8004474 <HAL_LCD_Write_ascii>
				HAL_LCD_Write_ascii(' ',0,3);
 8002594:	2203      	movs	r2, #3
 8002596:	2100      	movs	r1, #0
 8002598:	2020      	movs	r0, #32
 800259a:	f001 ff6b 	bl	8004474 <HAL_LCD_Write_ascii>
				break;
 800259e:	e047      	b.n	8002630 <EDO_3+0x274>
			case 1:
				LL_mDelay(1);
 80025a0:	2001      	movs	r0, #1
 80025a2:	f001 fe25 	bl	80041f0 <LL_mDelay>
				HAL_LCD_Write_ascii(' ',18,0);
 80025a6:	2200      	movs	r2, #0
 80025a8:	2112      	movs	r1, #18
 80025aa:	2020      	movs	r0, #32
 80025ac:	f001 ff62 	bl	8004474 <HAL_LCD_Write_ascii>
				HAL_LCD_Write_ascii('>',6,1);
 80025b0:	2201      	movs	r2, #1
 80025b2:	2106      	movs	r1, #6
 80025b4:	203e      	movs	r0, #62	; 0x3e
 80025b6:	f001 ff5d 	bl	8004474 <HAL_LCD_Write_ascii>
				HAL_LCD_Write_ascii(' ',6,2);
 80025ba:	2202      	movs	r2, #2
 80025bc:	2106      	movs	r1, #6
 80025be:	2020      	movs	r0, #32
 80025c0:	f001 ff58 	bl	8004474 <HAL_LCD_Write_ascii>
				HAL_LCD_Write_ascii(' ',0,3);
 80025c4:	2203      	movs	r2, #3
 80025c6:	2100      	movs	r1, #0
 80025c8:	2020      	movs	r0, #32
 80025ca:	f001 ff53 	bl	8004474 <HAL_LCD_Write_ascii>
				break;
 80025ce:	e02f      	b.n	8002630 <EDO_3+0x274>
			case 2:
				LL_mDelay(1);
 80025d0:	2001      	movs	r0, #1
 80025d2:	f001 fe0d 	bl	80041f0 <LL_mDelay>
				HAL_LCD_Write_ascii(' ',18,0);
 80025d6:	2200      	movs	r2, #0
 80025d8:	2112      	movs	r1, #18
 80025da:	2020      	movs	r0, #32
 80025dc:	f001 ff4a 	bl	8004474 <HAL_LCD_Write_ascii>
				HAL_LCD_Write_ascii(' ',6,1);
 80025e0:	2201      	movs	r2, #1
 80025e2:	2106      	movs	r1, #6
 80025e4:	2020      	movs	r0, #32
 80025e6:	f001 ff45 	bl	8004474 <HAL_LCD_Write_ascii>
				HAL_LCD_Write_ascii('>',6,2);
 80025ea:	2202      	movs	r2, #2
 80025ec:	2106      	movs	r1, #6
 80025ee:	203e      	movs	r0, #62	; 0x3e
 80025f0:	f001 ff40 	bl	8004474 <HAL_LCD_Write_ascii>
				HAL_LCD_Write_ascii(' ',0,3);
 80025f4:	2203      	movs	r2, #3
 80025f6:	2100      	movs	r1, #0
 80025f8:	2020      	movs	r0, #32
 80025fa:	f001 ff3b 	bl	8004474 <HAL_LCD_Write_ascii>
				break;
 80025fe:	e017      	b.n	8002630 <EDO_3+0x274>
			case 3:
				LL_mDelay(1);
 8002600:	2001      	movs	r0, #1
 8002602:	f001 fdf5 	bl	80041f0 <LL_mDelay>
				HAL_LCD_Write_ascii(' ',18,0);
 8002606:	2200      	movs	r2, #0
 8002608:	2112      	movs	r1, #18
 800260a:	2020      	movs	r0, #32
 800260c:	f001 ff32 	bl	8004474 <HAL_LCD_Write_ascii>
				HAL_LCD_Write_ascii(' ',6,1);
 8002610:	2201      	movs	r2, #1
 8002612:	2106      	movs	r1, #6
 8002614:	2020      	movs	r0, #32
 8002616:	f001 ff2d 	bl	8004474 <HAL_LCD_Write_ascii>
				HAL_LCD_Write_ascii(' ',6,2);
 800261a:	2202      	movs	r2, #2
 800261c:	2106      	movs	r1, #6
 800261e:	2020      	movs	r0, #32
 8002620:	f001 ff28 	bl	8004474 <HAL_LCD_Write_ascii>
				HAL_LCD_Write_ascii('>',0,3);
 8002624:	2203      	movs	r2, #3
 8002626:	2100      	movs	r1, #0
 8002628:	203e      	movs	r0, #62	; 0x3e
 800262a:	f001 ff23 	bl	8004474 <HAL_LCD_Write_ascii>
							break;
 800262e:	bf00      	nop
		}
	}
 8002630:	e09b      	b.n	800276a <EDO_3+0x3ae>
	else if(btnU == 1 && btnU != btnUa && btnD == 0){
 8002632:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002636:	2b01      	cmp	r3, #1
 8002638:	f040 8098 	bne.w	800276c <EDO_3+0x3b0>
 800263c:	4b3f      	ldr	r3, [pc, #252]	; (800273c <EDO_3+0x380>)
 800263e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002642:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002646:	429a      	cmp	r2, r3
 8002648:	f000 8090 	beq.w	800276c <EDO_3+0x3b0>
 800264c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002650:	2b00      	cmp	r3, #0
 8002652:	f040 808b 	bne.w	800276c <EDO_3+0x3b0>
			Puntero -= 1;
 8002656:	4b35      	ldr	r3, [pc, #212]	; (800272c <EDO_3+0x370>)
 8002658:	f9b3 3000 	ldrsh.w	r3, [r3]
 800265c:	b29b      	uxth	r3, r3
 800265e:	3b01      	subs	r3, #1
 8002660:	b29b      	uxth	r3, r3
 8002662:	b21a      	sxth	r2, r3
 8002664:	4b31      	ldr	r3, [pc, #196]	; (800272c <EDO_3+0x370>)
 8002666:	801a      	strh	r2, [r3, #0]
			if (Puntero < 0)
 8002668:	4b30      	ldr	r3, [pc, #192]	; (800272c <EDO_3+0x370>)
 800266a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800266e:	2b00      	cmp	r3, #0
 8002670:	da02      	bge.n	8002678 <EDO_3+0x2bc>
				Puntero = 3;
 8002672:	4b2e      	ldr	r3, [pc, #184]	; (800272c <EDO_3+0x370>)
 8002674:	2203      	movs	r2, #3
 8002676:	801a      	strh	r2, [r3, #0]
			switch (Puntero){
 8002678:	4b2c      	ldr	r3, [pc, #176]	; (800272c <EDO_3+0x370>)
 800267a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800267e:	2b03      	cmp	r3, #3
 8002680:	d874      	bhi.n	800276c <EDO_3+0x3b0>
 8002682:	a201      	add	r2, pc, #4	; (adr r2, 8002688 <EDO_3+0x2cc>)
 8002684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002688:	08002699 	.word	0x08002699
 800268c:	080026c3 	.word	0x080026c3
 8002690:	080026ed 	.word	0x080026ed
 8002694:	08002741 	.word	0x08002741
				case 0:
					//LL_mDelay(1);
					HAL_LCD_Write_ascii('>',18,0);
 8002698:	2200      	movs	r2, #0
 800269a:	2112      	movs	r1, #18
 800269c:	203e      	movs	r0, #62	; 0x3e
 800269e:	f001 fee9 	bl	8004474 <HAL_LCD_Write_ascii>
					HAL_LCD_Write_ascii(' ',6,1);
 80026a2:	2201      	movs	r2, #1
 80026a4:	2106      	movs	r1, #6
 80026a6:	2020      	movs	r0, #32
 80026a8:	f001 fee4 	bl	8004474 <HAL_LCD_Write_ascii>
					HAL_LCD_Write_ascii(' ',6,2);
 80026ac:	2202      	movs	r2, #2
 80026ae:	2106      	movs	r1, #6
 80026b0:	2020      	movs	r0, #32
 80026b2:	f001 fedf 	bl	8004474 <HAL_LCD_Write_ascii>
					HAL_LCD_Write_ascii(' ',0,3);
 80026b6:	2203      	movs	r2, #3
 80026b8:	2100      	movs	r1, #0
 80026ba:	2020      	movs	r0, #32
 80026bc:	f001 feda 	bl	8004474 <HAL_LCD_Write_ascii>
					break;
 80026c0:	e054      	b.n	800276c <EDO_3+0x3b0>
				case 1:
					//LL_mDelay(1);
					HAL_LCD_Write_ascii(' ',18,0);
 80026c2:	2200      	movs	r2, #0
 80026c4:	2112      	movs	r1, #18
 80026c6:	2020      	movs	r0, #32
 80026c8:	f001 fed4 	bl	8004474 <HAL_LCD_Write_ascii>
					HAL_LCD_Write_ascii('>',6,1);
 80026cc:	2201      	movs	r2, #1
 80026ce:	2106      	movs	r1, #6
 80026d0:	203e      	movs	r0, #62	; 0x3e
 80026d2:	f001 fecf 	bl	8004474 <HAL_LCD_Write_ascii>
					HAL_LCD_Write_ascii(' ',6,2);
 80026d6:	2202      	movs	r2, #2
 80026d8:	2106      	movs	r1, #6
 80026da:	2020      	movs	r0, #32
 80026dc:	f001 feca 	bl	8004474 <HAL_LCD_Write_ascii>
					HAL_LCD_Write_ascii(' ',0,3);
 80026e0:	2203      	movs	r2, #3
 80026e2:	2100      	movs	r1, #0
 80026e4:	2020      	movs	r0, #32
 80026e6:	f001 fec5 	bl	8004474 <HAL_LCD_Write_ascii>
					break;
 80026ea:	e03f      	b.n	800276c <EDO_3+0x3b0>
				case 2:
					//LL_mDelay(1);
					HAL_LCD_Write_ascii(' ',18,0);
 80026ec:	2200      	movs	r2, #0
 80026ee:	2112      	movs	r1, #18
 80026f0:	2020      	movs	r0, #32
 80026f2:	f001 febf 	bl	8004474 <HAL_LCD_Write_ascii>
					HAL_LCD_Write_ascii(' ',6,1);
 80026f6:	2201      	movs	r2, #1
 80026f8:	2106      	movs	r1, #6
 80026fa:	2020      	movs	r0, #32
 80026fc:	f001 feba 	bl	8004474 <HAL_LCD_Write_ascii>
					HAL_LCD_Write_ascii('>',6,2);
 8002700:	2202      	movs	r2, #2
 8002702:	2106      	movs	r1, #6
 8002704:	203e      	movs	r0, #62	; 0x3e
 8002706:	f001 feb5 	bl	8004474 <HAL_LCD_Write_ascii>
					HAL_LCD_Write_ascii(' ',0,3);
 800270a:	2203      	movs	r2, #3
 800270c:	2100      	movs	r1, #0
 800270e:	2020      	movs	r0, #32
 8002710:	f001 feb0 	bl	8004474 <HAL_LCD_Write_ascii>
					break;
 8002714:	e02a      	b.n	800276c <EDO_3+0x3b0>
 8002716:	bf00      	nop
 8002718:	200006dc 	.word	0x200006dc
 800271c:	20000093 	.word	0x20000093
 8002720:	200000a8 	.word	0x200000a8
 8002724:	200000bd 	.word	0x200000bd
 8002728:	200000d2 	.word	0x200000d2
 800272c:	200006da 	.word	0x200006da
 8002730:	200006ec 	.word	0x200006ec
 8002734:	200006d8 	.word	0x200006d8
 8002738:	200006e4 	.word	0x200006e4
 800273c:	200006e8 	.word	0x200006e8
				case 3:
					//LL_mDelay(1);
					HAL_LCD_Write_ascii(' ',18,0);
 8002740:	2200      	movs	r2, #0
 8002742:	2112      	movs	r1, #18
 8002744:	2020      	movs	r0, #32
 8002746:	f001 fe95 	bl	8004474 <HAL_LCD_Write_ascii>
					HAL_LCD_Write_ascii(' ',6,1);
 800274a:	2201      	movs	r2, #1
 800274c:	2106      	movs	r1, #6
 800274e:	2020      	movs	r0, #32
 8002750:	f001 fe90 	bl	8004474 <HAL_LCD_Write_ascii>
					HAL_LCD_Write_ascii(' ',6,2);
 8002754:	2202      	movs	r2, #2
 8002756:	2106      	movs	r1, #6
 8002758:	2020      	movs	r0, #32
 800275a:	f001 fe8b 	bl	8004474 <HAL_LCD_Write_ascii>
					HAL_LCD_Write_ascii('>',0,3);
 800275e:	2203      	movs	r2, #3
 8002760:	2100      	movs	r1, #0
 8002762:	203e      	movs	r0, #62	; 0x3e
 8002764:	f001 fe86 	bl	8004474 <HAL_LCD_Write_ascii>
								break;
 8002768:	e000      	b.n	800276c <EDO_3+0x3b0>
	}
 800276a:	bf00      	nop
		// Cambio de estado

		first = 0;
		HAL_LCD_Clear();
	}*/
	estado_Anterior(btnU, btnD, btnL, btnR, btnC);
 800276c:	f9b7 4000 	ldrsh.w	r4, [r7]
 8002770:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002774:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002778:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800277c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002780:	9300      	str	r3, [sp, #0]
 8002782:	4623      	mov	r3, r4
 8002784:	f7ff fb04 	bl	8001d90 <estado_Anterior>
}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	bd90      	pop	{r4, r7, pc}

08002790 <EDO_4>:

void EDO_4(short btnU, short btnD, short btnL, short btnR, short btnC){
 8002790:	b590      	push	{r4, r7, lr}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	4604      	mov	r4, r0
 8002798:	4608      	mov	r0, r1
 800279a:	4611      	mov	r1, r2
 800279c:	461a      	mov	r2, r3
 800279e:	4623      	mov	r3, r4
 80027a0:	80fb      	strh	r3, [r7, #6]
 80027a2:	4603      	mov	r3, r0
 80027a4:	80bb      	strh	r3, [r7, #4]
 80027a6:	460b      	mov	r3, r1
 80027a8:	807b      	strh	r3, [r7, #2]
 80027aa:	4613      	mov	r3, r2
 80027ac:	803b      	strh	r3, [r7, #0]
	// Alarma Temperatura
	if(first == 0){
 80027ae:	4b11      	ldr	r3, [pc, #68]	; (80027f4 <EDO_4+0x64>)
 80027b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d10c      	bne.n	80027d2 <EDO_4+0x42>
		// Mostrado de valores fijos
		HAL_LCD_Write_AsciiString("Temperatura",30,1);
 80027b8:	2201      	movs	r2, #1
 80027ba:	211e      	movs	r1, #30
 80027bc:	480e      	ldr	r0, [pc, #56]	; (80027f8 <EDO_4+0x68>)
 80027be:	f001 fec1 	bl	8004544 <HAL_LCD_Write_AsciiString>
		HAL_LCD_Write_AsciiString("Sobrepasada",30,2);
 80027c2:	2202      	movs	r2, #2
 80027c4:	211e      	movs	r1, #30
 80027c6:	480d      	ldr	r0, [pc, #52]	; (80027fc <EDO_4+0x6c>)
 80027c8:	f001 febc 	bl	8004544 <HAL_LCD_Write_AsciiString>
		first = 1;
 80027cc:	4b09      	ldr	r3, [pc, #36]	; (80027f4 <EDO_4+0x64>)
 80027ce:	2201      	movs	r2, #1
 80027d0:	801a      	strh	r2, [r3, #0]
	}
	if(HAL_TEMPSen_ReadTemperature() < 40){
 80027d2:	f001 fff7 	bl	80047c4 <HAL_TEMPSen_ReadTemperature>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b27      	cmp	r3, #39	; 0x27
 80027da:	d807      	bhi.n	80027ec <EDO_4+0x5c>
		// Cambio de estado
		EA = E2;
 80027dc:	4b08      	ldr	r3, [pc, #32]	; (8002800 <EDO_4+0x70>)
 80027de:	2202      	movs	r2, #2
 80027e0:	701a      	strb	r2, [r3, #0]
		first = 0;
 80027e2:	4b04      	ldr	r3, [pc, #16]	; (80027f4 <EDO_4+0x64>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	801a      	strh	r2, [r3, #0]
		HAL_LCD_Clear();
 80027e8:	f001 fdee 	bl	80043c8 <HAL_LCD_Clear>
	}
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd90      	pop	{r4, r7, pc}
 80027f4:	200006dc 	.word	0x200006dc
 80027f8:	08004914 	.word	0x08004914
 80027fc:	08004920 	.word	0x08004920
 8002800:	200006d8 	.word	0x200006d8

08002804 <EDO_5>:

void EDO_5(short btnU, short btnD, short btnL, short btnR, short btnC){
 8002804:	b590      	push	{r4, r7, lr}
 8002806:	b085      	sub	sp, #20
 8002808:	af02      	add	r7, sp, #8
 800280a:	4604      	mov	r4, r0
 800280c:	4608      	mov	r0, r1
 800280e:	4611      	mov	r1, r2
 8002810:	461a      	mov	r2, r3
 8002812:	4623      	mov	r3, r4
 8002814:	80fb      	strh	r3, [r7, #6]
 8002816:	4603      	mov	r3, r0
 8002818:	80bb      	strh	r3, [r7, #4]
 800281a:	460b      	mov	r3, r1
 800281c:	807b      	strh	r3, [r7, #2]
 800281e:	4613      	mov	r3, r2
 8002820:	803b      	strh	r3, [r7, #0]
	// Alarma Pastilla
	if(first == 0){
 8002822:	4b5f      	ldr	r3, [pc, #380]	; (80029a0 <EDO_5+0x19c>)
 8002824:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d11d      	bne.n	8002868 <EDO_5+0x64>
		// Mostrado de valores fijos
		HAL_LCD_Clear();
 800282c:	f001 fdcc 	bl	80043c8 <HAL_LCD_Clear>
		HAL_LCD_Write_AsciiString(word[tomePastilla],24,0);
 8002830:	2200      	movs	r2, #0
 8002832:	2118      	movs	r1, #24
 8002834:	485b      	ldr	r0, [pc, #364]	; (80029a4 <EDO_5+0x1a0>)
 8002836:	f001 fe85 	bl	8004544 <HAL_LCD_Write_AsciiString>
		HAL_LCD_Write_AsciiString(word[rojo],36,1);
 800283a:	2201      	movs	r2, #1
 800283c:	2124      	movs	r1, #36	; 0x24
 800283e:	485a      	ldr	r0, [pc, #360]	; (80029a8 <EDO_5+0x1a4>)
 8002840:	f001 fe80 	bl	8004544 <HAL_LCD_Write_AsciiString>
		HAL_LCD_Write_AsciiString(word[verde],66,1);
 8002844:	2201      	movs	r2, #1
 8002846:	2142      	movs	r1, #66	; 0x42
 8002848:	4858      	ldr	r0, [pc, #352]	; (80029ac <EDO_5+0x1a8>)
 800284a:	f001 fe7b 	bl	8004544 <HAL_LCD_Write_AsciiString>
		HAL_LCD_Write_AsciiString(word[azul],54,2);
 800284e:	2202      	movs	r2, #2
 8002850:	2136      	movs	r1, #54	; 0x36
 8002852:	4857      	ldr	r0, [pc, #348]	; (80029b0 <EDO_5+0x1ac>)
 8002854:	f001 fe76 	bl	8004544 <HAL_LCD_Write_AsciiString>
		HAL_LCD_Write_AsciiString(word[entendido],30,3);
 8002858:	2203      	movs	r2, #3
 800285a:	211e      	movs	r1, #30
 800285c:	4855      	ldr	r0, [pc, #340]	; (80029b4 <EDO_5+0x1b0>)
 800285e:	f001 fe71 	bl	8004544 <HAL_LCD_Write_AsciiString>
		first = 1;
 8002862:	4b4f      	ldr	r3, [pc, #316]	; (80029a0 <EDO_5+0x19c>)
 8002864:	2201      	movs	r2, #1
 8002866:	801a      	strh	r2, [r3, #0]
	}
	if (alarma1==active && alarma2 ==inactive && alarma3 == inactive)
 8002868:	4b53      	ldr	r3, [pc, #332]	; (80029b8 <EDO_5+0x1b4>)
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	2b01      	cmp	r3, #1
 800286e:	d10f      	bne.n	8002890 <EDO_5+0x8c>
 8002870:	4b52      	ldr	r3, [pc, #328]	; (80029bc <EDO_5+0x1b8>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d10b      	bne.n	8002890 <EDO_5+0x8c>
 8002878:	4b51      	ldr	r3, [pc, #324]	; (80029c0 <EDO_5+0x1bc>)
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d107      	bne.n	8002890 <EDO_5+0x8c>
	{
		HAL_LCD_Write_ascii('>',30,1);
 8002880:	2201      	movs	r2, #1
 8002882:	211e      	movs	r1, #30
 8002884:	203e      	movs	r0, #62	; 0x3e
 8002886:	f001 fdf5 	bl	8004474 <HAL_LCD_Write_ascii>
		rgb_rojo();
 800288a:	f001 feff 	bl	800468c <rgb_rojo>
 800288e:	e056      	b.n	800293e <EDO_5+0x13a>
	}
	else if (alarma2==active && alarma1 == inactive && alarma3 == inactive)
 8002890:	4b4a      	ldr	r3, [pc, #296]	; (80029bc <EDO_5+0x1b8>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d10f      	bne.n	80028b8 <EDO_5+0xb4>
 8002898:	4b47      	ldr	r3, [pc, #284]	; (80029b8 <EDO_5+0x1b4>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d10b      	bne.n	80028b8 <EDO_5+0xb4>
 80028a0:	4b47      	ldr	r3, [pc, #284]	; (80029c0 <EDO_5+0x1bc>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d107      	bne.n	80028b8 <EDO_5+0xb4>
	{
		HAL_LCD_Write_ascii('>',60,1);
 80028a8:	2201      	movs	r2, #1
 80028aa:	213c      	movs	r1, #60	; 0x3c
 80028ac:	203e      	movs	r0, #62	; 0x3e
 80028ae:	f001 fde1 	bl	8004474 <HAL_LCD_Write_ascii>
		rgb_verde();
 80028b2:	f001 fef8 	bl	80046a6 <rgb_verde>
 80028b6:	e042      	b.n	800293e <EDO_5+0x13a>
	}
	else  if (alarma3==active && alarma1 ==inactive && alarma2 ==inactive)
 80028b8:	4b41      	ldr	r3, [pc, #260]	; (80029c0 <EDO_5+0x1bc>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d10f      	bne.n	80028e0 <EDO_5+0xdc>
 80028c0:	4b3d      	ldr	r3, [pc, #244]	; (80029b8 <EDO_5+0x1b4>)
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d10b      	bne.n	80028e0 <EDO_5+0xdc>
 80028c8:	4b3c      	ldr	r3, [pc, #240]	; (80029bc <EDO_5+0x1b8>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d107      	bne.n	80028e0 <EDO_5+0xdc>
	{
		HAL_LCD_Write_ascii('>',48,2);
 80028d0:	2202      	movs	r2, #2
 80028d2:	2130      	movs	r1, #48	; 0x30
 80028d4:	203e      	movs	r0, #62	; 0x3e
 80028d6:	f001 fdcd 	bl	8004474 <HAL_LCD_Write_ascii>
		rgb_azul();
 80028da:	f001 fef1 	bl	80046c0 <rgb_azul>
 80028de:	e02e      	b.n	800293e <EDO_5+0x13a>
	}
	else if (alarma1==active && alarma2 == active && alarma3 ==inactive)
 80028e0:	4b35      	ldr	r3, [pc, #212]	; (80029b8 <EDO_5+0x1b4>)
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d10a      	bne.n	80028fe <EDO_5+0xfa>
 80028e8:	4b34      	ldr	r3, [pc, #208]	; (80029bc <EDO_5+0x1b8>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d106      	bne.n	80028fe <EDO_5+0xfa>
 80028f0:	4b33      	ldr	r3, [pc, #204]	; (80029c0 <EDO_5+0x1bc>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d102      	bne.n	80028fe <EDO_5+0xfa>
		rgb_amarillo();
 80028f8:	f001 feef 	bl	80046da <rgb_amarillo>
 80028fc:	e01f      	b.n	800293e <EDO_5+0x13a>
	else if (alarma1==inactive && alarma2 == active && alarma3 ==active)
 80028fe:	4b2e      	ldr	r3, [pc, #184]	; (80029b8 <EDO_5+0x1b4>)
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d10a      	bne.n	800291c <EDO_5+0x118>
 8002906:	4b2d      	ldr	r3, [pc, #180]	; (80029bc <EDO_5+0x1b8>)
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d106      	bne.n	800291c <EDO_5+0x118>
 800290e:	4b2c      	ldr	r3, [pc, #176]	; (80029c0 <EDO_5+0x1bc>)
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	2b01      	cmp	r3, #1
 8002914:	d102      	bne.n	800291c <EDO_5+0x118>
		rgb_celeste();
 8002916:	f001 feed 	bl	80046f4 <rgb_celeste>
 800291a:	e010      	b.n	800293e <EDO_5+0x13a>
	else if (alarma1==active && alarma2 == inactive && alarma3 ==active)
 800291c:	4b26      	ldr	r3, [pc, #152]	; (80029b8 <EDO_5+0x1b4>)
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d10a      	bne.n	800293a <EDO_5+0x136>
 8002924:	4b25      	ldr	r3, [pc, #148]	; (80029bc <EDO_5+0x1b8>)
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d106      	bne.n	800293a <EDO_5+0x136>
 800292c:	4b24      	ldr	r3, [pc, #144]	; (80029c0 <EDO_5+0x1bc>)
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d102      	bne.n	800293a <EDO_5+0x136>
		rgb_morado();
 8002934:	f001 feeb 	bl	800470e <rgb_morado>
 8002938:	e001      	b.n	800293e <EDO_5+0x13a>
	else
		rgb_blanco();
 800293a:	f001 fef5 	bl	8004728 <rgb_blanco>





	if(btnC == 1 && btnC != btnCa){
 800293e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d119      	bne.n	800297a <EDO_5+0x176>
 8002946:	4b1f      	ldr	r3, [pc, #124]	; (80029c4 <EDO_5+0x1c0>)
 8002948:	f9b3 3000 	ldrsh.w	r3, [r3]
 800294c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002950:	429a      	cmp	r2, r3
 8002952:	d012      	beq.n	800297a <EDO_5+0x176>
		// Cambio de estado
		EA = E3;
 8002954:	4b1c      	ldr	r3, [pc, #112]	; (80029c8 <EDO_5+0x1c4>)
 8002956:	2203      	movs	r2, #3
 8002958:	701a      	strb	r2, [r3, #0]
		first = 0;
 800295a:	4b11      	ldr	r3, [pc, #68]	; (80029a0 <EDO_5+0x19c>)
 800295c:	2200      	movs	r2, #0
 800295e:	801a      	strh	r2, [r3, #0]
		HAL_LCD_Clear();
 8002960:	f001 fd32 	bl	80043c8 <HAL_LCD_Clear>
		rgb_apagado();
 8002964:	f001 feed 	bl	8004742 <rgb_apagado>
		alarma1=inactive;
 8002968:	4b13      	ldr	r3, [pc, #76]	; (80029b8 <EDO_5+0x1b4>)
 800296a:	2200      	movs	r2, #0
 800296c:	701a      	strb	r2, [r3, #0]
		alarma2=inactive;
 800296e:	4b13      	ldr	r3, [pc, #76]	; (80029bc <EDO_5+0x1b8>)
 8002970:	2200      	movs	r2, #0
 8002972:	701a      	strb	r2, [r3, #0]
		alarma3=inactive;
 8002974:	4b12      	ldr	r3, [pc, #72]	; (80029c0 <EDO_5+0x1bc>)
 8002976:	2200      	movs	r2, #0
 8002978:	701a      	strb	r2, [r3, #0]
	}
	estado_Anterior(btnU, btnD, btnL, btnR, btnC);
 800297a:	f9b7 4000 	ldrsh.w	r4, [r7]
 800297e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002982:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002986:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800298a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800298e:	9300      	str	r3, [sp, #0]
 8002990:	4623      	mov	r3, r4
 8002992:	f7ff f9fd 	bl	8001d90 <estado_Anterior>
}
 8002996:	bf00      	nop
 8002998:	370c      	adds	r7, #12
 800299a:	46bd      	mov	sp, r7
 800299c:	bd90      	pop	{r4, r7, pc}
 800299e:	bf00      	nop
 80029a0:	200006dc 	.word	0x200006dc
 80029a4:	200000fc 	.word	0x200000fc
 80029a8:	20000111 	.word	0x20000111
 80029ac:	20000126 	.word	0x20000126
 80029b0:	2000013b 	.word	0x2000013b
 80029b4:	20000150 	.word	0x20000150
 80029b8:	200006f6 	.word	0x200006f6
 80029bc:	200006ff 	.word	0x200006ff
 80029c0:	200006f8 	.word	0x200006f8
 80029c4:	200006ec 	.word	0x200006ec
 80029c8:	200006d8 	.word	0x200006d8

080029cc <EDO_6>:

void EDO_6(short btnU, short btnD, short btnL, short btnR, short btnC){
 80029cc:	b590      	push	{r4, r7, lr}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af02      	add	r7, sp, #8
 80029d2:	4604      	mov	r4, r0
 80029d4:	4608      	mov	r0, r1
 80029d6:	4611      	mov	r1, r2
 80029d8:	461a      	mov	r2, r3
 80029da:	4623      	mov	r3, r4
 80029dc:	80fb      	strh	r3, [r7, #6]
 80029de:	4603      	mov	r3, r0
 80029e0:	80bb      	strh	r3, [r7, #4]
 80029e2:	460b      	mov	r3, r1
 80029e4:	807b      	strh	r3, [r7, #2]
 80029e6:	4613      	mov	r3, r2
 80029e8:	803b      	strh	r3, [r7, #0]
	// Codigo de estado inicio

	if(btnC == 1 && btnC != btnCa){
 80029ea:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d10e      	bne.n	8002a10 <EDO_6+0x44>
 80029f2:	4b10      	ldr	r3, [pc, #64]	; (8002a34 <EDO_6+0x68>)
 80029f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029f8:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d007      	beq.n	8002a10 <EDO_6+0x44>
		// Cambio de estado
		EA = E3;
 8002a00:	4b0d      	ldr	r3, [pc, #52]	; (8002a38 <EDO_6+0x6c>)
 8002a02:	2203      	movs	r2, #3
 8002a04:	701a      	strb	r2, [r3, #0]
		first = 0;
 8002a06:	4b0d      	ldr	r3, [pc, #52]	; (8002a3c <EDO_6+0x70>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	801a      	strh	r2, [r3, #0]
		HAL_LCD_Clear();
 8002a0c:	f001 fcdc 	bl	80043c8 <HAL_LCD_Clear>
	}
	estado_Anterior(btnU, btnD, btnL, btnR, btnC);
 8002a10:	f9b7 4000 	ldrsh.w	r4, [r7]
 8002a14:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002a18:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002a1c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002a20:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002a24:	9300      	str	r3, [sp, #0]
 8002a26:	4623      	mov	r3, r4
 8002a28:	f7ff f9b2 	bl	8001d90 <estado_Anterior>
}
 8002a2c:	bf00      	nop
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd90      	pop	{r4, r7, pc}
 8002a34:	200006ec 	.word	0x200006ec
 8002a38:	200006d8 	.word	0x200006d8
 8002a3c:	200006dc 	.word	0x200006dc

08002a40 <EDO_7>:
void EDO_7(short btnU, short btnD, short btnL, short btnR, short btnC){
 8002a40:	b590      	push	{r4, r7, lr}
 8002a42:	b085      	sub	sp, #20
 8002a44:	af02      	add	r7, sp, #8
 8002a46:	4604      	mov	r4, r0
 8002a48:	4608      	mov	r0, r1
 8002a4a:	4611      	mov	r1, r2
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	4623      	mov	r3, r4
 8002a50:	80fb      	strh	r3, [r7, #6]
 8002a52:	4603      	mov	r3, r0
 8002a54:	80bb      	strh	r3, [r7, #4]
 8002a56:	460b      	mov	r3, r1
 8002a58:	807b      	strh	r3, [r7, #2]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	803b      	strh	r3, [r7, #0]
	//Intervalos pastillas
	if (first==0)
 8002a5e:	4b37      	ldr	r3, [pc, #220]	; (8002b3c <EDO_7+0xfc>)
 8002a60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d143      	bne.n	8002af0 <EDO_7+0xb0>
	{
		HAL_LCD_Write_AsciiString(word[w_alarms],42,0);
 8002a68:	2200      	movs	r2, #0
 8002a6a:	212a      	movs	r1, #42	; 0x2a
 8002a6c:	4834      	ldr	r0, [pc, #208]	; (8002b40 <EDO_7+0x100>)
 8002a6e:	f001 fd69 	bl	8004544 <HAL_LCD_Write_AsciiString>
		HAL_LCD_Write_AsciiString(word[w_red],30,1);
 8002a72:	2201      	movs	r2, #1
 8002a74:	211e      	movs	r1, #30
 8002a76:	4833      	ldr	r0, [pc, #204]	; (8002b44 <EDO_7+0x104>)
 8002a78:	f001 fd64 	bl	8004544 <HAL_LCD_Write_AsciiString>
		HAL_LCD_Write_AsciiString(word[w_green],30,2);
 8002a7c:	2202      	movs	r2, #2
 8002a7e:	211e      	movs	r1, #30
 8002a80:	4831      	ldr	r0, [pc, #196]	; (8002b48 <EDO_7+0x108>)
 8002a82:	f001 fd5f 	bl	8004544 <HAL_LCD_Write_AsciiString>
		HAL_LCD_Write_AsciiString(word[w_blue],30,3);
 8002a86:	2203      	movs	r2, #3
 8002a88:	211e      	movs	r1, #30
 8002a8a:	4830      	ldr	r0, [pc, #192]	; (8002b4c <EDO_7+0x10c>)
 8002a8c:	f001 fd5a 	bl	8004544 <HAL_LCD_Write_AsciiString>
		HAL_LCD_Write_ascii(':',78,1);
 8002a90:	2201      	movs	r2, #1
 8002a92:	214e      	movs	r1, #78	; 0x4e
 8002a94:	203a      	movs	r0, #58	; 0x3a
 8002a96:	f001 fced 	bl	8004474 <HAL_LCD_Write_ascii>
		HAL_LCD_Write_ascii(':',78,2);
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	214e      	movs	r1, #78	; 0x4e
 8002a9e:	203a      	movs	r0, #58	; 0x3a
 8002aa0:	f001 fce8 	bl	8004474 <HAL_LCD_Write_ascii>
		HAL_LCD_Write_ascii(':',78,3);
 8002aa4:	2203      	movs	r2, #3
 8002aa6:	214e      	movs	r1, #78	; 0x4e
 8002aa8:	203a      	movs	r0, #58	; 0x3a
 8002aaa:	f001 fce3 	bl	8004474 <HAL_LCD_Write_ascii>
		HAL_LCD_Write_Number(&IntervaloH1,66,1);
 8002aae:	2201      	movs	r2, #1
 8002ab0:	2142      	movs	r1, #66	; 0x42
 8002ab2:	4827      	ldr	r0, [pc, #156]	; (8002b50 <EDO_7+0x110>)
 8002ab4:	f001 fd76 	bl	80045a4 <HAL_LCD_Write_Number>
		HAL_LCD_Write_Number(&IntervaloM1,84,1);
 8002ab8:	2201      	movs	r2, #1
 8002aba:	2154      	movs	r1, #84	; 0x54
 8002abc:	4825      	ldr	r0, [pc, #148]	; (8002b54 <EDO_7+0x114>)
 8002abe:	f001 fd71 	bl	80045a4 <HAL_LCD_Write_Number>
		HAL_LCD_Write_Number(&IntervaloH2,66,2);
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	2142      	movs	r1, #66	; 0x42
 8002ac6:	4824      	ldr	r0, [pc, #144]	; (8002b58 <EDO_7+0x118>)
 8002ac8:	f001 fd6c 	bl	80045a4 <HAL_LCD_Write_Number>
		HAL_LCD_Write_Number(&IntervaloM2,84,2);
 8002acc:	2202      	movs	r2, #2
 8002ace:	2154      	movs	r1, #84	; 0x54
 8002ad0:	4822      	ldr	r0, [pc, #136]	; (8002b5c <EDO_7+0x11c>)
 8002ad2:	f001 fd67 	bl	80045a4 <HAL_LCD_Write_Number>
		HAL_LCD_Write_Number(&IntervaloH3,66,3);
 8002ad6:	2203      	movs	r2, #3
 8002ad8:	2142      	movs	r1, #66	; 0x42
 8002ada:	4821      	ldr	r0, [pc, #132]	; (8002b60 <EDO_7+0x120>)
 8002adc:	f001 fd62 	bl	80045a4 <HAL_LCD_Write_Number>
		HAL_LCD_Write_Number(&IntervaloM3,84,3);
 8002ae0:	2203      	movs	r2, #3
 8002ae2:	2154      	movs	r1, #84	; 0x54
 8002ae4:	481f      	ldr	r0, [pc, #124]	; (8002b64 <EDO_7+0x124>)
 8002ae6:	f001 fd5d 	bl	80045a4 <HAL_LCD_Write_Number>
		first=1;
 8002aea:	4b14      	ldr	r3, [pc, #80]	; (8002b3c <EDO_7+0xfc>)
 8002aec:	2201      	movs	r2, #1
 8002aee:	801a      	strh	r2, [r3, #0]
	}

	if(btnC == 1 && btnC != btnCa){
 8002af0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d10e      	bne.n	8002b16 <EDO_7+0xd6>
 8002af8:	4b1b      	ldr	r3, [pc, #108]	; (8002b68 <EDO_7+0x128>)
 8002afa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002afe:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d007      	beq.n	8002b16 <EDO_7+0xd6>
		// Cambio de estado
		first = 0;
 8002b06:	4b0d      	ldr	r3, [pc, #52]	; (8002b3c <EDO_7+0xfc>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	801a      	strh	r2, [r3, #0]
		HAL_LCD_Clear();
 8002b0c:	f001 fc5c 	bl	80043c8 <HAL_LCD_Clear>
		EA=E3;
 8002b10:	4b16      	ldr	r3, [pc, #88]	; (8002b6c <EDO_7+0x12c>)
 8002b12:	2203      	movs	r2, #3
 8002b14:	701a      	strb	r2, [r3, #0]
	}
	estado_Anterior(btnU, btnD, btnL, btnR, btnC);
 8002b16:	f9b7 4000 	ldrsh.w	r4, [r7]
 8002b1a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002b1e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002b22:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002b26:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002b2a:	9300      	str	r3, [sp, #0]
 8002b2c:	4623      	mov	r3, r4
 8002b2e:	f7ff f92f 	bl	8001d90 <estado_Anterior>
}
 8002b32:	bf00      	nop
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd90      	pop	{r4, r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	200006dc 	.word	0x200006dc
 8002b40:	20000165 	.word	0x20000165
 8002b44:	20000111 	.word	0x20000111
 8002b48:	20000126 	.word	0x20000126
 8002b4c:	2000013b 	.word	0x2000013b
 8002b50:	200006fa 	.word	0x200006fa
 8002b54:	200006f9 	.word	0x200006f9
 8002b58:	200006fc 	.word	0x200006fc
 8002b5c:	200006fd 	.word	0x200006fd
 8002b60:	20000700 	.word	0x20000700
 8002b64:	200006f7 	.word	0x200006f7
 8002b68:	200006ec 	.word	0x200006ec
 8002b6c:	200006d8 	.word	0x200006d8

08002b70 <fsm>:
		{E5,EDO_5},
		{E6,EDO_6},
		{E7,EDO_7}
};

void fsm(short btnU, short btnD,short btnL, short btnR, short btnC){
 8002b70:	b5b0      	push	{r4, r5, r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af02      	add	r7, sp, #8
 8002b76:	4604      	mov	r4, r0
 8002b78:	4608      	mov	r0, r1
 8002b7a:	4611      	mov	r1, r2
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	4623      	mov	r3, r4
 8002b80:	80fb      	strh	r3, [r7, #6]
 8002b82:	4603      	mov	r3, r0
 8002b84:	80bb      	strh	r3, [r7, #4]
 8002b86:	460b      	mov	r3, r1
 8002b88:	807b      	strh	r3, [r7, #2]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	803b      	strh	r3, [r7, #0]
	MDE[EA].func(btnU, btnD, btnL, btnR, btnC);
 8002b8e:	4b0b      	ldr	r3, [pc, #44]	; (8002bbc <fsm+0x4c>)
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	4a0b      	ldr	r2, [pc, #44]	; (8002bc0 <fsm+0x50>)
 8002b94:	00db      	lsls	r3, r3, #3
 8002b96:	4413      	add	r3, r2
 8002b98:	685c      	ldr	r4, [r3, #4]
 8002b9a:	f9b7 5000 	ldrsh.w	r5, [r7]
 8002b9e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002ba2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002ba6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002baa:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002bae:	9300      	str	r3, [sp, #0]
 8002bb0:	462b      	mov	r3, r5
 8002bb2:	47a0      	blx	r4
}
 8002bb4:	bf00      	nop
 8002bb6:	3708      	adds	r7, #8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bdb0      	pop	{r4, r5, r7, pc}
 8002bbc:	200006d8 	.word	0x200006d8
 8002bc0:	2000017c 	.word	0x2000017c

08002bc4 <LL_RCC_EnableRTC>:
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002bc8:	4a05      	ldr	r2, [pc, #20]	; (8002be0 <LL_RCC_EnableRTC+0x1c>)
 8002bca:	4b05      	ldr	r3, [pc, #20]	; (8002be0 <LL_RCC_EnableRTC+0x1c>)
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bd2:	6213      	str	r3, [r2, #32]
}
 8002bd4:	bf00      	nop
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	40021000 	.word	0x40021000

08002be4 <LL_RTC_EnableInitMode>:
  * @rmtoll ISR          INIT          LL_RTC_EnableInitMode
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableInitMode(RTC_TypeDef *RTCx)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  /* Set the Initialization mode */
  WRITE_REG(RTCx->ISR, RTC_INIT_MASK);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f04f 32ff 	mov.w	r2, #4294967295
 8002bf2:	60da      	str	r2, [r3, #12]
}
 8002bf4:	bf00      	nop
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <LL_RTC_DisableInitMode>:
  * @rmtoll ISR          INIT          LL_RTC_DisableInitMode
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableInitMode(RTC_TypeDef *RTCx)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  /* Exit Initialization mode */
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c0e:	60da      	str	r2, [r3, #12]
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <LL_RTC_SetAsynchPrescaler>:
  * @param  RTCx RTC Instance
  * @param  AsynchPrescaler Value between Min_Data = 0 and Max_Data = 0x7F
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetAsynchPrescaler(RTC_TypeDef *RTCx, uint32_t AsynchPrescaler)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_PRER_PREDIV_A_Pos);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	041b      	lsls	r3, r3, #16
 8002c32:	431a      	orrs	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	611a      	str	r2, [r3, #16]
}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <LL_RTC_SetSynchPrescaler>:
  * @param  RTCx RTC Instance
  * @param  SynchPrescaler Value between Min_Data = 0 and Max_Data = 0x7FFF
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetSynchPrescaler(RTC_TypeDef *RTCx, uint32_t SynchPrescaler)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002c56:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002c5a:	683a      	ldr	r2, [r7, #0]
 8002c5c:	431a      	orrs	r2, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	611a      	str	r2, [r3, #16]
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr

08002c6e <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b083      	sub	sp, #12
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	22ff      	movs	r2, #255	; 0xff
 8002c7a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	22ca      	movs	r2, #202	; 0xca
 8002c94:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2253      	movs	r2, #83	; 0x53
 8002c9a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <LL_RTC_TIME_GetHour>:
  *         TR           HU            LL_RTC_TIME_GetHour
  * @param  RTCx RTC Instance
  * @retval Value between Min_Data=0x01 and Max_Data=0x12 or between Min_Data=0x00 and Max_Data=0x23
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetHour(RTC_TypeDef *RTCx)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RTCx->TR, (RTC_TR_HT | RTC_TR_HU))) >> RTC_TR_HU_Pos);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	0c1b      	lsrs	r3, r3, #16
 8002cb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr

08002cc6 <LL_RTC_TIME_GetMinute>:
  *         TR           MNU           LL_RTC_TIME_GetMinute
  * @param  RTCx RTC Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0x59
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetMinute(RTC_TypeDef *RTCx)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b083      	sub	sp, #12
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->TR, (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	0a1b      	lsrs	r3, r3, #8
 8002cd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <LL_RTC_TIME_GetSecond>:
  *         TR           SU            LL_RTC_TIME_GetSecond
  * @param  RTCx RTC Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0x59
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSecond(RTC_TypeDef *RTCx)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->TR, (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <LL_RTC_TIME_Config>:
  * @param  Minutes Value between Min_Data=0x00 and Max_Data=0x59
  * @param  Seconds Value between Min_Data=0x00 and Max_Data=0x59
  * @retval None
  */
__STATIC_INLINE void LL_RTC_TIME_Config(RTC_TypeDef *RTCx, uint32_t Format12_24, uint32_t Hours, uint32_t Minutes, uint32_t Seconds)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b087      	sub	sp, #28
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
 8002d0c:	603b      	str	r3, [r7, #0]
  uint32_t temp = 0U;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	617b      	str	r3, [r7, #20]

  temp = Format12_24                                                                                    | \
         (((Hours & 0xF0U) << (RTC_TR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_TR_HU_Pos))     | \
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	041b      	lsls	r3, r3, #16
 8002d16:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
  temp = Format12_24                                                                                    | \
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	431a      	orrs	r2, r3
         (((Minutes & 0xF0U) << (RTC_TR_MNT_Pos - 4U)) | ((Minutes & 0x0FU) << RTC_TR_MNU_Pos)) | \
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	021b      	lsls	r3, r3, #8
 8002d22:	b29b      	uxth	r3, r3
         (((Hours & 0xF0U) << (RTC_TR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_TR_HU_Pos))     | \
 8002d24:	431a      	orrs	r2, r3
         (((Seconds & 0xF0U) << (RTC_TR_ST_Pos - 4U)) | ((Seconds & 0x0FU) << RTC_TR_SU_Pos));
 8002d26:	6a3b      	ldr	r3, [r7, #32]
 8002d28:	b2db      	uxtb	r3, r3
  temp = Format12_24                                                                                    | \
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
 8002d36:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	431a      	orrs	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	601a      	str	r2, [r3, #0]
}
 8002d42:	bf00      	nop
 8002d44:	371c      	adds	r7, #28
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr

08002d4e <LL_RTC_BAK_SetRegister>:
  *         (*) value not defined in all devices.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_RTC_BAK_SetRegister(RTC_TypeDef *RTCx, uint32_t BackupRegister, uint32_t Data)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b087      	sub	sp, #28
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	60f8      	str	r0, [r7, #12]
 8002d56:	60b9      	str	r1, [r7, #8]
 8002d58:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	617b      	str	r3, [r7, #20]

  tmp = (uint32_t)(&(RTCx->BKP0R));
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	3350      	adds	r3, #80	; 0x50
 8002d62:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	697a      	ldr	r2, [r7, #20]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	601a      	str	r2, [r3, #0]
}
 8002d74:	bf00      	nop
 8002d76:	371c      	adds	r7, #28
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <LL_RTC_BAK_GetRegister>:
  *
  *         (*) value not defined in all devices.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_BAK_GetRegister(RTC_TypeDef *RTCx, uint32_t BackupRegister)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	60fb      	str	r3, [r7, #12]

  tmp = (uint32_t)(&(RTCx->BKP0R));
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	3350      	adds	r3, #80	; 0x50
 8002d92:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3714      	adds	r7, #20
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr

08002dae <LL_RTC_IsActiveFlag_INIT>:
  * @rmtoll ISR          INITF         LL_RTC_IsActiveFlag_INIT
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_INIT(RTC_TypeDef *RTCx)
{
 8002dae:	b480      	push	{r7}
 8002db0:	b083      	sub	sp, #12
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF));
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dbe:	2b40      	cmp	r3, #64	; 0x40
 8002dc0:	bf0c      	ite	eq
 8002dc2:	2301      	moveq	r3, #1
 8002dc4:	2300      	movne	r3, #0
 8002dc6:	b2db      	uxtb	r3, r3
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <LL_RTC_IsActiveFlag_RS>:
  * @rmtoll ISR          RSF           LL_RTC_IsActiveFlag_RS
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_RS(RTC_TypeDef *RTCx)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ISR, RTC_ISR_RSF) == (RTC_ISR_RSF));
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	f003 0320 	and.w	r3, r3, #32
 8002de4:	2b20      	cmp	r3, #32
 8002de6:	bf0c      	ite	eq
 8002de8:	2301      	moveq	r3, #1
 8002dea:	2300      	movne	r3, #0
 8002dec:	b2db      	uxtb	r3, r3
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr

08002dfa <LL_RTC_ClearFlag_RS>:
  * @rmtoll ISR          RSF           LL_RTC_ClearFlag_RS
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_ClearFlag_RS(RTC_TypeDef *RTCx)
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	b083      	sub	sp, #12
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, (~((RTC_ISR_RSF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTCx->ISR & RTC_ISR_INIT)));
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e0a:	f063 02a0 	orn	r2, r3, #160	; 0xa0
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	60da      	str	r2, [r3, #12]
}
 8002e12:	bf00      	nop
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
	...

08002e20 <MX_RTC_Init>:

/* USER CODE END 0 */

/* RTC init function */
void MX_RTC_Init(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  LL_RTC_InitTypeDef RTC_InitStruct = {0};
 8002e26:	f107 030c 	add.w	r3, r7, #12
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	605a      	str	r2, [r3, #4]
 8002e30:	609a      	str	r2, [r3, #8]
  LL_RTC_TimeTypeDef RTC_TimeStruct = {0};
 8002e32:	1d3b      	adds	r3, r7, #4
 8002e34:	2200      	movs	r2, #0
 8002e36:	601a      	str	r2, [r3, #0]
 8002e38:	605a      	str	r2, [r3, #4]
  LL_RTC_DateTypeDef RTC_DateStruct = {0};
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	603b      	str	r3, [r7, #0]

  /* Peripheral clock enable */
  LL_RCC_EnableRTC();
 8002e3e:	f7ff fec1 	bl	8002bc4 <LL_RCC_EnableRTC>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC and set the Time and Date
  */
  RTC_InitStruct.HourFormat = LL_RTC_HOURFORMAT_24HOUR;
 8002e42:	2300      	movs	r3, #0
 8002e44:	60fb      	str	r3, [r7, #12]
  RTC_InitStruct.AsynchPrescaler = 127;
 8002e46:	237f      	movs	r3, #127	; 0x7f
 8002e48:	613b      	str	r3, [r7, #16]
  RTC_InitStruct.SynchPrescaler = 255;
 8002e4a:	23ff      	movs	r3, #255	; 0xff
 8002e4c:	617b      	str	r3, [r7, #20]
  LL_RTC_Init(RTC, &RTC_InitStruct);
 8002e4e:	f107 030c 	add.w	r3, r7, #12
 8002e52:	4619      	mov	r1, r3
 8002e54:	481f      	ldr	r0, [pc, #124]	; (8002ed4 <MX_RTC_Init+0xb4>)
 8002e56:	f000 ff15 	bl	8003c84 <LL_RTC_Init>
  LL_RTC_SetAsynchPrescaler(RTC, 127);
 8002e5a:	217f      	movs	r1, #127	; 0x7f
 8002e5c:	481d      	ldr	r0, [pc, #116]	; (8002ed4 <MX_RTC_Init+0xb4>)
 8002e5e:	f7ff fedd 	bl	8002c1c <LL_RTC_SetAsynchPrescaler>
  LL_RTC_SetSynchPrescaler(RTC, 255);
 8002e62:	21ff      	movs	r1, #255	; 0xff
 8002e64:	481b      	ldr	r0, [pc, #108]	; (8002ed4 <MX_RTC_Init+0xb4>)
 8002e66:	f7ff feed 	bl	8002c44 <LL_RTC_SetSynchPrescaler>
  /** Initialize RTC and set the Time and Date
  */
  if(LL_RTC_BAK_GetRegister(RTC, LL_RTC_BKP_DR0) != 0x32F2){
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	4819      	ldr	r0, [pc, #100]	; (8002ed4 <MX_RTC_Init+0xb4>)
 8002e6e:	f7ff ff87 	bl	8002d80 <LL_RTC_BAK_GetRegister>
 8002e72:	4602      	mov	r2, r0
 8002e74:	f243 23f2 	movw	r3, #13042	; 0x32f2
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d01d      	beq.n	8002eb8 <MX_RTC_Init+0x98>

  RTC_TimeStruct.Hours = 0;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	723b      	strb	r3, [r7, #8]
  RTC_TimeStruct.Minutes = 0;
 8002e80:	2300      	movs	r3, #0
 8002e82:	727b      	strb	r3, [r7, #9]
  RTC_TimeStruct.Seconds = 0;
 8002e84:	2300      	movs	r3, #0
 8002e86:	72bb      	strb	r3, [r7, #10]
  LL_RTC_TIME_Init(RTC, LL_RTC_FORMAT_BIN, &RTC_TimeStruct);
 8002e88:	1d3b      	adds	r3, r7, #4
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	2100      	movs	r1, #0
 8002e8e:	4811      	ldr	r0, [pc, #68]	; (8002ed4 <MX_RTC_Init+0xb4>)
 8002e90:	f000 ff28 	bl	8003ce4 <LL_RTC_TIME_Init>
  RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_MONDAY;
 8002e94:	2301      	movs	r3, #1
 8002e96:	703b      	strb	r3, [r7, #0]
  RTC_DateStruct.Month = LL_RTC_MONTH_JANUARY;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	707b      	strb	r3, [r7, #1]
  RTC_DateStruct.Year = 0;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	70fb      	strb	r3, [r7, #3]
  LL_RTC_DATE_Init(RTC, LL_RTC_FORMAT_BIN, &RTC_DateStruct);
 8002ea0:	463b      	mov	r3, r7
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	480b      	ldr	r0, [pc, #44]	; (8002ed4 <MX_RTC_Init+0xb4>)
 8002ea8:	f000 ffc2 	bl	8003e30 <LL_RTC_DATE_Init>
    LL_RTC_BAK_SetRegister(RTC,LL_RTC_BKP_DR0,0x32F2);
 8002eac:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	4808      	ldr	r0, [pc, #32]	; (8002ed4 <MX_RTC_Init+0xb4>)
 8002eb4:	f7ff ff4b 	bl	8002d4e <LL_RTC_BAK_SetRegister>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  LL_RTC_DisableWriteProtection(RTC);
 8002eb8:	4806      	ldr	r0, [pc, #24]	; (8002ed4 <MX_RTC_Init+0xb4>)
 8002eba:	f7ff fee5 	bl	8002c88 <LL_RTC_DisableWriteProtection>
  MX_RTC_Enter_InitMode();
 8002ebe:	f000 f80b 	bl	8002ed8 <MX_RTC_Enter_InitMode>

  MX_RTC_Exit_InitMode();
 8002ec2:	f000 f819 	bl	8002ef8 <MX_RTC_Exit_InitMode>
  LL_RTC_EnableWriteProtection(RTC);
 8002ec6:	4803      	ldr	r0, [pc, #12]	; (8002ed4 <MX_RTC_Init+0xb4>)
 8002ec8:	f7ff fed1 	bl	8002c6e <LL_RTC_EnableWriteProtection>
  /* USER CODE END RTC_Init 2 */

}
 8002ecc:	bf00      	nop
 8002ece:	3718      	adds	r7, #24
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	40002800 	.word	0x40002800

08002ed8 <MX_RTC_Enter_InitMode>:

/* USER CODE BEGIN 1 */

/*This functions is to start the RTC initialization mode*/
void MX_RTC_Enter_InitMode(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
	LL_RTC_EnableInitMode(RTC);
 8002edc:	4805      	ldr	r0, [pc, #20]	; (8002ef4 <MX_RTC_Enter_InitMode+0x1c>)
 8002ede:	f7ff fe81 	bl	8002be4 <LL_RTC_EnableInitMode>
	while (!LL_RTC_IsActiveFlag_INIT(RTC));
 8002ee2:	bf00      	nop
 8002ee4:	4803      	ldr	r0, [pc, #12]	; (8002ef4 <MX_RTC_Enter_InitMode+0x1c>)
 8002ee6:	f7ff ff62 	bl	8002dae <LL_RTC_IsActiveFlag_INIT>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d0f9      	beq.n	8002ee4 <MX_RTC_Enter_InitMode+0xc>

	return;
 8002ef0:	bf00      	nop
}
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	40002800 	.word	0x40002800

08002ef8 <MX_RTC_Exit_InitMode>:

/*This functions is to finish the RTC initialization mode*/
void MX_RTC_Exit_InitMode (void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
	LL_RTC_DisableInitMode(RTC);
 8002efc:	4807      	ldr	r0, [pc, #28]	; (8002f1c <MX_RTC_Exit_InitMode+0x24>)
 8002efe:	f7ff fe7f 	bl	8002c00 <LL_RTC_DisableInitMode>
	LL_RTC_ClearFlag_RS(RTC);
 8002f02:	4806      	ldr	r0, [pc, #24]	; (8002f1c <MX_RTC_Exit_InitMode+0x24>)
 8002f04:	f7ff ff79 	bl	8002dfa <LL_RTC_ClearFlag_RS>
	while (!LL_RTC_IsActiveFlag_RS(RTC));
 8002f08:	bf00      	nop
 8002f0a:	4804      	ldr	r0, [pc, #16]	; (8002f1c <MX_RTC_Exit_InitMode+0x24>)
 8002f0c:	f7ff ff62 	bl	8002dd4 <LL_RTC_IsActiveFlag_RS>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d0f9      	beq.n	8002f0a <MX_RTC_Exit_InitMode+0x12>
}
 8002f16:	bf00      	nop
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	40002800 	.word	0x40002800

08002f20 <MX_RTC_GetTime>:

/*This function returns the actual time*/
void MX_RTC_GetTime(uint8_t *hours, uint8_t *minutes, uint8_t *seconds)
{
 8002f20:	b590      	push	{r4, r7, lr}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
	*hours   = __LL_RTC_CONVERT_BCD2BIN (LL_RTC_TIME_GetHour(RTC));
 8002f2c:	482a      	ldr	r0, [pc, #168]	; (8002fd8 <MX_RTC_GetTime+0xb8>)
 8002f2e:	f7ff febb 	bl	8002ca8 <LL_RTC_TIME_GetHour>
 8002f32:	4603      	mov	r3, r0
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	111b      	asrs	r3, r3, #4
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	f003 030f 	and.w	r3, r3, #15
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	461a      	mov	r2, r3
 8002f42:	0092      	lsls	r2, r2, #2
 8002f44:	4413      	add	r3, r2
 8002f46:	005b      	lsls	r3, r3, #1
 8002f48:	b2dc      	uxtb	r4, r3
 8002f4a:	4823      	ldr	r0, [pc, #140]	; (8002fd8 <MX_RTC_GetTime+0xb8>)
 8002f4c:	f7ff feac 	bl	8002ca8 <LL_RTC_TIME_GetHour>
 8002f50:	4603      	mov	r3, r0
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	f003 030f 	and.w	r3, r3, #15
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	4423      	add	r3, r4
 8002f5c:	b2da      	uxtb	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	701a      	strb	r2, [r3, #0]
	*minutes = __LL_RTC_CONVERT_BCD2BIN (LL_RTC_TIME_GetMinute(RTC));
 8002f62:	481d      	ldr	r0, [pc, #116]	; (8002fd8 <MX_RTC_GetTime+0xb8>)
 8002f64:	f7ff feaf 	bl	8002cc6 <LL_RTC_TIME_GetMinute>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	111b      	asrs	r3, r3, #4
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	f003 030f 	and.w	r3, r3, #15
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	461a      	mov	r2, r3
 8002f78:	0092      	lsls	r2, r2, #2
 8002f7a:	4413      	add	r3, r2
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	b2dc      	uxtb	r4, r3
 8002f80:	4815      	ldr	r0, [pc, #84]	; (8002fd8 <MX_RTC_GetTime+0xb8>)
 8002f82:	f7ff fea0 	bl	8002cc6 <LL_RTC_TIME_GetMinute>
 8002f86:	4603      	mov	r3, r0
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	f003 030f 	and.w	r3, r3, #15
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	4423      	add	r3, r4
 8002f92:	b2da      	uxtb	r2, r3
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	701a      	strb	r2, [r3, #0]
	*seconds = __LL_RTC_CONVERT_BCD2BIN (LL_RTC_TIME_GetSecond(RTC));
 8002f98:	480f      	ldr	r0, [pc, #60]	; (8002fd8 <MX_RTC_GetTime+0xb8>)
 8002f9a:	f7ff fea3 	bl	8002ce4 <LL_RTC_TIME_GetSecond>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	111b      	asrs	r3, r3, #4
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	f003 030f 	and.w	r3, r3, #15
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	461a      	mov	r2, r3
 8002fae:	0092      	lsls	r2, r2, #2
 8002fb0:	4413      	add	r3, r2
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	b2dc      	uxtb	r4, r3
 8002fb6:	4808      	ldr	r0, [pc, #32]	; (8002fd8 <MX_RTC_GetTime+0xb8>)
 8002fb8:	f7ff fe94 	bl	8002ce4 <LL_RTC_TIME_GetSecond>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	f003 030f 	and.w	r3, r3, #15
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	4423      	add	r3, r4
 8002fc8:	b2da      	uxtb	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	701a      	strb	r2, [r3, #0]
	return;
 8002fce:	bf00      	nop
}
 8002fd0:	3714      	adds	r7, #20
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd90      	pop	{r4, r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	40002800 	.word	0x40002800

08002fdc <MX_RTC_SetTime>:
	return;
}

/*This function allows to set manually actual time*/
void MX_RTC_SetTime(uint8_t hour, uint8_t minutes, uint8_t seconds)
{
 8002fdc:	b5b0      	push	{r4, r5, r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af02      	add	r7, sp, #8
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	71fb      	strb	r3, [r7, #7]
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	71bb      	strb	r3, [r7, #6]
 8002fea:	4613      	mov	r3, r2
 8002fec:	717b      	strb	r3, [r7, #5]
	LL_RTC_DisableWriteProtection(RTC);
 8002fee:	482b      	ldr	r0, [pc, #172]	; (800309c <MX_RTC_SetTime+0xc0>)
 8002ff0:	f7ff fe4a 	bl	8002c88 <LL_RTC_DisableWriteProtection>
	MX_RTC_Enter_InitMode();
 8002ff4:	f7ff ff70 	bl	8002ed8 <MX_RTC_Enter_InitMode>
	LL_RTC_TIME_Config(RTC,LL_RTC_HOURFORMAT_24HOUR, __LL_RTC_CONVERT_BIN2BCD (hour), __LL_RTC_CONVERT_BIN2BCD (minutes), __LL_RTC_CONVERT_BIN2BCD (seconds));
 8002ff8:	79fb      	ldrb	r3, [r7, #7]
 8002ffa:	4a29      	ldr	r2, [pc, #164]	; (80030a0 <MX_RTC_SetTime+0xc4>)
 8002ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8003000:	08db      	lsrs	r3, r3, #3
 8003002:	b2db      	uxtb	r3, r3
 8003004:	011b      	lsls	r3, r3, #4
 8003006:	b2d8      	uxtb	r0, r3
 8003008:	79fa      	ldrb	r2, [r7, #7]
 800300a:	4b25      	ldr	r3, [pc, #148]	; (80030a0 <MX_RTC_SetTime+0xc4>)
 800300c:	fba3 1302 	umull	r1, r3, r3, r2
 8003010:	08d9      	lsrs	r1, r3, #3
 8003012:	460b      	mov	r3, r1
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	440b      	add	r3, r1
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	b2db      	uxtb	r3, r3
 800301e:	4303      	orrs	r3, r0
 8003020:	b2db      	uxtb	r3, r3
 8003022:	461c      	mov	r4, r3
 8003024:	79bb      	ldrb	r3, [r7, #6]
 8003026:	4a1e      	ldr	r2, [pc, #120]	; (80030a0 <MX_RTC_SetTime+0xc4>)
 8003028:	fba2 2303 	umull	r2, r3, r2, r3
 800302c:	08db      	lsrs	r3, r3, #3
 800302e:	b2db      	uxtb	r3, r3
 8003030:	011b      	lsls	r3, r3, #4
 8003032:	b2d8      	uxtb	r0, r3
 8003034:	79ba      	ldrb	r2, [r7, #6]
 8003036:	4b1a      	ldr	r3, [pc, #104]	; (80030a0 <MX_RTC_SetTime+0xc4>)
 8003038:	fba3 1302 	umull	r1, r3, r3, r2
 800303c:	08d9      	lsrs	r1, r3, #3
 800303e:	460b      	mov	r3, r1
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	440b      	add	r3, r1
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	b2db      	uxtb	r3, r3
 800304a:	4303      	orrs	r3, r0
 800304c:	b2db      	uxtb	r3, r3
 800304e:	461d      	mov	r5, r3
 8003050:	797b      	ldrb	r3, [r7, #5]
 8003052:	4a13      	ldr	r2, [pc, #76]	; (80030a0 <MX_RTC_SetTime+0xc4>)
 8003054:	fba2 2303 	umull	r2, r3, r2, r3
 8003058:	08db      	lsrs	r3, r3, #3
 800305a:	b2db      	uxtb	r3, r3
 800305c:	011b      	lsls	r3, r3, #4
 800305e:	b2d8      	uxtb	r0, r3
 8003060:	797a      	ldrb	r2, [r7, #5]
 8003062:	4b0f      	ldr	r3, [pc, #60]	; (80030a0 <MX_RTC_SetTime+0xc4>)
 8003064:	fba3 1302 	umull	r1, r3, r3, r2
 8003068:	08d9      	lsrs	r1, r3, #3
 800306a:	460b      	mov	r3, r1
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	440b      	add	r3, r1
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	b2db      	uxtb	r3, r3
 8003076:	4303      	orrs	r3, r0
 8003078:	b2db      	uxtb	r3, r3
 800307a:	9300      	str	r3, [sp, #0]
 800307c:	462b      	mov	r3, r5
 800307e:	4622      	mov	r2, r4
 8003080:	2100      	movs	r1, #0
 8003082:	4806      	ldr	r0, [pc, #24]	; (800309c <MX_RTC_SetTime+0xc0>)
 8003084:	f7ff fe3c 	bl	8002d00 <LL_RTC_TIME_Config>
	MX_RTC_Exit_InitMode();
 8003088:	f7ff ff36 	bl	8002ef8 <MX_RTC_Exit_InitMode>
	LL_RTC_EnableWriteProtection(RTC);
 800308c:	4803      	ldr	r0, [pc, #12]	; (800309c <MX_RTC_SetTime+0xc0>)
 800308e:	f7ff fdee 	bl	8002c6e <LL_RTC_EnableWriteProtection>
	return;
 8003092:	bf00      	nop
}
 8003094:	3708      	adds	r7, #8
 8003096:	46bd      	mov	sp, r7
 8003098:	bdb0      	pop	{r4, r5, r7, pc}
 800309a:	bf00      	nop
 800309c:	40002800 	.word	0x40002800
 80030a0:	cccccccd 	.word	0xcccccccd

080030a4 <LL_AHB1_GRP1_EnableClock>:
{
 80030a4:	b480      	push	{r7}
 80030a6:	b085      	sub	sp, #20
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80030ac:	4908      	ldr	r1, [pc, #32]	; (80030d0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80030ae:	4b08      	ldr	r3, [pc, #32]	; (80030d0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80030b0:	695a      	ldr	r2, [r3, #20]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80030b8:	4b05      	ldr	r3, [pc, #20]	; (80030d0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80030ba:	695a      	ldr	r2, [r3, #20]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4013      	ands	r3, r2
 80030c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80030c2:	68fb      	ldr	r3, [r7, #12]
}
 80030c4:	bf00      	nop
 80030c6:	3714      	adds	r7, #20
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr
 80030d0:	40021000 	.word	0x40021000

080030d4 <LL_APB2_GRP1_EnableClock>:
{
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80030dc:	4908      	ldr	r1, [pc, #32]	; (8003100 <LL_APB2_GRP1_EnableClock+0x2c>)
 80030de:	4b08      	ldr	r3, [pc, #32]	; (8003100 <LL_APB2_GRP1_EnableClock+0x2c>)
 80030e0:	699a      	ldr	r2, [r3, #24]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80030e8:	4b05      	ldr	r3, [pc, #20]	; (8003100 <LL_APB2_GRP1_EnableClock+0x2c>)
 80030ea:	699a      	ldr	r2, [r3, #24]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4013      	ands	r3, r2
 80030f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80030f2:	68fb      	ldr	r3, [r7, #12]
}
 80030f4:	bf00      	nop
 80030f6:	3714      	adds	r7, #20
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr
 8003100:	40021000 	.word	0x40021000

08003104 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	601a      	str	r2, [r3, #0]
}
 8003118:	bf00      	nop
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f023 0210 	bic.w	r2, r3, #16
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	431a      	orrs	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	605a      	str	r2, [r3, #4]
}
 800313e:	bf00      	nop
 8003140:	370c      	adds	r7, #12
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr

0800314a <LL_SPI_DisableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_DisableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 800314a:	b480      	push	{r7}
 800314c:	b083      	sub	sp, #12
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f023 0208 	bic.w	r2, r3, #8
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	605a      	str	r2, [r3, #4]
}
 800315e:	bf00      	nop
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr

0800316a <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 800316a:	b480      	push	{r7}
 800316c:	b083      	sub	sp, #12
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b02      	cmp	r3, #2
 800317c:	d101      	bne.n	8003182 <LL_SPI_IsActiveFlag_TXE+0x18>
 800317e:	2301      	movs	r3, #1
 8003180:	e000      	b.n	8003184 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <LL_SPI_IsActiveFlag_BSY>:
  * @rmtoll SR           BSY           LL_SPI_IsActiveFlag_BSY
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_BSY(SPI_TypeDef *SPIx)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031a0:	2b80      	cmp	r3, #128	; 0x80
 80031a2:	d101      	bne.n	80031a8 <LL_SPI_IsActiveFlag_BSY+0x18>
 80031a4:	2301      	movs	r3, #1
 80031a6:	e000      	b.n	80031aa <LL_SPI_IsActiveFlag_BSY+0x1a>
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr

080031b6 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 80031b6:	b480      	push	{r7}
 80031b8:	b085      	sub	sp, #20
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
 80031be:	460b      	mov	r3, r1
 80031c0:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	330c      	adds	r3, #12
 80031c6:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	78fa      	ldrb	r2, [r7, #3]
 80031cc:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 80031ce:	bf00      	nop
 80031d0:	3714      	adds	r7, #20
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr

080031da <LL_GPIO_SetOutputPin>:
{
 80031da:	b480      	push	{r7}
 80031dc:	b083      	sub	sp, #12
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
 80031e2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	683a      	ldr	r2, [r7, #0]
 80031e8:	619a      	str	r2, [r3, #24]
}
 80031ea:	bf00      	nop
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr

080031f6 <LL_GPIO_ResetOutputPin>:
{
 80031f6:	b480      	push	{r7}
 80031f8:	b083      	sub	sp, #12
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
 80031fe:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	683a      	ldr	r2, [r7, #0]
 8003204:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003206:	bf00      	nop
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
	...

08003214 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b090      	sub	sp, #64	; 0x40
 8003218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800321a:	f107 0318 	add.w	r3, r7, #24
 800321e:	2228      	movs	r2, #40	; 0x28
 8003220:	2100      	movs	r1, #0
 8003222:	4618      	mov	r0, r3
 8003224:	f001 fb62 	bl	80048ec <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003228:	463b      	mov	r3, r7
 800322a:	2200      	movs	r2, #0
 800322c:	601a      	str	r2, [r3, #0]
 800322e:	605a      	str	r2, [r3, #4]
 8003230:	609a      	str	r2, [r3, #8]
 8003232:	60da      	str	r2, [r3, #12]
 8003234:	611a      	str	r2, [r3, #16]
 8003236:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8003238:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800323c:	f7ff ff4a 	bl	80030d4 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8003240:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003244:	f7ff ff2e 	bl	80030a4 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8003248:	2320      	movs	r3, #32
 800324a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800324c:	2302      	movs	r3, #2
 800324e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8003250:	2303      	movs	r3, #3
 8003252:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003254:	2300      	movs	r3, #0
 8003256:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8003258:	2301      	movs	r3, #1
 800325a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800325c:	2305      	movs	r3, #5
 800325e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003260:	463b      	mov	r3, r7
 8003262:	4619      	mov	r1, r3
 8003264:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003268:	f000 fa8b 	bl	8003782 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 800326c:	2380      	movs	r3, #128	; 0x80
 800326e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003270:	2302      	movs	r3, #2
 8003272:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8003274:	2303      	movs	r3, #3
 8003276:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003278:	2300      	movs	r3, #0
 800327a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 800327c:	2302      	movs	r3, #2
 800327e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8003280:	2305      	movs	r3, #5
 8003282:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003284:	463b      	mov	r3, r7
 8003286:	4619      	mov	r1, r3
 8003288:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800328c:	f000 fa79 	bl	8003782 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8003290:	2300      	movs	r3, #0
 8003292:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8003294:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003298:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800329a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800329e:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80032a0:	2302      	movs	r3, #2
 80032a2:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80032a4:	2301      	movs	r3, #1
 80032a6:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80032a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV256;
 80032ae:	2338      	movs	r3, #56	; 0x38
 80032b0:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80032b2:	2300      	movs	r3, #0
 80032b4:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80032b6:	2300      	movs	r3, #0
 80032b8:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 80032ba:	2307      	movs	r3, #7
 80032bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 80032be:	f107 0318 	add.w	r3, r7, #24
 80032c2:	4619      	mov	r1, r3
 80032c4:	4808      	ldr	r0, [pc, #32]	; (80032e8 <MX_SPI1_Init+0xd4>)
 80032c6:	f000 ff13 	bl	80040f0 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 80032ca:	2100      	movs	r1, #0
 80032cc:	4806      	ldr	r0, [pc, #24]	; (80032e8 <MX_SPI1_Init+0xd4>)
 80032ce:	f7ff ff29 	bl	8003124 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI1);
 80032d2:	4805      	ldr	r0, [pc, #20]	; (80032e8 <MX_SPI1_Init+0xd4>)
 80032d4:	f7ff ff39 	bl	800314a <LL_SPI_DisableNSSPulseMgt>
  /* USER CODE BEGIN SPI1_Init 2 */
 LL_SPI_Enable(SPI1);
 80032d8:	4803      	ldr	r0, [pc, #12]	; (80032e8 <MX_SPI1_Init+0xd4>)
 80032da:	f7ff ff13 	bl	8003104 <LL_SPI_Enable>
  /* USER CODE END SPI1_Init 2 */

}
 80032de:	bf00      	nop
 80032e0:	3740      	adds	r7, #64	; 0x40
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	40013000 	.word	0x40013000

080032ec <MX_SPI1_Send>:

/* USER CODE BEGIN 1 */
void MX_SPI1_Send(uint8_t tx)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	4603      	mov	r3, r0
 80032f4:	71fb      	strb	r3, [r7, #7]
	/*This functions sends a command/data of 8 bits, if A0=0, we send a command
	, if A0=1, we send a data*/

	/*Check BSY flag, SPI is not busy */
	while (LL_SPI_IsActiveFlag_BSY(SPI1));
 80032f6:	bf00      	nop
 80032f8:	480a      	ldr	r0, [pc, #40]	; (8003324 <MX_SPI1_Send+0x38>)
 80032fa:	f7ff ff49 	bl	8003190 <LL_SPI_IsActiveFlag_BSY>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1f9      	bne.n	80032f8 <MX_SPI1_Send+0xc>

	/*Send data of 8 bits*/
	LL_SPI_TransmitData8(SPI1, tx);
 8003304:	79fb      	ldrb	r3, [r7, #7]
 8003306:	4619      	mov	r1, r3
 8003308:	4806      	ldr	r0, [pc, #24]	; (8003324 <MX_SPI1_Send+0x38>)
 800330a:	f7ff ff54 	bl	80031b6 <LL_SPI_TransmitData8>

	/*Wait until the Tx Buffer is empty*/
	while (!LL_SPI_IsActiveFlag_TXE(SPI1));
 800330e:	bf00      	nop
 8003310:	4804      	ldr	r0, [pc, #16]	; (8003324 <MX_SPI1_Send+0x38>)
 8003312:	f7ff ff2a 	bl	800316a <LL_SPI_IsActiveFlag_TXE>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d0f9      	beq.n	8003310 <MX_SPI1_Send+0x24>

	return;
 800331c:	bf00      	nop

}
 800331e:	3708      	adds	r7, #8
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	40013000 	.word	0x40013000

08003328 <MX_SPI1_CS_Enable>:
void MX_SPI1_CS_Enable(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0
	/*Pin PB6 is configured as CHIP SELECT signal of SPI1,
	CPOL=1, therefore, it is active in LOW
	PB6   ------> SPI1_CS_N*/

	LL_GPIO_ResetOutputPin(LCD_CS_N_GPIO_Port,LCD_CS_N_Pin );
 800332c:	2140      	movs	r1, #64	; 0x40
 800332e:	4802      	ldr	r0, [pc, #8]	; (8003338 <MX_SPI1_CS_Enable+0x10>)
 8003330:	f7ff ff61 	bl	80031f6 <LL_GPIO_ResetOutputPin>
}
 8003334:	bf00      	nop
 8003336:	bd80      	pop	{r7, pc}
 8003338:	48000400 	.word	0x48000400

0800333c <MX_SPI1_CS_Disable>:
void MX_SPI1_CS_Disable(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
	/*Pin PB6 is configured as CHIP SELECT signal of SPI1,
	CPOL=1, therefore, it is disable in HIGH
	PB6   ------> SPI1_CS_N*/

	LL_GPIO_SetOutputPin(LCD_CS_N_GPIO_Port,LCD_CS_N_Pin);
 8003340:	2140      	movs	r1, #64	; 0x40
 8003342:	4802      	ldr	r0, [pc, #8]	; (800334c <MX_SPI1_CS_Disable+0x10>)
 8003344:	f7ff ff49 	bl	80031da <LL_GPIO_SetOutputPin>
}
 8003348:	bf00      	nop
 800334a:	bd80      	pop	{r7, pc}
 800334c:	48000400 	.word	0x48000400

08003350 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003354:	e7fe      	b.n	8003354 <NMI_Handler+0x4>

08003356 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003356:	b480      	push	{r7}
 8003358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800335a:	e7fe      	b.n	800335a <HardFault_Handler+0x4>

0800335c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003360:	e7fe      	b.n	8003360 <MemManage_Handler+0x4>

08003362 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003362:	b480      	push	{r7}
 8003364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003366:	e7fe      	b.n	8003366 <BusFault_Handler+0x4>

08003368 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800336c:	e7fe      	b.n	800336c <UsageFault_Handler+0x4>

0800336e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800336e:	b480      	push	{r7}
 8003370:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003372:	bf00      	nop
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800337c:	b480      	push	{r7}
 800337e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003380:	bf00      	nop
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr

0800338a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800338a:	b480      	push	{r7}
 800338c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800338e:	bf00      	nop
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003398:	b480      	push	{r7}
 800339a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800339c:	bf00      	nop
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
	...

080033a8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80033ac:	4a06      	ldr	r2, [pc, #24]	; (80033c8 <SystemInit+0x20>)
 80033ae:	4b06      	ldr	r3, [pc, #24]	; (80033c8 <SystemInit+0x20>)
 80033b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80033bc:	bf00      	nop
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	e000ed00 	.word	0xe000ed00

080033cc <LL_ADC_REG_SetSequencerLength>:
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033da:	f023 020f 	bic.w	r2, r3, #15
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	431a      	orrs	r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80033e6:	bf00      	nop
 80033e8:	370c      	adds	r7, #12
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr

080033f2 <LL_ADC_IsEnabled>:
{
 80033f2:	b480      	push	{r7}
 80033f4:	b083      	sub	sp, #12
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b01      	cmp	r3, #1
 8003404:	bf0c      	ite	eq
 8003406:	2301      	moveq	r3, #1
 8003408:	2300      	movne	r3, #0
 800340a:	b2db      	uxtb	r3, r3
}
 800340c:	4618      	mov	r0, r3
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8003418:	b590      	push	{r4, r7, lr}
 800341a:	b085      	sub	sp, #20
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003422:	2300      	movs	r3, #0
 8003424:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 8003426:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800342a:	f7ff ffe2 	bl	80033f2 <LL_ADC_IsEnabled>
 800342e:	4604      	mov	r4, r0
 8003430:	4817      	ldr	r0, [pc, #92]	; (8003490 <LL_ADC_CommonInit+0x78>)
 8003432:	f7ff ffde 	bl	80033f2 <LL_ADC_IsEnabled>
 8003436:	4603      	mov	r3, r0
 8003438:	4323      	orrs	r3, r4
 800343a:	2b00      	cmp	r3, #0
 800343c:	d120      	bne.n	8003480 <LL_ADC_CommonInit+0x68>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d012      	beq.n	800346c <LL_ADC_CommonInit+0x54>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	689a      	ldr	r2, [r3, #8]
 800344a:	4b12      	ldr	r3, [pc, #72]	; (8003494 <LL_ADC_CommonInit+0x7c>)
 800344c:	4013      	ands	r3, r2
 800344e:	683a      	ldr	r2, [r7, #0]
 8003450:	6811      	ldr	r1, [r2, #0]
 8003452:	683a      	ldr	r2, [r7, #0]
 8003454:	6852      	ldr	r2, [r2, #4]
 8003456:	4311      	orrs	r1, r2
 8003458:	683a      	ldr	r2, [r7, #0]
 800345a:	6892      	ldr	r2, [r2, #8]
 800345c:	4311      	orrs	r1, r2
 800345e:	683a      	ldr	r2, [r7, #0]
 8003460:	68d2      	ldr	r2, [r2, #12]
 8003462:	430a      	orrs	r2, r1
 8003464:	431a      	orrs	r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	609a      	str	r2, [r3, #8]
 800346a:	e00b      	b.n	8003484 <LL_ADC_CommonInit+0x6c>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689a      	ldr	r2, [r3, #8]
 8003470:	4b08      	ldr	r3, [pc, #32]	; (8003494 <LL_ADC_CommonInit+0x7c>)
 8003472:	4013      	ands	r3, r2
 8003474:	683a      	ldr	r2, [r7, #0]
 8003476:	6812      	ldr	r2, [r2, #0]
 8003478:	431a      	orrs	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	609a      	str	r2, [r3, #8]
 800347e:	e001      	b.n	8003484 <LL_ADC_CommonInit+0x6c>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8003484:	7bfb      	ldrb	r3, [r7, #15]
}
 8003486:	4618      	mov	r0, r3
 8003488:	3714      	adds	r7, #20
 800348a:	46bd      	mov	sp, r7
 800348c:	bd90      	pop	{r4, r7, pc}
 800348e:	bf00      	nop
 8003490:	50000100 	.word	0x50000100
 8003494:	fffc30e0 	.word	0xfffc30e0

08003498 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80034a2:	2300      	movs	r3, #0
 80034a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f7ff ffa3 	bl	80033f2 <LL_ADC_IsEnabled>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d111      	bne.n	80034d6 <LL_ADC_Init+0x3e>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034ba:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80034be:	683a      	ldr	r2, [r7, #0]
 80034c0:	6811      	ldr	r1, [r2, #0]
 80034c2:	683a      	ldr	r2, [r7, #0]
 80034c4:	6852      	ldr	r2, [r2, #4]
 80034c6:	4311      	orrs	r1, r2
 80034c8:	683a      	ldr	r2, [r7, #0]
 80034ca:	6892      	ldr	r2, [r2, #8]
 80034cc:	430a      	orrs	r2, r1
 80034ce:	431a      	orrs	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	60da      	str	r2, [r3, #12]
 80034d4:	e001      	b.n	80034da <LL_ADC_Init+0x42>
    
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80034da:	7bfb      	ldrb	r3, [r7, #15]
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3710      	adds	r7, #16
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80034ee:	2300      	movs	r3, #0
 80034f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f7ff ff7d 	bl	80033f2 <LL_ADC_IsEnabled>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d132      	bne.n	8003564 <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 serie, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d015      	beq.n	8003532 <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	68da      	ldr	r2, [r3, #12]
 800350a:	4b1a      	ldr	r3, [pc, #104]	; (8003574 <LL_ADC_REG_Init+0x90>)
 800350c:	4013      	ands	r3, r2
 800350e:	683a      	ldr	r2, [r7, #0]
 8003510:	6811      	ldr	r1, [r2, #0]
 8003512:	683a      	ldr	r2, [r7, #0]
 8003514:	6892      	ldr	r2, [r2, #8]
 8003516:	4311      	orrs	r1, r2
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	68d2      	ldr	r2, [r2, #12]
 800351c:	4311      	orrs	r1, r2
 800351e:	683a      	ldr	r2, [r7, #0]
 8003520:	6912      	ldr	r2, [r2, #16]
 8003522:	4311      	orrs	r1, r2
 8003524:	683a      	ldr	r2, [r7, #0]
 8003526:	6952      	ldr	r2, [r2, #20]
 8003528:	430a      	orrs	r2, r1
 800352a:	431a      	orrs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	60da      	str	r2, [r3, #12]
 8003530:	e011      	b.n	8003556 <LL_ADC_REG_Init+0x72>
                 | ADC_REG_InitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	68da      	ldr	r2, [r3, #12]
 8003536:	4b0f      	ldr	r3, [pc, #60]	; (8003574 <LL_ADC_REG_Init+0x90>)
 8003538:	4013      	ands	r3, r2
 800353a:	683a      	ldr	r2, [r7, #0]
 800353c:	6811      	ldr	r1, [r2, #0]
 800353e:	683a      	ldr	r2, [r7, #0]
 8003540:	68d2      	ldr	r2, [r2, #12]
 8003542:	4311      	orrs	r1, r2
 8003544:	683a      	ldr	r2, [r7, #0]
 8003546:	6912      	ldr	r2, [r2, #16]
 8003548:	4311      	orrs	r1, r2
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	6952      	ldr	r2, [r2, #20]
 800354e:	430a      	orrs	r2, r1
 8003550:	431a      	orrs	r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	60da      	str	r2, [r3, #12]
                 | ADC_REG_InitStruct->Overrun
                );
    }
    
    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	4619      	mov	r1, r3
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f7ff ff35 	bl	80033cc <LL_ADC_REG_SetSequencerLength>
 8003562:	e001      	b.n	8003568 <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8003568:	7bfb      	ldrb	r3, [r7, #15]
}
 800356a:	4618      	mov	r0, r3
 800356c:	3710      	adds	r7, #16
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	fff0c03c 	.word	0xfff0c03c

08003578 <LL_GPIO_SetPinMode>:
{
 8003578:	b480      	push	{r7}
 800357a:	b089      	sub	sp, #36	; 0x24
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	fa93 f3a3 	rbit	r3, r3
 8003592:	613b      	str	r3, [r7, #16]
  return result;
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	fab3 f383 	clz	r3, r3
 800359a:	b2db      	uxtb	r3, r3
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	2103      	movs	r1, #3
 80035a0:	fa01 f303 	lsl.w	r3, r1, r3
 80035a4:	43db      	mvns	r3, r3
 80035a6:	401a      	ands	r2, r3
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	fa93 f3a3 	rbit	r3, r3
 80035b2:	61bb      	str	r3, [r7, #24]
  return result;
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	fab3 f383 	clz	r3, r3
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	005b      	lsls	r3, r3, #1
 80035be:	6879      	ldr	r1, [r7, #4]
 80035c0:	fa01 f303 	lsl.w	r3, r1, r3
 80035c4:	431a      	orrs	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	601a      	str	r2, [r3, #0]
}
 80035ca:	bf00      	nop
 80035cc:	3724      	adds	r7, #36	; 0x24
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr

080035d6 <LL_GPIO_SetPinOutputType>:
{
 80035d6:	b480      	push	{r7}
 80035d8:	b085      	sub	sp, #20
 80035da:	af00      	add	r7, sp, #0
 80035dc:	60f8      	str	r0, [r7, #12]
 80035de:	60b9      	str	r1, [r7, #8]
 80035e0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	685a      	ldr	r2, [r3, #4]
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	43db      	mvns	r3, r3
 80035ea:	401a      	ands	r2, r3
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	6879      	ldr	r1, [r7, #4]
 80035f0:	fb01 f303 	mul.w	r3, r1, r3
 80035f4:	431a      	orrs	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	605a      	str	r2, [r3, #4]
}
 80035fa:	bf00      	nop
 80035fc:	3714      	adds	r7, #20
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr

08003606 <LL_GPIO_SetPinSpeed>:
{
 8003606:	b480      	push	{r7}
 8003608:	b089      	sub	sp, #36	; 0x24
 800360a:	af00      	add	r7, sp, #0
 800360c:	60f8      	str	r0, [r7, #12]
 800360e:	60b9      	str	r1, [r7, #8]
 8003610:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	689a      	ldr	r2, [r3, #8]
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	fa93 f3a3 	rbit	r3, r3
 8003620:	613b      	str	r3, [r7, #16]
  return result;
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	fab3 f383 	clz	r3, r3
 8003628:	b2db      	uxtb	r3, r3
 800362a:	005b      	lsls	r3, r3, #1
 800362c:	2103      	movs	r1, #3
 800362e:	fa01 f303 	lsl.w	r3, r1, r3
 8003632:	43db      	mvns	r3, r3
 8003634:	401a      	ands	r2, r3
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	fa93 f3a3 	rbit	r3, r3
 8003640:	61bb      	str	r3, [r7, #24]
  return result;
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	fab3 f383 	clz	r3, r3
 8003648:	b2db      	uxtb	r3, r3
 800364a:	005b      	lsls	r3, r3, #1
 800364c:	6879      	ldr	r1, [r7, #4]
 800364e:	fa01 f303 	lsl.w	r3, r1, r3
 8003652:	431a      	orrs	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	609a      	str	r2, [r3, #8]
}
 8003658:	bf00      	nop
 800365a:	3724      	adds	r7, #36	; 0x24
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <LL_GPIO_SetPinPull>:
{
 8003664:	b480      	push	{r7}
 8003666:	b089      	sub	sp, #36	; 0x24
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	68da      	ldr	r2, [r3, #12]
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	fa93 f3a3 	rbit	r3, r3
 800367e:	613b      	str	r3, [r7, #16]
  return result;
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	fab3 f383 	clz	r3, r3
 8003686:	b2db      	uxtb	r3, r3
 8003688:	005b      	lsls	r3, r3, #1
 800368a:	2103      	movs	r1, #3
 800368c:	fa01 f303 	lsl.w	r3, r1, r3
 8003690:	43db      	mvns	r3, r3
 8003692:	401a      	ands	r2, r3
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	fa93 f3a3 	rbit	r3, r3
 800369e:	61bb      	str	r3, [r7, #24]
  return result;
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	fab3 f383 	clz	r3, r3
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	005b      	lsls	r3, r3, #1
 80036aa:	6879      	ldr	r1, [r7, #4]
 80036ac:	fa01 f303 	lsl.w	r3, r1, r3
 80036b0:	431a      	orrs	r2, r3
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	60da      	str	r2, [r3, #12]
}
 80036b6:	bf00      	nop
 80036b8:	3724      	adds	r7, #36	; 0x24
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr

080036c2 <LL_GPIO_SetAFPin_0_7>:
{
 80036c2:	b480      	push	{r7}
 80036c4:	b089      	sub	sp, #36	; 0x24
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	60f8      	str	r0, [r7, #12]
 80036ca:	60b9      	str	r1, [r7, #8]
 80036cc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6a1a      	ldr	r2, [r3, #32]
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	fa93 f3a3 	rbit	r3, r3
 80036dc:	613b      	str	r3, [r7, #16]
  return result;
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	fab3 f383 	clz	r3, r3
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	210f      	movs	r1, #15
 80036ea:	fa01 f303 	lsl.w	r3, r1, r3
 80036ee:	43db      	mvns	r3, r3
 80036f0:	401a      	ands	r2, r3
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	fa93 f3a3 	rbit	r3, r3
 80036fc:	61bb      	str	r3, [r7, #24]
  return result;
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	fab3 f383 	clz	r3, r3
 8003704:	b2db      	uxtb	r3, r3
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	6879      	ldr	r1, [r7, #4]
 800370a:	fa01 f303 	lsl.w	r3, r1, r3
 800370e:	431a      	orrs	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	621a      	str	r2, [r3, #32]
}
 8003714:	bf00      	nop
 8003716:	3724      	adds	r7, #36	; 0x24
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <LL_GPIO_SetAFPin_8_15>:
{
 8003720:	b480      	push	{r7}
 8003722:	b089      	sub	sp, #36	; 0x24
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	0a1b      	lsrs	r3, r3, #8
 8003734:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	fa93 f3a3 	rbit	r3, r3
 800373c:	613b      	str	r3, [r7, #16]
  return result;
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	fab3 f383 	clz	r3, r3
 8003744:	b2db      	uxtb	r3, r3
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	210f      	movs	r1, #15
 800374a:	fa01 f303 	lsl.w	r3, r1, r3
 800374e:	43db      	mvns	r3, r3
 8003750:	401a      	ands	r2, r3
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	0a1b      	lsrs	r3, r3, #8
 8003756:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	fa93 f3a3 	rbit	r3, r3
 800375e:	61bb      	str	r3, [r7, #24]
  return result;
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	fab3 f383 	clz	r3, r3
 8003766:	b2db      	uxtb	r3, r3
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	6879      	ldr	r1, [r7, #4]
 800376c:	fa01 f303 	lsl.w	r3, r1, r3
 8003770:	431a      	orrs	r2, r3
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003776:	bf00      	nop
 8003778:	3724      	adds	r7, #36	; 0x24
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr

08003782 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003782:	b580      	push	{r7, lr}
 8003784:	b088      	sub	sp, #32
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
 800378a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	fa93 f3a3 	rbit	r3, r3
 8003798:	613b      	str	r3, [r7, #16]
  return result;
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	fab3 f383 	clz	r3, r3
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80037a4:	e051      	b.n	800384a <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	2101      	movs	r1, #1
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	fa01 f303 	lsl.w	r3, r1, r3
 80037b2:	4013      	ands	r3, r2
 80037b4:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d043      	beq.n	8003844 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d003      	beq.n	80037cc <LL_GPIO_Init+0x4a>
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d10e      	bne.n	80037ea <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	461a      	mov	r2, r3
 80037d2:	69b9      	ldr	r1, [r7, #24]
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f7ff ff16 	bl	8003606 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	6819      	ldr	r1, [r3, #0]
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	461a      	mov	r2, r3
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f7ff fef6 	bl	80035d6 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	461a      	mov	r2, r3
 80037f0:	69b9      	ldr	r1, [r7, #24]
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f7ff ff36 	bl	8003664 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d11a      	bne.n	8003836 <LL_GPIO_Init+0xb4>
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	fa93 f3a3 	rbit	r3, r3
 800380a:	60bb      	str	r3, [r7, #8]
  return result;
 800380c:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800380e:	fab3 f383 	clz	r3, r3
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2b07      	cmp	r3, #7
 8003816:	d807      	bhi.n	8003828 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	695b      	ldr	r3, [r3, #20]
 800381c:	461a      	mov	r2, r3
 800381e:	69b9      	ldr	r1, [r7, #24]
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f7ff ff4e 	bl	80036c2 <LL_GPIO_SetAFPin_0_7>
 8003826:	e006      	b.n	8003836 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	695b      	ldr	r3, [r3, #20]
 800382c:	461a      	mov	r2, r3
 800382e:	69b9      	ldr	r1, [r7, #24]
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f7ff ff75 	bl	8003720 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	461a      	mov	r2, r3
 800383c:	69b9      	ldr	r1, [r7, #24]
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f7ff fe9a 	bl	8003578 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	3301      	adds	r3, #1
 8003848:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	fa22 f303 	lsr.w	r3, r2, r3
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1a6      	bne.n	80037a6 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3720      	adds	r7, #32
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <LL_I2C_Enable>:
{
 8003862:	b480      	push	{r7}
 8003864:	b083      	sub	sp, #12
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f043 0201 	orr.w	r2, r3, #1
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	601a      	str	r2, [r3, #0]
}
 8003876:	bf00      	nop
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr

08003882 <LL_I2C_Disable>:
{
 8003882:	b480      	push	{r7}
 8003884:	b083      	sub	sp, #12
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f023 0201 	bic.w	r2, r3, #1
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	601a      	str	r2, [r3, #0]
}
 8003896:	bf00      	nop
 8003898:	370c      	adds	r7, #12
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr

080038a2 <LL_I2C_ConfigFilters>:
{
 80038a2:	b480      	push	{r7}
 80038a4:	b085      	sub	sp, #20
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	60f8      	str	r0, [r7, #12]
 80038aa:	60b9      	str	r1, [r7, #8]
 80038ac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	0219      	lsls	r1, r3, #8
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	430b      	orrs	r3, r1
 80038be:	431a      	orrs	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	601a      	str	r2, [r3, #0]
}
 80038c4:	bf00      	nop
 80038c6:	3714      	adds	r7, #20
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <LL_I2C_SetOwnAddress1>:
{
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80038e4:	f023 0307 	bic.w	r3, r3, #7
 80038e8:	68b9      	ldr	r1, [r7, #8]
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	430a      	orrs	r2, r1
 80038ee:	431a      	orrs	r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	609a      	str	r2, [r3, #8]
}
 80038f4:	bf00      	nop
 80038f6:	3714      	adds	r7, #20
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <LL_I2C_EnableOwnAddress1>:
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	609a      	str	r2, [r3, #8]
}
 8003914:	bf00      	nop
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <LL_I2C_DisableOwnAddress1>:
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	609a      	str	r2, [r3, #8]
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <LL_I2C_SetTiming>:
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	683a      	ldr	r2, [r7, #0]
 800394e:	611a      	str	r2, [r3, #16]
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <LL_I2C_SetMode>:
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	431a      	orrs	r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	601a      	str	r2, [r3, #0]
}
 8003976:	bf00      	nop
 8003978:	370c      	adds	r7, #12
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr

08003982 <LL_I2C_AcknowledgeNextData>:
{
 8003982:	b480      	push	{r7}
 8003984:	b083      	sub	sp, #12
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
 800398a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	431a      	orrs	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	605a      	str	r2, [r3, #4]
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f7ff ff65 	bl	8003882 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	6899      	ldr	r1, [r3, #8]
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	461a      	mov	r2, r3
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f7ff ff6d 	bl	80038a2 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	4619      	mov	r1, r3
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f7ff ffb6 	bl	8003940 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f7ff ff44 	bl	8003862 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f7ff ffa0 	bl	8003920 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	6919      	ldr	r1, [r3, #16]
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	461a      	mov	r2, r3
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f7ff ff70 	bl	80038d0 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	691b      	ldr	r3, [r3, #16]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d002      	beq.n	80039fe <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f7ff ff81 	bl	8003900 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4619      	mov	r1, r3
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f7ff ffa9 	bl	800395c <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	4619      	mov	r1, r3
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f7ff ffb6 	bl	8003982 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3708      	adds	r7, #8
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <LL_RTC_SetHourFormat>:
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_FMT, HourFormat);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	431a      	orrs	r2, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	609a      	str	r2, [r3, #8]
}
 8003a3a:	bf00      	nop
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr

08003a46 <LL_RTC_GetHourFormat>:
{
 8003a46:	b480      	push	{r7}
 8003a48:	b083      	sub	sp, #12
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->CR, RTC_CR_FMT));
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	370c      	adds	r7, #12
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr

08003a62 <LL_RTC_EnableInitMode>:
{
 8003a62:	b480      	push	{r7}
 8003a64:	b083      	sub	sp, #12
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, RTC_INIT_MASK);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a70:	60da      	str	r2, [r3, #12]
}
 8003a72:	bf00      	nop
 8003a74:	370c      	adds	r7, #12
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr

08003a7e <LL_RTC_DisableInitMode>:
{
 8003a7e:	b480      	push	{r7}
 8003a80:	b083      	sub	sp, #12
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a8c:	60da      	str	r2, [r3, #12]
}
 8003a8e:	bf00      	nop
 8003a90:	370c      	adds	r7, #12
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr

08003a9a <LL_RTC_IsShadowRegBypassEnabled>:
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	b083      	sub	sp, #12
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->CR, RTC_CR_BYPSHAD) == (RTC_CR_BYPSHAD));
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f003 0320 	and.w	r3, r3, #32
 8003aaa:	2b20      	cmp	r3, #32
 8003aac:	bf0c      	ite	eq
 8003aae:	2301      	moveq	r3, #1
 8003ab0:	2300      	movne	r3, #0
 8003ab2:	b2db      	uxtb	r3, r3
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <LL_RTC_SetAsynchPrescaler>:
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_PRER_PREDIV_A_Pos);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	041b      	lsls	r3, r3, #16
 8003ad6:	431a      	orrs	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	611a      	str	r2, [r3, #16]
}
 8003adc:	bf00      	nop
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <LL_RTC_SetSynchPrescaler>:
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003afa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003afe:	683a      	ldr	r2, [r7, #0]
 8003b00:	431a      	orrs	r2, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	611a      	str	r2, [r3, #16]
}
 8003b06:	bf00      	nop
 8003b08:	370c      	adds	r7, #12
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr

08003b12 <LL_RTC_EnableWriteProtection>:
{
 8003b12:	b480      	push	{r7}
 8003b14:	b083      	sub	sp, #12
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	22ff      	movs	r2, #255	; 0xff
 8003b1e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003b20:	bf00      	nop
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <LL_RTC_DisableWriteProtection>:
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	22ca      	movs	r2, #202	; 0xca
 8003b38:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2253      	movs	r2, #83	; 0x53
 8003b3e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003b40:	bf00      	nop
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <LL_RTC_TIME_Config>:
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b087      	sub	sp, #28
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	607a      	str	r2, [r7, #4]
 8003b58:	603b      	str	r3, [r7, #0]
  uint32_t temp = 0U;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	617b      	str	r3, [r7, #20]
         (((Hours & 0xF0U) << (RTC_TR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_TR_HU_Pos))     | \
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	041b      	lsls	r3, r3, #16
 8003b62:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
  temp = Format12_24                                                                                    | \
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	431a      	orrs	r2, r3
         (((Minutes & 0xF0U) << (RTC_TR_MNT_Pos - 4U)) | ((Minutes & 0x0FU) << RTC_TR_MNU_Pos)) | \
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	021b      	lsls	r3, r3, #8
 8003b6e:	b29b      	uxth	r3, r3
         (((Hours & 0xF0U) << (RTC_TR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_TR_HU_Pos))     | \
 8003b70:	431a      	orrs	r2, r3
         (((Seconds & 0xF0U) << (RTC_TR_ST_Pos - 4U)) | ((Seconds & 0x0FU) << RTC_TR_SU_Pos));
 8003b72:	6a3b      	ldr	r3, [r7, #32]
 8003b74:	b2db      	uxtb	r3, r3
  temp = Format12_24                                                                                    | \
 8003b76:	4313      	orrs	r3, r2
 8003b78:	617b      	str	r3, [r7, #20]
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
 8003b82:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b86:	697a      	ldr	r2, [r7, #20]
 8003b88:	431a      	orrs	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	601a      	str	r2, [r3, #0]
}
 8003b8e:	bf00      	nop
 8003b90:	371c      	adds	r7, #28
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
	...

08003b9c <LL_RTC_DATE_Config>:
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b087      	sub	sp, #28
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]
 8003ba8:	603b      	str	r3, [r7, #0]
  uint32_t temp = 0U;
 8003baa:	2300      	movs	r3, #0
 8003bac:	617b      	str	r3, [r7, #20]
  temp = (WeekDay << RTC_DR_WDU_Pos)                                                        | \
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	035a      	lsls	r2, r3, #13
         (((Year & 0xF0U) << (RTC_DR_YT_Pos - 4U)) | ((Year & 0x0FU) << RTC_DR_YU_Pos))   | \
 8003bb2:	6a3b      	ldr	r3, [r7, #32]
 8003bb4:	041b      	lsls	r3, r3, #16
 8003bb6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  temp = (WeekDay << RTC_DR_WDU_Pos)                                                        | \
 8003bba:	431a      	orrs	r2, r3
         (((Month & 0xF0U) << (RTC_DR_MT_Pos - 4U)) | ((Month & 0x0FU) << RTC_DR_MU_Pos)) | \
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	021b      	lsls	r3, r3, #8
 8003bc0:	b29b      	uxth	r3, r3
         (((Year & 0xF0U) << (RTC_DR_YT_Pos - 4U)) | ((Year & 0x0FU) << RTC_DR_YU_Pos))   | \
 8003bc2:	431a      	orrs	r2, r3
         (((Day & 0xF0U) << (RTC_DR_DT_Pos - 4U)) | ((Day & 0x0FU) << RTC_DR_DU_Pos));
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	b2db      	uxtb	r3, r3
  temp = (WeekDay << RTC_DR_WDU_Pos)                                                        | \
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	685a      	ldr	r2, [r3, #4]
 8003bd0:	4b05      	ldr	r3, [pc, #20]	; (8003be8 <LL_RTC_DATE_Config+0x4c>)
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	697a      	ldr	r2, [r7, #20]
 8003bd6:	431a      	orrs	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	605a      	str	r2, [r3, #4]
}
 8003bdc:	bf00      	nop
 8003bde:	371c      	adds	r7, #28
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr
 8003be8:	ff0000c0 	.word	0xff0000c0

08003bec <LL_RTC_IsActiveFlag_INIT>:
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF));
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bfc:	2b40      	cmp	r3, #64	; 0x40
 8003bfe:	bf0c      	ite	eq
 8003c00:	2301      	moveq	r3, #1
 8003c02:	2300      	movne	r3, #0
 8003c04:	b2db      	uxtb	r3, r3
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	370c      	adds	r7, #12
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr

08003c12 <LL_RTC_IsActiveFlag_RS>:
{
 8003c12:	b480      	push	{r7}
 8003c14:	b083      	sub	sp, #12
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ISR, RTC_ISR_RSF) == (RTC_ISR_RSF));
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	f003 0320 	and.w	r3, r3, #32
 8003c22:	2b20      	cmp	r3, #32
 8003c24:	bf0c      	ite	eq
 8003c26:	2301      	moveq	r3, #1
 8003c28:	2300      	movne	r3, #0
 8003c2a:	b2db      	uxtb	r3, r3
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <LL_RTC_ClearFlag_RS>:
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, (~((RTC_ISR_RSF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTCx->ISR & RTC_ISR_INIT)));
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c48:	f063 02a0 	orn	r2, r3, #160	; 0xa0
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	60da      	str	r2, [r3, #12]
}
 8003c50:	bf00      	nop
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <LL_SYSTICK_IsActiveCounterFlag>:
  * @note   It can be used in timeout function on application side.
  * @rmtoll STK_CTRL     COUNTFLAG     LL_SYSTICK_IsActiveCounterFlag
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 8003c60:	4b07      	ldr	r3, [pc, #28]	; (8003c80 <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c6c:	bf0c      	ite	eq
 8003c6e:	2301      	moveq	r3, #1
 8003c70:	2300      	movne	r3, #0
 8003c72:	b2db      	uxtb	r3, r3
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	e000e010 	.word	0xe000e010

08003c84 <LL_RTC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized
  */
ErrorStatus LL_RTC_Init(RTC_TypeDef *RTCx, LL_RTC_InitTypeDef *RTC_InitStruct)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_RTC_HOURFORMAT(RTC_InitStruct->HourFormat));
  assert_param(IS_LL_RTC_ASYNCH_PREDIV(RTC_InitStruct->AsynchPrescaler));
  assert_param(IS_LL_RTC_SYNCH_PREDIV(RTC_InitStruct->SynchPrescaler));

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f7ff ff4a 	bl	8003b2c <LL_RTC_DisableWriteProtection>

  /* Set Initialization mode */
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 f96d 	bl	8003f78 <LL_RTC_EnterInitMode>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d016      	beq.n	8003cd2 <LL_RTC_Init+0x4e>
  {
    /* Set Hour Format */
    LL_RTC_SetHourFormat(RTCx, RTC_InitStruct->HourFormat);
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4619      	mov	r1, r3
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f7ff feb8 	bl	8003a20 <LL_RTC_SetHourFormat>

    /* Configure Synchronous and Asynchronous prescaler factor */
    LL_RTC_SetSynchPrescaler(RTCx, RTC_InitStruct->SynchPrescaler);
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f7ff ff16 	bl	8003ae8 <LL_RTC_SetSynchPrescaler>
    LL_RTC_SetAsynchPrescaler(RTCx, RTC_InitStruct->AsynchPrescaler);
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f7ff fefc 	bl	8003ac0 <LL_RTC_SetAsynchPrescaler>

    /* Exit Initialization mode */
    LL_RTC_DisableInitMode(RTCx);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f7ff fed8 	bl	8003a7e <LL_RTC_DisableInitMode>

    status = SUCCESS;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	73fb      	strb	r3, [r7, #15]
  }
  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f7ff ff1d 	bl	8003b12 <LL_RTC_EnableWriteProtection>

  return status;
 8003cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
	...

08003ce4 <LL_RTC_TIME_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Time register is configured
  *          - ERROR: RTC Time register is not configured
  */
ErrorStatus LL_RTC_TIME_Init(RTC_TypeDef *RTCx, uint32_t RTC_Format, LL_RTC_TimeTypeDef *RTC_TimeStruct)
{
 8003ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ce6:	b089      	sub	sp, #36	; 0x24
 8003ce8:	af02      	add	r7, sp, #8
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	607a      	str	r2, [r7, #4]
  ErrorStatus status = ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));
  assert_param(IS_LL_RTC_FORMAT(RTC_Format));

  if (RTC_Format == LL_RTC_FORMAT_BIN)
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d109      	bne.n	8003d0e <LL_RTC_TIME_Init+0x2a>
  {
    if (LL_RTC_GetHourFormat(RTCx) != LL_RTC_HOURFORMAT_24HOUR)
 8003cfa:	68f8      	ldr	r0, [r7, #12]
 8003cfc:	f7ff fea3 	bl	8003a46 <LL_RTC_GetHourFormat>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d10c      	bne.n	8003d20 <LL_RTC_TIME_Init+0x3c>
      assert_param(IS_LL_RTC_HOUR12(RTC_TimeStruct->Hours));
      assert_param(IS_LL_RTC_TIME_FORMAT(RTC_TimeStruct->TimeFormat));
    }
    else
    {
      RTC_TimeStruct->TimeFormat = 0x00U;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	601a      	str	r2, [r3, #0]
 8003d0c:	e008      	b.n	8003d20 <LL_RTC_TIME_Init+0x3c>
    assert_param(IS_LL_RTC_MINUTES(RTC_TimeStruct->Minutes));
    assert_param(IS_LL_RTC_SECONDS(RTC_TimeStruct->Seconds));
  }
  else
  {
    if (LL_RTC_GetHourFormat(RTCx) != LL_RTC_HOURFORMAT_24HOUR)
 8003d0e:	68f8      	ldr	r0, [r7, #12]
 8003d10:	f7ff fe99 	bl	8003a46 <LL_RTC_GetHourFormat>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d102      	bne.n	8003d20 <LL_RTC_TIME_Init+0x3c>
      assert_param(IS_LL_RTC_HOUR12(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Hours)));
      assert_param(IS_LL_RTC_TIME_FORMAT(RTC_TimeStruct->TimeFormat));
    }
    else
    {
      RTC_TimeStruct->TimeFormat = 0x00U;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	601a      	str	r2, [r3, #0]
    assert_param(IS_LL_RTC_MINUTES(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Minutes)));
    assert_param(IS_LL_RTC_SECONDS(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Seconds)));
  }

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f7ff ff03 	bl	8003b2c <LL_RTC_DisableWriteProtection>

  /* Set Initialization mode */
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8003d26:	68f8      	ldr	r0, [r7, #12]
 8003d28:	f000 f926 	bl	8003f78 <LL_RTC_EnterInitMode>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d073      	beq.n	8003e1a <LL_RTC_TIME_Init+0x136>
  {
    /* Check the input parameters format */
    if (RTC_Format != LL_RTC_FORMAT_BIN)
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d00f      	beq.n	8003d58 <LL_RTC_TIME_Init+0x74>
    {
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, RTC_TimeStruct->Hours,
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6819      	ldr	r1, [r3, #0]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	791b      	ldrb	r3, [r3, #4]
 8003d40:	461a      	mov	r2, r3
                         RTC_TimeStruct->Minutes, RTC_TimeStruct->Seconds);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	795b      	ldrb	r3, [r3, #5]
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, RTC_TimeStruct->Hours,
 8003d46:	4618      	mov	r0, r3
                         RTC_TimeStruct->Minutes, RTC_TimeStruct->Seconds);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	799b      	ldrb	r3, [r3, #6]
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, RTC_TimeStruct->Hours,
 8003d4c:	9300      	str	r3, [sp, #0]
 8003d4e:	4603      	mov	r3, r0
 8003d50:	68f8      	ldr	r0, [r7, #12]
 8003d52:	f7ff fefb 	bl	8003b4c <LL_RTC_TIME_Config>
 8003d56:	e04f      	b.n	8003df8 <LL_RTC_TIME_Init+0x114>
    }
    else
    {
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681c      	ldr	r4, [r3, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	791b      	ldrb	r3, [r3, #4]
 8003d60:	4a32      	ldr	r2, [pc, #200]	; (8003e2c <LL_RTC_TIME_Init+0x148>)
 8003d62:	fba2 2303 	umull	r2, r3, r2, r3
 8003d66:	08db      	lsrs	r3, r3, #3
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	011b      	lsls	r3, r3, #4
 8003d6c:	b2d8      	uxtb	r0, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	791a      	ldrb	r2, [r3, #4]
 8003d72:	4b2e      	ldr	r3, [pc, #184]	; (8003e2c <LL_RTC_TIME_Init+0x148>)
 8003d74:	fba3 1302 	umull	r1, r3, r3, r2
 8003d78:	08d9      	lsrs	r1, r3, #3
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	440b      	add	r3, r1
 8003d80:	005b      	lsls	r3, r3, #1
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	4303      	orrs	r3, r0
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	461d      	mov	r5, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Minutes),
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	795b      	ldrb	r3, [r3, #5]
 8003d90:	4a26      	ldr	r2, [pc, #152]	; (8003e2c <LL_RTC_TIME_Init+0x148>)
 8003d92:	fba2 2303 	umull	r2, r3, r2, r3
 8003d96:	08db      	lsrs	r3, r3, #3
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	011b      	lsls	r3, r3, #4
 8003d9c:	b2d8      	uxtb	r0, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	795a      	ldrb	r2, [r3, #5]
 8003da2:	4b22      	ldr	r3, [pc, #136]	; (8003e2c <LL_RTC_TIME_Init+0x148>)
 8003da4:	fba3 1302 	umull	r1, r3, r3, r2
 8003da8:	08d9      	lsrs	r1, r3, #3
 8003daa:	460b      	mov	r3, r1
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	440b      	add	r3, r1
 8003db0:	005b      	lsls	r3, r3, #1
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	4303      	orrs	r3, r0
 8003db8:	b2db      	uxtb	r3, r3
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 8003dba:	461e      	mov	r6, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Seconds));
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	799b      	ldrb	r3, [r3, #6]
 8003dc0:	4a1a      	ldr	r2, [pc, #104]	; (8003e2c <LL_RTC_TIME_Init+0x148>)
 8003dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc6:	08db      	lsrs	r3, r3, #3
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	011b      	lsls	r3, r3, #4
 8003dcc:	b2d8      	uxtb	r0, r3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	799a      	ldrb	r2, [r3, #6]
 8003dd2:	4b16      	ldr	r3, [pc, #88]	; (8003e2c <LL_RTC_TIME_Init+0x148>)
 8003dd4:	fba3 1302 	umull	r1, r3, r3, r2
 8003dd8:	08d9      	lsrs	r1, r3, #3
 8003dda:	460b      	mov	r3, r1
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	440b      	add	r3, r1
 8003de0:	005b      	lsls	r3, r3, #1
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	4303      	orrs	r3, r0
 8003de8:	b2db      	uxtb	r3, r3
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 8003dea:	9300      	str	r3, [sp, #0]
 8003dec:	4633      	mov	r3, r6
 8003dee:	462a      	mov	r2, r5
 8003df0:	4621      	mov	r1, r4
 8003df2:	68f8      	ldr	r0, [r7, #12]
 8003df4:	f7ff feaa 	bl	8003b4c <LL_RTC_TIME_Config>
    }

    /* Exit Initialization mode */
    LL_RTC_DisableInitMode(RTCx);
 8003df8:	68f8      	ldr	r0, [r7, #12]
 8003dfa:	f7ff fe40 	bl	8003a7e <LL_RTC_DisableInitMode>

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if (LL_RTC_IsShadowRegBypassEnabled(RTCx) == 0U)
 8003dfe:	68f8      	ldr	r0, [r7, #12]
 8003e00:	f7ff fe4b 	bl	8003a9a <LL_RTC_IsShadowRegBypassEnabled>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d105      	bne.n	8003e16 <LL_RTC_TIME_Init+0x132>
    {
      status = LL_RTC_WaitForSynchro(RTCx);
 8003e0a:	68f8      	ldr	r0, [r7, #12]
 8003e0c:	f000 f8e9 	bl	8003fe2 <LL_RTC_WaitForSynchro>
 8003e10:	4603      	mov	r3, r0
 8003e12:	75fb      	strb	r3, [r7, #23]
 8003e14:	e001      	b.n	8003e1a <LL_RTC_TIME_Init+0x136>
    }
    else
    {
      status = SUCCESS;
 8003e16:	2300      	movs	r3, #0
 8003e18:	75fb      	strb	r3, [r7, #23]
    }
  }
  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f7ff fe79 	bl	8003b12 <LL_RTC_EnableWriteProtection>

  return status;
 8003e20:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	371c      	adds	r7, #28
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	cccccccd 	.word	0xcccccccd

08003e30 <LL_RTC_DATE_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Day register is configured
  *          - ERROR: RTC Day register is not configured
  */
ErrorStatus LL_RTC_DATE_Init(RTC_TypeDef *RTCx, uint32_t RTC_Format, LL_RTC_DateTypeDef *RTC_DateStruct)
{
 8003e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e32:	b089      	sub	sp, #36	; 0x24
 8003e34:	af02      	add	r7, sp, #8
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
  ErrorStatus status = ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));
  assert_param(IS_LL_RTC_FORMAT(RTC_Format));

  if ((RTC_Format == LL_RTC_FORMAT_BIN) && ((RTC_DateStruct->Month & 0x10U) == 0x10U))
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d10e      	bne.n	8003e64 <LL_RTC_DATE_Init+0x34>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	785b      	ldrb	r3, [r3, #1]
 8003e4a:	f003 0310 	and.w	r3, r3, #16
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d008      	beq.n	8003e64 <LL_RTC_DATE_Init+0x34>
  {
    RTC_DateStruct->Month = (RTC_DateStruct->Month & (uint32_t)~(0x10U)) + 0x0AU;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	785b      	ldrb	r3, [r3, #1]
 8003e56:	f023 0310 	bic.w	r3, r3, #16
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	330a      	adds	r3, #10
 8003e5e:	b2da      	uxtb	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	705a      	strb	r2, [r3, #1]
    assert_param(IS_LL_RTC_DAY(__LL_RTC_CONVERT_BCD2BIN(RTC_DateStruct->Day)));
  }
  assert_param(IS_LL_RTC_WEEKDAY(RTC_DateStruct->WeekDay));

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f7ff fe61 	bl	8003b2c <LL_RTC_DisableWriteProtection>

  /* Set Initialization mode */
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8003e6a:	68f8      	ldr	r0, [r7, #12]
 8003e6c:	f000 f884 	bl	8003f78 <LL_RTC_EnterInitMode>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d075      	beq.n	8003f62 <LL_RTC_DATE_Init+0x132>
  {
    /* Check the input parameters format */
    if (RTC_Format != LL_RTC_FORMAT_BIN)
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d010      	beq.n	8003e9e <LL_RTC_DATE_Init+0x6e>
    {
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, RTC_DateStruct->Day, RTC_DateStruct->Month, RTC_DateStruct->Year);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	4619      	mov	r1, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	789b      	ldrb	r3, [r3, #2]
 8003e86:	461a      	mov	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	785b      	ldrb	r3, [r3, #1]
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	78db      	ldrb	r3, [r3, #3]
 8003e92:	9300      	str	r3, [sp, #0]
 8003e94:	4603      	mov	r3, r0
 8003e96:	68f8      	ldr	r0, [r7, #12]
 8003e98:	f7ff fe80 	bl	8003b9c <LL_RTC_DATE_Config>
 8003e9c:	e050      	b.n	8003f40 <LL_RTC_DATE_Init+0x110>
    }
    else
    {
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	461c      	mov	r4, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	789b      	ldrb	r3, [r3, #2]
 8003ea8:	4a32      	ldr	r2, [pc, #200]	; (8003f74 <LL_RTC_DATE_Init+0x144>)
 8003eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8003eae:	08db      	lsrs	r3, r3, #3
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	011b      	lsls	r3, r3, #4
 8003eb4:	b2d8      	uxtb	r0, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	789a      	ldrb	r2, [r3, #2]
 8003eba:	4b2e      	ldr	r3, [pc, #184]	; (8003f74 <LL_RTC_DATE_Init+0x144>)
 8003ebc:	fba3 1302 	umull	r1, r3, r3, r2
 8003ec0:	08d9      	lsrs	r1, r3, #3
 8003ec2:	460b      	mov	r3, r1
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	440b      	add	r3, r1
 8003ec8:	005b      	lsls	r3, r3, #1
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	4303      	orrs	r3, r0
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	461d      	mov	r5, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Month), __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Year));
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	785b      	ldrb	r3, [r3, #1]
 8003ed8:	4a26      	ldr	r2, [pc, #152]	; (8003f74 <LL_RTC_DATE_Init+0x144>)
 8003eda:	fba2 2303 	umull	r2, r3, r2, r3
 8003ede:	08db      	lsrs	r3, r3, #3
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	011b      	lsls	r3, r3, #4
 8003ee4:	b2d8      	uxtb	r0, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	785a      	ldrb	r2, [r3, #1]
 8003eea:	4b22      	ldr	r3, [pc, #136]	; (8003f74 <LL_RTC_DATE_Init+0x144>)
 8003eec:	fba3 1302 	umull	r1, r3, r3, r2
 8003ef0:	08d9      	lsrs	r1, r3, #3
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	440b      	add	r3, r1
 8003ef8:	005b      	lsls	r3, r3, #1
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	4303      	orrs	r3, r0
 8003f00:	b2db      	uxtb	r3, r3
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 8003f02:	461e      	mov	r6, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Month), __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Year));
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	78db      	ldrb	r3, [r3, #3]
 8003f08:	4a1a      	ldr	r2, [pc, #104]	; (8003f74 <LL_RTC_DATE_Init+0x144>)
 8003f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f0e:	08db      	lsrs	r3, r3, #3
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	011b      	lsls	r3, r3, #4
 8003f14:	b2d8      	uxtb	r0, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	78da      	ldrb	r2, [r3, #3]
 8003f1a:	4b16      	ldr	r3, [pc, #88]	; (8003f74 <LL_RTC_DATE_Init+0x144>)
 8003f1c:	fba3 1302 	umull	r1, r3, r3, r2
 8003f20:	08d9      	lsrs	r1, r3, #3
 8003f22:	460b      	mov	r3, r1
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	440b      	add	r3, r1
 8003f28:	005b      	lsls	r3, r3, #1
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	4303      	orrs	r3, r0
 8003f30:	b2db      	uxtb	r3, r3
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 8003f32:	9300      	str	r3, [sp, #0]
 8003f34:	4633      	mov	r3, r6
 8003f36:	462a      	mov	r2, r5
 8003f38:	4621      	mov	r1, r4
 8003f3a:	68f8      	ldr	r0, [r7, #12]
 8003f3c:	f7ff fe2e 	bl	8003b9c <LL_RTC_DATE_Config>
    }

    /* Exit Initialization mode */
    LL_RTC_DisableInitMode(RTCx);
 8003f40:	68f8      	ldr	r0, [r7, #12]
 8003f42:	f7ff fd9c 	bl	8003a7e <LL_RTC_DisableInitMode>

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if (LL_RTC_IsShadowRegBypassEnabled(RTCx) == 0U)
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f7ff fda7 	bl	8003a9a <LL_RTC_IsShadowRegBypassEnabled>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d105      	bne.n	8003f5e <LL_RTC_DATE_Init+0x12e>
    {
      status = LL_RTC_WaitForSynchro(RTCx);
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	f000 f845 	bl	8003fe2 <LL_RTC_WaitForSynchro>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	75fb      	strb	r3, [r7, #23]
 8003f5c:	e001      	b.n	8003f62 <LL_RTC_DATE_Init+0x132>
    }
    else
    {
      status = SUCCESS;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	75fb      	strb	r3, [r7, #23]
    }
  }
  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);
 8003f62:	68f8      	ldr	r0, [r7, #12]
 8003f64:	f7ff fdd5 	bl	8003b12 <LL_RTC_EnableWriteProtection>

  return status;
 8003f68:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	371c      	adds	r7, #28
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f72:	bf00      	nop
 8003f74:	cccccccd 	.word	0xcccccccd

08003f78 <LL_RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode
  */
ErrorStatus LL_RTC_EnterInitMode(RTC_TypeDef *RTCx)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b086      	sub	sp, #24
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t timeout = RTC_INITMODE_TIMEOUT;
 8003f80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f84:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = SUCCESS;
 8003f86:	2300      	movs	r3, #0
 8003f88:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp = 0U;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	613b      	str	r3, [r7, #16]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Check if the Initialization mode is set */
  if (LL_RTC_IsActiveFlag_INIT(RTCx) == 0U)
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f7ff fe2c 	bl	8003bec <LL_RTC_IsActiveFlag_INIT>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d11e      	bne.n	8003fd8 <LL_RTC_EnterInitMode+0x60>
  {
    /* Set the Initialization mode */
    LL_RTC_EnableInitMode(RTCx);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f7ff fd61 	bl	8003a62 <LL_RTC_EnableInitMode>

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f7ff fe23 	bl	8003bec <LL_RTC_IsActiveFlag_INIT>
 8003fa6:	6138      	str	r0, [r7, #16]
    while ((timeout != 0U) && (tmp != 1U))
 8003fa8:	e010      	b.n	8003fcc <LL_RTC_EnterInitMode+0x54>
    {
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8003faa:	f7ff fe57 	bl	8003c5c <LL_SYSTICK_IsActiveCounterFlag>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d102      	bne.n	8003fba <LL_RTC_EnterInitMode+0x42>
      {
        timeout --;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	60fb      	str	r3, [r7, #12]
      }
      tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f7ff fe16 	bl	8003bec <LL_RTC_IsActiveFlag_INIT>
 8003fc0:	6138      	str	r0, [r7, #16]
      if (timeout == 0U)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d101      	bne.n	8003fcc <LL_RTC_EnterInitMode+0x54>
      {
        status = ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	75fb      	strb	r3, [r7, #23]
    while ((timeout != 0U) && (tmp != 1U))
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d002      	beq.n	8003fd8 <LL_RTC_EnterInitMode+0x60>
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d1e8      	bne.n	8003faa <LL_RTC_EnterInitMode+0x32>
      }
    }
  }
  return status;
 8003fd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3718      	adds	r7, #24
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <LL_RTC_WaitForSynchro>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus LL_RTC_WaitForSynchro(RTC_TypeDef *RTCx)
{
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b086      	sub	sp, #24
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
  __IO uint32_t timeout = RTC_SYNCHRO_TIMEOUT;
 8003fea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003fee:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = SUCCESS;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp = 0U;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	613b      	str	r3, [r7, #16]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Clear RSF flag */
  LL_RTC_ClearFlag_RS(RTCx);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f7ff fe1d 	bl	8003c38 <LL_RTC_ClearFlag_RS>

  /* Wait the registers to be synchronised */
  tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f7ff fe07 	bl	8003c12 <LL_RTC_IsActiveFlag_RS>
 8004004:	6138      	str	r0, [r7, #16]
  while ((timeout != 0U) && (tmp != 0U))
 8004006:	e010      	b.n	800402a <LL_RTC_WaitForSynchro+0x48>
  {
    if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8004008:	f7ff fe28 	bl	8003c5c <LL_SYSTICK_IsActiveCounterFlag>
 800400c:	4603      	mov	r3, r0
 800400e:	2b01      	cmp	r3, #1
 8004010:	d102      	bne.n	8004018 <LL_RTC_WaitForSynchro+0x36>
    {
      timeout--;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	3b01      	subs	r3, #1
 8004016:	60fb      	str	r3, [r7, #12]
    }
    tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f7ff fdfa 	bl	8003c12 <LL_RTC_IsActiveFlag_RS>
 800401e:	6138      	str	r0, [r7, #16]
    if (timeout == 0U)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d101      	bne.n	800402a <LL_RTC_WaitForSynchro+0x48>
    {
      status = ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	75fb      	strb	r3, [r7, #23]
  while ((timeout != 0U) && (tmp != 0U))
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d002      	beq.n	8004036 <LL_RTC_WaitForSynchro+0x54>
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1e8      	bne.n	8004008 <LL_RTC_WaitForSynchro+0x26>
    }
  }

  if (status != ERROR)
 8004036:	7dfb      	ldrb	r3, [r7, #23]
 8004038:	2b01      	cmp	r3, #1
 800403a:	d01e      	beq.n	800407a <LL_RTC_WaitForSynchro+0x98>
  {
    timeout = RTC_SYNCHRO_TIMEOUT;
 800403c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004040:	60fb      	str	r3, [r7, #12]
    tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f7ff fde5 	bl	8003c12 <LL_RTC_IsActiveFlag_RS>
 8004048:	6138      	str	r0, [r7, #16]
    while ((timeout != 0U) && (tmp != 1U))
 800404a:	e010      	b.n	800406e <LL_RTC_WaitForSynchro+0x8c>
    {
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 800404c:	f7ff fe06 	bl	8003c5c <LL_SYSTICK_IsActiveCounterFlag>
 8004050:	4603      	mov	r3, r0
 8004052:	2b01      	cmp	r3, #1
 8004054:	d102      	bne.n	800405c <LL_RTC_WaitForSynchro+0x7a>
      {
        timeout--;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	3b01      	subs	r3, #1
 800405a:	60fb      	str	r3, [r7, #12]
      }
      tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f7ff fdd8 	bl	8003c12 <LL_RTC_IsActiveFlag_RS>
 8004062:	6138      	str	r0, [r7, #16]
      if (timeout == 0U)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d101      	bne.n	800406e <LL_RTC_WaitForSynchro+0x8c>
      {
        status = ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	75fb      	strb	r3, [r7, #23]
    while ((timeout != 0U) && (tmp != 1U))
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d002      	beq.n	800407a <LL_RTC_WaitForSynchro+0x98>
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d1e8      	bne.n	800404c <LL_RTC_WaitForSynchro+0x6a>
      }
    }
  }

  return (status);
 800407a:	7dfb      	ldrb	r3, [r7, #23]
}
 800407c:	4618      	mov	r0, r3
 800407e:	3718      	adds	r7, #24
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <LL_SPI_IsEnabled>:
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004094:	2b40      	cmp	r3, #64	; 0x40
 8004096:	d101      	bne.n	800409c <LL_SPI_IsEnabled+0x18>
 8004098:	2301      	movs	r3, #1
 800409a:	e000      	b.n	800409e <LL_SPI_IsEnabled+0x1a>
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	370c      	adds	r7, #12
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr

080040aa <LL_SPI_SetRxFIFOThreshold>:
{
 80040aa:	b480      	push	{r7}
 80040ac:	b083      	sub	sp, #12
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
 80040b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	431a      	orrs	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	605a      	str	r2, [r3, #4]
}
 80040c4:	bf00      	nop
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <LL_SPI_SetCRCPolynomial>:
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	b29b      	uxth	r3, r3
 80040de:	461a      	mov	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	611a      	str	r2, [r3, #16]
}
 80040e4:	bf00      	nop
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f7ff ffc0 	bl	8004084 <LL_SPI_IsEnabled>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d145      	bne.n	8004196 <LL_SPI_Init+0xa6>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004112:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8004116:	683a      	ldr	r2, [r7, #0]
 8004118:	6811      	ldr	r1, [r2, #0]
 800411a:	683a      	ldr	r2, [r7, #0]
 800411c:	6852      	ldr	r2, [r2, #4]
 800411e:	4311      	orrs	r1, r2
 8004120:	683a      	ldr	r2, [r7, #0]
 8004122:	68d2      	ldr	r2, [r2, #12]
 8004124:	4311      	orrs	r1, r2
 8004126:	683a      	ldr	r2, [r7, #0]
 8004128:	6912      	ldr	r2, [r2, #16]
 800412a:	4311      	orrs	r1, r2
 800412c:	683a      	ldr	r2, [r7, #0]
 800412e:	6952      	ldr	r2, [r2, #20]
 8004130:	4311      	orrs	r1, r2
 8004132:	683a      	ldr	r2, [r7, #0]
 8004134:	6992      	ldr	r2, [r2, #24]
 8004136:	4311      	orrs	r1, r2
 8004138:	683a      	ldr	r2, [r7, #0]
 800413a:	69d2      	ldr	r2, [r2, #28]
 800413c:	4311      	orrs	r1, r2
 800413e:	683a      	ldr	r2, [r7, #0]
 8004140:	6a12      	ldr	r2, [r2, #32]
 8004142:	430a      	orrs	r2, r1
 8004144:	431a      	orrs	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004152:	f023 0304 	bic.w	r3, r3, #4
 8004156:	683a      	ldr	r2, [r7, #0]
 8004158:	6891      	ldr	r1, [r2, #8]
 800415a:	683a      	ldr	r2, [r7, #0]
 800415c:	6952      	ldr	r2, [r2, #20]
 800415e:	0c12      	lsrs	r2, r2, #16
 8004160:	430a      	orrs	r2, r1
 8004162:	431a      	orrs	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	605a      	str	r2, [r3, #4]
               SPI_CR2_DS | SPI_CR2_SSOE,
               SPI_InitStruct->DataWidth | (SPI_InitStruct->NSS >> 16U));

    /* Set Rx FIFO to Quarter (1 Byte) in case of 8 Bits mode. No DataPacking by default */
    if (SPI_InitStruct->DataWidth < LL_SPI_DATAWIDTH_9BIT)
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004170:	d204      	bcs.n	800417c <LL_SPI_Init+0x8c>
    {
      LL_SPI_SetRxFIFOThreshold(SPIx, LL_SPI_RX_FIFO_TH_QUARTER);
 8004172:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f7ff ff97 	bl	80040aa <LL_SPI_SetRxFIFOThreshold>

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	6a1b      	ldr	r3, [r3, #32]
 8004180:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004184:	d105      	bne.n	8004192 <LL_SPI_Init+0xa2>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418a:	4619      	mov	r1, r3
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f7ff ff9f 	bl	80040d0 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8004192:	2300      	movs	r3, #0
 8004194:	73fb      	strb	r3, [r7, #15]

#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2S_SUPPORT */
  return status;
 8004196:	7bfb      	ldrb	r3, [r7, #15]
}
 8004198:	4618      	mov	r0, r3
 800419a:	3710      	adds	r7, #16
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80041aa:	4909      	ldr	r1, [pc, #36]	; (80041d0 <LL_InitTick+0x30>)
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b4:	3b01      	subs	r3, #1
 80041b6:	604b      	str	r3, [r1, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80041b8:	4b05      	ldr	r3, [pc, #20]	; (80041d0 <LL_InitTick+0x30>)
 80041ba:	2200      	movs	r2, #0
 80041bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80041be:	4b04      	ldr	r3, [pc, #16]	; (80041d0 <LL_InitTick+0x30>)
 80041c0:	2205      	movs	r2, #5
 80041c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80041c4:	bf00      	nop
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr
 80041d0:	e000e010 	.word	0xe000e010

080041d4 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80041dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f7ff ffdd 	bl	80041a0 <LL_InitTick>
}
 80041e6:	bf00      	nop
 80041e8:	3708      	adds	r7, #8
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
	...

080041f0 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b085      	sub	sp, #20
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80041f8:	4b0e      	ldr	r3, [pc, #56]	; (8004234 <LL_mDelay+0x44>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80041fe:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004206:	d00c      	beq.n	8004222 <LL_mDelay+0x32>
  {
    Delay++;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	3301      	adds	r3, #1
 800420c:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 800420e:	e008      	b.n	8004222 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8004210:	4b08      	ldr	r3, [pc, #32]	; (8004234 <LL_mDelay+0x44>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d002      	beq.n	8004222 <LL_mDelay+0x32>
    {
      Delay--;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	3b01      	subs	r3, #1
 8004220:	607b      	str	r3, [r7, #4]
  while (Delay)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d1f3      	bne.n	8004210 <LL_mDelay+0x20>
    }
  }
}
 8004228:	bf00      	nop
 800422a:	3714      	adds	r7, #20
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr
 8004234:	e000e010 	.word	0xe000e010

08004238 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8004240:	4a04      	ldr	r2, [pc, #16]	; (8004254 <LL_SetSystemCoreClock+0x1c>)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6013      	str	r3, [r2, #0]
}
 8004246:	bf00      	nop
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	200001bc 	.word	0x200001bc

08004258 <HAL_JOYSTICK_CenterPressed>:

#include "HAL_JOYSTICK.h"
#include "gpio.h"

short HAL_JOYSTICK_CenterPressed(void)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	af00      	add	r7, sp, #0
	return MX_Joystick_Center();
 800425c:	f7fc ff3c 	bl	80010d8 <MX_Joystick_Center>
 8004260:	4603      	mov	r3, r0
}
 8004262:	4618      	mov	r0, r3
 8004264:	bd80      	pop	{r7, pc}

08004266 <HAL_JOYSTICK_UpPressed>:
short HAL_JOYSTICK_UpPressed(void)
{
 8004266:	b580      	push	{r7, lr}
 8004268:	af00      	add	r7, sp, #0
	return MX_Joystick_Up();
 800426a:	f7fc feef 	bl	800104c <MX_Joystick_Up>
 800426e:	4603      	mov	r3, r0
}
 8004270:	4618      	mov	r0, r3
 8004272:	bd80      	pop	{r7, pc}

08004274 <HAL_JOYSTICK_DownPressed>:
short HAL_JOYSTICK_DownPressed(void)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	af00      	add	r7, sp, #0
	return MX_Joystick_Down();
 8004278:	f7fc fef8 	bl	800106c <MX_Joystick_Down>
 800427c:	4603      	mov	r3, r0
}
 800427e:	4618      	mov	r0, r3
 8004280:	bd80      	pop	{r7, pc}

08004282 <HAL_JOYSTICK_RightPressed>:
short HAL_JOYSTICK_RightPressed(void)
{
 8004282:	b580      	push	{r7, lr}
 8004284:	af00      	add	r7, sp, #0
	return MX_Joystick_Right();
 8004286:	f7fc ff03 	bl	8001090 <MX_Joystick_Right>
 800428a:	4603      	mov	r3, r0
}
 800428c:	4618      	mov	r0, r3
 800428e:	bd80      	pop	{r7, pc}

08004290 <HAL_JOYSTICK_LeftPressed>:
short HAL_JOYSTICK_LeftPressed(void)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	af00      	add	r7, sp, #0
	return MX_Joystick_Left();
 8004294:	f7fc ff0e 	bl	80010b4 <MX_Joystick_Left>
 8004298:	4603      	mov	r3, r0
}
 800429a:	4618      	mov	r0, r3
 800429c:	bd80      	pop	{r7, pc}

0800429e <LL_GPIO_SetOutputPin>:
{
 800429e:	b480      	push	{r7}
 80042a0:	b083      	sub	sp, #12
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
 80042a6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	683a      	ldr	r2, [r7, #0]
 80042ac:	619a      	str	r2, [r3, #24]
}
 80042ae:	bf00      	nop
 80042b0:	370c      	adds	r7, #12
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr

080042ba <LL_GPIO_ResetOutputPin>:
{
 80042ba:	b480      	push	{r7}
 80042bc:	b083      	sub	sp, #12
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
 80042c2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	683a      	ldr	r2, [r7, #0]
 80042c8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80042ca:	bf00      	nop
 80042cc:	370c      	adds	r7, #12
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr

080042d6 <HAL_LCD_Init>:




void HAL_LCD_Init(void)
{
 80042d6:	b580      	push	{r7, lr}
 80042d8:	af00      	add	r7, sp, #0
	/* This function initialize the LCD, this function must be call first
	before performing any operation in the LCD, the used GPIOs were initialized in the main */

	/*Before starting sending information to the LCD,
	it is necessary to initialize the SPI communication*/
	MX_SPI1_Init();
 80042da:	f7fe ff9b 	bl	8003214 <MX_SPI1_Init>

	/*We need to make sure the LCD reaches 3.3V, therefore we make a delay of 1ms after reseting the LCD
	to start sending information*/
	HAL_LCD_Reset();
 80042de:	f000 f822 	bl	8004326 <HAL_LCD_Reset>
	LL_mDelay(1);
 80042e2:	2001      	movs	r0, #1
 80042e4:	f7ff ff84 	bl	80041f0 <LL_mDelay>

	/*These commands are necessary to initialize the LCD, you can find
	them in the datasheet of the LCD NHD-C12832A1Z-FSW-FBW-3V3 or chip on glass ST7565R */

	/*We set the segment (columns) order to NORMAL*/
	HAL_LCD_Send_Command(CMD_ADC_SELECT(ADC_NORMAL));
 80042e8:	20a0      	movs	r0, #160	; 0xa0
 80042ea:	f000 f841 	bl	8004370 <HAL_LCD_Send_Command>

	 /*TURNS OFF the display*/
	HAL_LCD_Send_Command(CMD_DISPLAY_ON_OFF(DISPLAY_OFF));
 80042ee:	20ae      	movs	r0, #174	; 0xae
 80042f0:	f000 f83e 	bl	8004370 <HAL_LCD_Send_Command>

	/*Selects COM output scan direction to normal direction*/
	HAL_LCD_Send_Command(CMD_COM_DIRECTION(COM_DIRECTION_REVERSE));
 80042f4:	20c8      	movs	r0, #200	; 0xc8
 80042f6:	f000 f83b 	bl	8004370 <HAL_LCD_Send_Command>

	/*Sets the LCD drive voltage bias ratio to 1/9*/
	HAL_LCD_Send_Command(CMD_BIAS_RATIO(CMD_BIAS_19));
 80042fa:	20a2      	movs	r0, #162	; 0xa2
 80042fc:	f000 f838 	bl	8004370 <HAL_LCD_Send_Command>

	/*Select internal power supply 111*/
	HAL_LCD_Send_Command(CMD_PWR_CONTROL(PWR_INTERNAL_SUPPLY));
 8004300:	202f      	movs	r0, #47	; 0x2f
 8004302:	f000 f835 	bl	8004370 <HAL_LCD_Send_Command>

	/*Select internal resistor ratio 001 */
	HAL_LCD_Send_Command(CMD_RES_RATIO(RES_RATIO_35));
 8004306:	2021      	movs	r0, #33	; 0x21
 8004308:	f000 f832 	bl	8004370 <HAL_LCD_Send_Command>

	/*Electronic volume mode  */
	HAL_LCD_Send_Command(CMD_ELEC_VOL_MODE);
 800430c:	2081      	movs	r0, #129	; 0x81
 800430e:	f000 f82f 	bl	8004370 <HAL_LCD_Send_Command>

	/*SET electronic volume (contrast), please NOTE this value is different from the datasheet,
	the datasheet specifies to configure a 3F, however, the contrast is to high and we would have
	problems to see the configured pixel in further LCD configurations*/
	HAL_LCD_Send_Command(CMD_ELEC_VOL_SET_LOW);
 8004312:	201f      	movs	r0, #31
 8004314:	f000 f82c 	bl	8004370 <HAL_LCD_Send_Command>

	/* End of the initialization commands from datasheet, the following commands are just to prepare the
	 LCD before start implementing functions */

	/* With this command we want to set all the points in the LCD to work normal*/
	HAL_LCD_Send_Command(CMD_LCD_POINTS(LCD_POINTS_NORMAL));
 8004318:	20a4      	movs	r0, #164	; 0xa4
 800431a:	f000 f829 	bl	8004370 <HAL_LCD_Send_Command>

	/*After initializating the LCD, it is necessary to clear all display because
	it could have information in RAM after it was turned off*/
	HAL_LCD_Clear();
 800431e:	f000 f853 	bl	80043c8 <HAL_LCD_Clear>

	return;
 8004322:	bf00      	nop
}
 8004324:	bd80      	pop	{r7, pc}

08004326 <HAL_LCD_Reset>:
void HAL_LCD_Reset(void)
{
 8004326:	b580      	push	{r7, lr}
 8004328:	af00      	add	r7, sp, #0
	/*Pin PA6 is configured as RESET signal of LCD,
	when the reset signal is inactive, it is HIGH, if we want to reset the LCD
	, we reset the signal to LOW and release
	PA6   ------> LCD_RESET*/

	LL_GPIO_ResetOutputPin(LCD_RESET_GPIO_Port,LCD_RESET_Pin);
 800432a:	2140      	movs	r1, #64	; 0x40
 800432c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004330:	f7ff ffc3 	bl	80042ba <LL_GPIO_ResetOutputPin>
	LL_mDelay(1);
 8004334:	2001      	movs	r0, #1
 8004336:	f7ff ff5b 	bl	80041f0 <LL_mDelay>
	LL_GPIO_SetOutputPin(LCD_RESET_GPIO_Port,LCD_RESET_Pin);
 800433a:	2140      	movs	r1, #64	; 0x40
 800433c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004340:	f7ff ffad 	bl	800429e <LL_GPIO_SetOutputPin>

	return;
 8004344:	bf00      	nop
}
 8004346:	bd80      	pop	{r7, pc}

08004348 <HAL_LCD_A0_Data>:

void HAL_LCD_A0_Data(void)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	af00      	add	r7, sp, #0
	/*Pin PA8 is configured as A0 signal of LCD,
	when the A0 is HIGH, the information is a DATA
	PA8   ------> LCD_A0*/
	LL_GPIO_SetOutputPin(LCD_A0_GPIO_Port,LCD_A0_Pin);
 800434c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004350:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004354:	f7ff ffa3 	bl	800429e <LL_GPIO_SetOutputPin>

	return;
 8004358:	bf00      	nop
}
 800435a:	bd80      	pop	{r7, pc}

0800435c <HAL_LCD_A0_Command>:
void HAL_LCD_A0_Command(void)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	af00      	add	r7, sp, #0
	/*Pin PA8 is configured as A0 signal of LCD,
	when the A0 is LOW, the information is a COMMAND
	PA8   ------> LCD_A0*/
	LL_GPIO_ResetOutputPin(LCD_A0_GPIO_Port,LCD_A0_Pin);
 8004360:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004364:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004368:	f7ff ffa7 	bl	80042ba <LL_GPIO_ResetOutputPin>

	return;
 800436c:	bf00      	nop
}
 800436e:	bd80      	pop	{r7, pc}

08004370 <HAL_LCD_Send_Command>:

void HAL_LCD_Send_Command(uint8_t command)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	4603      	mov	r3, r0
 8004378:	71fb      	strb	r3, [r7, #7]
	/*Function to send a command through SPI1, it configures automatically the A0=0
	therefore, it is a command. It enables CHIP SELECT signal and disables it after transmission is done */
	MX_SPI1_CS_Enable();
 800437a:	f7fe ffd5 	bl	8003328 <MX_SPI1_CS_Enable>
	HAL_LCD_A0_Command();
 800437e:	f7ff ffed 	bl	800435c <HAL_LCD_A0_Command>
	MX_SPI1_Send(command);
 8004382:	79fb      	ldrb	r3, [r7, #7]
 8004384:	4618      	mov	r0, r3
 8004386:	f7fe ffb1 	bl	80032ec <MX_SPI1_Send>
	LL_mDelay(1);
 800438a:	2001      	movs	r0, #1
 800438c:	f7ff ff30 	bl	80041f0 <LL_mDelay>
	MX_SPI1_CS_Disable();
 8004390:	f7fe ffd4 	bl	800333c <MX_SPI1_CS_Disable>

	return;
 8004394:	bf00      	nop
}
 8004396:	3708      	adds	r7, #8
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <HAL_LCD_Send_Data>:

void HAL_LCD_Send_Data(uint8_t data)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b082      	sub	sp, #8
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	4603      	mov	r3, r0
 80043a4:	71fb      	strb	r3, [r7, #7]
	/*Function to send a data through SPI1, it configures automatically the A0=1
	therefore, it is a data. It enables CHIP SELECT signal and disables it after transmission is done */
	MX_SPI1_CS_Enable();
 80043a6:	f7fe ffbf 	bl	8003328 <MX_SPI1_CS_Enable>
	HAL_LCD_A0_Data();
 80043aa:	f7ff ffcd 	bl	8004348 <HAL_LCD_A0_Data>
	MX_SPI1_Send(data);
 80043ae:	79fb      	ldrb	r3, [r7, #7]
 80043b0:	4618      	mov	r0, r3
 80043b2:	f7fe ff9b 	bl	80032ec <MX_SPI1_Send>
	LL_mDelay(1);
 80043b6:	2001      	movs	r0, #1
 80043b8:	f7ff ff1a 	bl	80041f0 <LL_mDelay>
	MX_SPI1_CS_Disable();
 80043bc:	f7fe ffbe 	bl	800333c <MX_SPI1_CS_Disable>

	return;
 80043c0:	bf00      	nop
}
 80043c2:	3708      	adds	r7, #8
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <HAL_LCD_Clear>:

void HAL_LCD_Clear(void)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
	/*Function to clear ALL LCD, from page=0, column =0,
	to page = 3, column = 127, after clear, the cursor
	is set at page=0, column=0*/
	HAL_LCD_Send_Command(CMD_DISPLAY_ON_OFF(DISPLAY_OFF));
 80043ce:	20ae      	movs	r0, #174	; 0xae
 80043d0:	f7ff ffce 	bl	8004370 <HAL_LCD_Send_Command>
	for (uint8_t page=0 ; page <= MAX_PAGES ; page++)
 80043d4:	2300      	movs	r3, #0
 80043d6:	71fb      	strb	r3, [r7, #7]
 80043d8:	e014      	b.n	8004404 <HAL_LCD_Clear+0x3c>
	{

		HAL_LCD_Set_Position(0,page);
 80043da:	79fb      	ldrb	r3, [r7, #7]
 80043dc:	4619      	mov	r1, r3
 80043de:	2000      	movs	r0, #0
 80043e0:	f000 f81e 	bl	8004420 <HAL_LCD_Set_Position>
		for(uint8_t column=0;column<= MAX_WIDHT ; column++)
 80043e4:	2300      	movs	r3, #0
 80043e6:	71bb      	strb	r3, [r7, #6]
 80043e8:	e005      	b.n	80043f6 <HAL_LCD_Clear+0x2e>
		{
			HAL_LCD_Send_Data(ERASE_BYTE);
 80043ea:	2000      	movs	r0, #0
 80043ec:	f7ff ffd6 	bl	800439c <HAL_LCD_Send_Data>
		for(uint8_t column=0;column<= MAX_WIDHT ; column++)
 80043f0:	79bb      	ldrb	r3, [r7, #6]
 80043f2:	3301      	adds	r3, #1
 80043f4:	71bb      	strb	r3, [r7, #6]
 80043f6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	daf5      	bge.n	80043ea <HAL_LCD_Clear+0x22>
	for (uint8_t page=0 ; page <= MAX_PAGES ; page++)
 80043fe:	79fb      	ldrb	r3, [r7, #7]
 8004400:	3301      	adds	r3, #1
 8004402:	71fb      	strb	r3, [r7, #7]
 8004404:	79fb      	ldrb	r3, [r7, #7]
 8004406:	2b03      	cmp	r3, #3
 8004408:	d9e7      	bls.n	80043da <HAL_LCD_Clear+0x12>
		}
	}
	HAL_LCD_Set_Position(0,0);
 800440a:	2100      	movs	r1, #0
 800440c:	2000      	movs	r0, #0
 800440e:	f000 f807 	bl	8004420 <HAL_LCD_Set_Position>
	HAL_LCD_Send_Command(CMD_DISPLAY_ON_OFF(DISPLAY_ON));
 8004412:	20af      	movs	r0, #175	; 0xaf
 8004414:	f7ff ffac 	bl	8004370 <HAL_LCD_Send_Command>

	return;
 8004418:	bf00      	nop
}
 800441a:	3708      	adds	r7, #8
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <HAL_LCD_Set_Position>:

void HAL_LCD_Set_Position(uint8_t column, uint8_t page)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
 8004426:	4603      	mov	r3, r0
 8004428:	460a      	mov	r2, r1
 800442a:	71fb      	strb	r3, [r7, #7]
 800442c:	4613      	mov	r3, r2
 800442e:	71bb      	strb	r3, [r7, #6]
	/*This function sets the position of the cursor, remember that
	MAX COLUMN = 127 and MAX PAGE = 3, the cursor is not explicit showed in the LCD,
	it is just a reference word to understand where the LCD starting is*/
	HAL_LCD_Send_Command(CMD_COLUMN_MSB(column));
 8004430:	79fb      	ldrb	r3, [r7, #7]
 8004432:	091b      	lsrs	r3, r3, #4
 8004434:	b2db      	uxtb	r3, r3
 8004436:	b25b      	sxtb	r3, r3
 8004438:	f043 0310 	orr.w	r3, r3, #16
 800443c:	b25b      	sxtb	r3, r3
 800443e:	b2db      	uxtb	r3, r3
 8004440:	4618      	mov	r0, r3
 8004442:	f7ff ff95 	bl	8004370 <HAL_LCD_Send_Command>
	HAL_LCD_Send_Command(CMD_COLUMN_LSB(column));
 8004446:	79fb      	ldrb	r3, [r7, #7]
 8004448:	f003 030f 	and.w	r3, r3, #15
 800444c:	b2db      	uxtb	r3, r3
 800444e:	4618      	mov	r0, r3
 8004450:	f7ff ff8e 	bl	8004370 <HAL_LCD_Send_Command>
	HAL_LCD_Send_Command(CMD_PAGE(page));
 8004454:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004458:	f003 030f 	and.w	r3, r3, #15
 800445c:	b25b      	sxtb	r3, r3
 800445e:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8004462:	b25b      	sxtb	r3, r3
 8004464:	b2db      	uxtb	r3, r3
 8004466:	4618      	mov	r0, r3
 8004468:	f7ff ff82 	bl	8004370 <HAL_LCD_Send_Command>

	return;
 800446c:	bf00      	nop
}
 800446e:	3708      	adds	r7, #8
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <HAL_LCD_Write_ascii>:
void HAL_LCD_Write_ascii(uint8_t ascii, uint8_t column, uint8_t page)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	4603      	mov	r3, r0
 800447c:	71fb      	strb	r3, [r7, #7]
 800447e:	460b      	mov	r3, r1
 8004480:	71bb      	strb	r3, [r7, #6]
 8004482:	4613      	mov	r3, r2
 8004484:	717b      	strb	r3, [r7, #5]
	/*This function requires a byte to print a single ascii character in the LCD,
	this function also requires the exact page and column to print the ascii character in the lcd
	remember that, MAX_WIDTH = 127, MAX_PAGE = 3 */
	HAL_LCD_Send_Command(CMD_DISPLAY_ON_OFF(DISPLAY_ON));
 8004486:	20af      	movs	r0, #175	; 0xaf
 8004488:	f7ff ff72 	bl	8004370 <HAL_LCD_Send_Command>
	HAL_LCD_Set_Position(column,page);
 800448c:	797a      	ldrb	r2, [r7, #5]
 800448e:	79bb      	ldrb	r3, [r7, #6]
 8004490:	4611      	mov	r1, r2
 8004492:	4618      	mov	r0, r3
 8004494:	f7ff ffc4 	bl	8004420 <HAL_LCD_Set_Position>

	for (uint8_t i=0; i<MAX_PIXEL_WIDTH ; i++)
 8004498:	2300      	movs	r3, #0
 800449a:	73fb      	strb	r3, [r7, #15]
 800449c:	e011      	b.n	80044c2 <HAL_LCD_Write_ascii+0x4e>
	{
		HAL_LCD_Send_Data(HAL_REVERSE_BYTE(font[(ascii*5)+i]));
 800449e:	79fa      	ldrb	r2, [r7, #7]
 80044a0:	4613      	mov	r3, r2
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	441a      	add	r2, r3
 80044a6:	7bfb      	ldrb	r3, [r7, #15]
 80044a8:	4413      	add	r3, r2
 80044aa:	4a0b      	ldr	r2, [pc, #44]	; (80044d8 <HAL_LCD_Write_ascii+0x64>)
 80044ac:	5cd3      	ldrb	r3, [r2, r3]
 80044ae:	4618      	mov	r0, r3
 80044b0:	f000 f814 	bl	80044dc <HAL_REVERSE_BYTE>
 80044b4:	4603      	mov	r3, r0
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7ff ff70 	bl	800439c <HAL_LCD_Send_Data>
	for (uint8_t i=0; i<MAX_PIXEL_WIDTH ; i++)
 80044bc:	7bfb      	ldrb	r3, [r7, #15]
 80044be:	3301      	adds	r3, #1
 80044c0:	73fb      	strb	r3, [r7, #15]
 80044c2:	7bfb      	ldrb	r3, [r7, #15]
 80044c4:	2b04      	cmp	r3, #4
 80044c6:	d9ea      	bls.n	800449e <HAL_LCD_Write_ascii+0x2a>
	}

	HAL_LCD_Send_Data(LETTER_SEPARATOR_BYTE);
 80044c8:	2000      	movs	r0, #0
 80044ca:	f7ff ff67 	bl	800439c <HAL_LCD_Send_Data>

	return;
 80044ce:	bf00      	nop
}
 80044d0:	3710      	adds	r7, #16
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	200001c0 	.word	0x200001c0

080044dc <HAL_REVERSE_BYTE>:
uint8_t HAL_REVERSE_BYTE(uint8_t byte)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	4603      	mov	r3, r0
 80044e4:	71fb      	strb	r3, [r7, #7]
	/*This function reverse a single BYTE, why do we need this function?
	remember when we reversed the COMs in the HAL_LCD_Init() function, due this
	the line address of the pages was flip, this means that the MSB line of each page was in the bottom
	and the LSB was at the top. You need a function to reverse the data byte */
	byte = (byte & 0xF0) >> 4 | (byte & 0x0F) << 4;
 80044e6:	79fb      	ldrb	r3, [r7, #7]
 80044e8:	091b      	lsrs	r3, r3, #4
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	b25a      	sxtb	r2, r3
 80044ee:	79fb      	ldrb	r3, [r7, #7]
 80044f0:	011b      	lsls	r3, r3, #4
 80044f2:	b25b      	sxtb	r3, r3
 80044f4:	4313      	orrs	r3, r2
 80044f6:	b25b      	sxtb	r3, r3
 80044f8:	71fb      	strb	r3, [r7, #7]
	byte = (byte & 0xCC) >> 2 | (byte & 0x33) << 2;
 80044fa:	79fb      	ldrb	r3, [r7, #7]
 80044fc:	109b      	asrs	r3, r3, #2
 80044fe:	b25b      	sxtb	r3, r3
 8004500:	f003 0333 	and.w	r3, r3, #51	; 0x33
 8004504:	b25a      	sxtb	r2, r3
 8004506:	79fb      	ldrb	r3, [r7, #7]
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	b25b      	sxtb	r3, r3
 800450c:	f023 0333 	bic.w	r3, r3, #51	; 0x33
 8004510:	b25b      	sxtb	r3, r3
 8004512:	4313      	orrs	r3, r2
 8004514:	b25b      	sxtb	r3, r3
 8004516:	71fb      	strb	r3, [r7, #7]
	byte = (byte & 0xAA) >> 1 | (byte & 0x55) << 1;
 8004518:	79fb      	ldrb	r3, [r7, #7]
 800451a:	105b      	asrs	r3, r3, #1
 800451c:	b25b      	sxtb	r3, r3
 800451e:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8004522:	b25a      	sxtb	r2, r3
 8004524:	79fb      	ldrb	r3, [r7, #7]
 8004526:	005b      	lsls	r3, r3, #1
 8004528:	b25b      	sxtb	r3, r3
 800452a:	f023 0355 	bic.w	r3, r3, #85	; 0x55
 800452e:	b25b      	sxtb	r3, r3
 8004530:	4313      	orrs	r3, r2
 8004532:	b25b      	sxtb	r3, r3
 8004534:	71fb      	strb	r3, [r7, #7]

	return byte;
 8004536:	79fb      	ldrb	r3, [r7, #7]
}
 8004538:	4618      	mov	r0, r3
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <HAL_LCD_Write_AsciiString>:

void HAL_LCD_Write_AsciiString(uint8_t word[21], uint8_t column, uint8_t page)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	460b      	mov	r3, r1
 800454e:	70fb      	strb	r3, [r7, #3]
 8004550:	4613      	mov	r3, r2
 8004552:	70bb      	strb	r3, [r7, #2]
	/*This function writes a ascii string on the display, it could be a string like
	"Hello", "123", "Hello123" or "Hello 123", this function considers also spaces*/
	HAL_LCD_Set_Position(column,page);
 8004554:	78ba      	ldrb	r2, [r7, #2]
 8004556:	78fb      	ldrb	r3, [r7, #3]
 8004558:	4611      	mov	r1, r2
 800455a:	4618      	mov	r0, r3
 800455c:	f7ff ff60 	bl	8004420 <HAL_LCD_Set_Position>
	for (uint8_t i=0;i<21;i++)
 8004560:	2300      	movs	r3, #0
 8004562:	73fb      	strb	r3, [r7, #15]
 8004564:	e014      	b.n	8004590 <HAL_LCD_Write_AsciiString+0x4c>
	{
		if (word[i]=='\0')
 8004566:	7bfb      	ldrb	r3, [r7, #15]
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	4413      	add	r3, r2
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d013      	beq.n	800459a <HAL_LCD_Write_AsciiString+0x56>
		{
			return;
		}
		HAL_LCD_Write_ascii(word[i],column,page);
 8004572:	7bfb      	ldrb	r3, [r7, #15]
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	4413      	add	r3, r2
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	78ba      	ldrb	r2, [r7, #2]
 800457c:	78f9      	ldrb	r1, [r7, #3]
 800457e:	4618      	mov	r0, r3
 8004580:	f7ff ff78 	bl	8004474 <HAL_LCD_Write_ascii>
		column+=6;
 8004584:	78fb      	ldrb	r3, [r7, #3]
 8004586:	3306      	adds	r3, #6
 8004588:	70fb      	strb	r3, [r7, #3]
	for (uint8_t i=0;i<21;i++)
 800458a:	7bfb      	ldrb	r3, [r7, #15]
 800458c:	3301      	adds	r3, #1
 800458e:	73fb      	strb	r3, [r7, #15]
 8004590:	7bfb      	ldrb	r3, [r7, #15]
 8004592:	2b14      	cmp	r3, #20
 8004594:	d9e7      	bls.n	8004566 <HAL_LCD_Write_AsciiString+0x22>

	}

	return;
 8004596:	bf00      	nop
 8004598:	e000      	b.n	800459c <HAL_LCD_Write_AsciiString+0x58>
			return;
 800459a:	bf00      	nop


}
 800459c:	3710      	adds	r7, #16
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
	...

080045a4 <HAL_LCD_Write_Number>:

void HAL_LCD_Write_Number(uint8_t *number, uint8_t column, uint8_t page)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	460b      	mov	r3, r1
 80045ae:	70fb      	strb	r3, [r7, #3]
 80045b0:	4613      	mov	r3, r2
 80045b2:	70bb      	strb	r3, [r7, #2]
	/*This function writes a number of 2 digits, it also needs the column and page where you want the
	number, if the number is less than two digits, it will print 0#. Ex. If you want to print 9, the LCD
	will print 09*/
	uint8_t AsciiFirstDigit=*number/10+ADD_VALUE_TO_ASCII;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	4a12      	ldr	r2, [pc, #72]	; (8004604 <HAL_LCD_Write_Number+0x60>)
 80045ba:	fba2 2303 	umull	r2, r3, r2, r3
 80045be:	08db      	lsrs	r3, r3, #3
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	3330      	adds	r3, #48	; 0x30
 80045c4:	73fb      	strb	r3, [r7, #15]
	uint8_t AsciiSecondDigit = *number%10+ADD_VALUE_TO_ASCII;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	781a      	ldrb	r2, [r3, #0]
 80045ca:	4b0e      	ldr	r3, [pc, #56]	; (8004604 <HAL_LCD_Write_Number+0x60>)
 80045cc:	fba3 1302 	umull	r1, r3, r3, r2
 80045d0:	08d9      	lsrs	r1, r3, #3
 80045d2:	460b      	mov	r3, r1
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	440b      	add	r3, r1
 80045d8:	005b      	lsls	r3, r3, #1
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	3330      	adds	r3, #48	; 0x30
 80045e0:	73bb      	strb	r3, [r7, #14]
	uint8_t numberAscii [3]= {AsciiFirstDigit, AsciiSecondDigit,'\0'};
 80045e2:	7bfb      	ldrb	r3, [r7, #15]
 80045e4:	723b      	strb	r3, [r7, #8]
 80045e6:	7bbb      	ldrb	r3, [r7, #14]
 80045e8:	727b      	strb	r3, [r7, #9]
 80045ea:	2300      	movs	r3, #0
 80045ec:	72bb      	strb	r3, [r7, #10]
	HAL_LCD_Write_AsciiString(numberAscii,column,page);
 80045ee:	78ba      	ldrb	r2, [r7, #2]
 80045f0:	78f9      	ldrb	r1, [r7, #3]
 80045f2:	f107 0308 	add.w	r3, r7, #8
 80045f6:	4618      	mov	r0, r3
 80045f8:	f7ff ffa4 	bl	8004544 <HAL_LCD_Write_AsciiString>

	return;
 80045fc:	bf00      	nop
}
 80045fe:	3710      	adds	r7, #16
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}
 8004604:	cccccccd 	.word	0xcccccccd

08004608 <HAL_POT_Init>:
 */
#include "HAL_POT.h"

/*This function initialize the ADC*/
void HAL_POT_Init(void)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	af00      	add	r7, sp, #0
	MX_ADC1_Init();
 800460c:	f7fc fb36 	bl	8000c7c <MX_ADC1_Init>
	MX_ADC1_Calibration();
 8004610:	f7fc fbe0 	bl	8000dd4 <MX_ADC1_Calibration>
	MX_ADC1_Enable();
 8004614:	f7fc fbce 	bl	8000db4 <MX_ADC1_Enable>
}
 8004618:	bf00      	nop
 800461a:	bd80      	pop	{r7, pc}

0800461c <HAL_POT_GetBinaryValue>:

/*This function returns the ADC value i an 8 bits format*/
uint16_t HAL_POT_GetBinaryValue (uint32_t Channel)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
	uint16_t POT_value = 0;
 8004624:	2300      	movs	r3, #0
 8004626:	81fb      	strh	r3, [r7, #14]
	MX_ADC1_SetChannel(Channel);
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f7fc fbe5 	bl	8000df8 <MX_ADC1_SetChannel>
	MX_ADC1_StartConversion();
 800462e:	f7fc fc07 	bl	8000e40 <MX_ADC1_StartConversion>
	POT_value = MX_ADC1_GetValue();
 8004632:	f7fc fc19 	bl	8000e68 <MX_ADC1_GetValue>
 8004636:	4603      	mov	r3, r0
 8004638:	81fb      	strh	r3, [r7, #14]
	LL_mDelay(10);
 800463a:	200a      	movs	r0, #10
 800463c:	f7ff fdd8 	bl	80041f0 <LL_mDelay>

	return POT_value;
 8004640:	89fb      	ldrh	r3, [r7, #14]
}
 8004642:	4618      	mov	r0, r3
 8004644:	3710      	adds	r7, #16
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
	...

0800464c <HAL_POT_Percentage>:
	return POT_VoltageValue;
}

/*This function returns the value of the potentiometer as a percentage*/
uint8_t HAL_POT_Percentage (uint32_t Channel)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
	uint8_t POT_Percent = 0;
 8004654:	2300      	movs	r3, #0
 8004656:	73fb      	strb	r3, [r7, #15]
	uint16_t measure = 0;
 8004658:	2300      	movs	r3, #0
 800465a:	81bb      	strh	r3, [r7, #12]

	measure = HAL_POT_GetBinaryValue(Channel);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f7ff ffdd 	bl	800461c <HAL_POT_GetBinaryValue>
 8004662:	4603      	mov	r3, r0
 8004664:	81bb      	strh	r3, [r7, #12]
	POT_Percent = (measure * 100)/POT_MAX_Count;
 8004666:	89bb      	ldrh	r3, [r7, #12]
 8004668:	2264      	movs	r2, #100	; 0x64
 800466a:	fb02 f303 	mul.w	r3, r2, r3
 800466e:	4a06      	ldr	r2, [pc, #24]	; (8004688 <HAL_POT_Percentage+0x3c>)
 8004670:	fb82 1203 	smull	r1, r2, r2, r3
 8004674:	441a      	add	r2, r3
 8004676:	11d2      	asrs	r2, r2, #7
 8004678:	17db      	asrs	r3, r3, #31
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	73fb      	strb	r3, [r7, #15]

	return POT_Percent;
 800467e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004680:	4618      	mov	r0, r3
 8004682:	3710      	adds	r7, #16
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	80808081 	.word	0x80808081

0800468c <rgb_rojo>:
#include "HAL_RGB.h"
#include "gpio.h"

void rgb_rojo(){
 800468c:	b580      	push	{r7, lr}
 800468e:	af00      	add	r7, sp, #0
	MX_RGB_Red(0);
 8004690:	2000      	movs	r0, #0
 8004692:	f7fc fd33 	bl	80010fc <MX_RGB_Red>
	MX_RGB_Green(1);
 8004696:	2001      	movs	r0, #1
 8004698:	f7fc fd4c 	bl	8001134 <MX_RGB_Green>
	MX_RGB_Blue(1);
 800469c:	2001      	movs	r0, #1
 800469e:	f7fc fd65 	bl	800116c <MX_RGB_Blue>
}
 80046a2:	bf00      	nop
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <rgb_verde>:
void rgb_verde(){
 80046a6:	b580      	push	{r7, lr}
 80046a8:	af00      	add	r7, sp, #0
	MX_RGB_Red(1);
 80046aa:	2001      	movs	r0, #1
 80046ac:	f7fc fd26 	bl	80010fc <MX_RGB_Red>
	MX_RGB_Green(0);
 80046b0:	2000      	movs	r0, #0
 80046b2:	f7fc fd3f 	bl	8001134 <MX_RGB_Green>
	MX_RGB_Blue(1);
 80046b6:	2001      	movs	r0, #1
 80046b8:	f7fc fd58 	bl	800116c <MX_RGB_Blue>
}
 80046bc:	bf00      	nop
 80046be:	bd80      	pop	{r7, pc}

080046c0 <rgb_azul>:
void rgb_azul(){
 80046c0:	b580      	push	{r7, lr}
 80046c2:	af00      	add	r7, sp, #0
	MX_RGB_Red(1);
 80046c4:	2001      	movs	r0, #1
 80046c6:	f7fc fd19 	bl	80010fc <MX_RGB_Red>
	MX_RGB_Green(1);
 80046ca:	2001      	movs	r0, #1
 80046cc:	f7fc fd32 	bl	8001134 <MX_RGB_Green>
	MX_RGB_Blue(0);
 80046d0:	2000      	movs	r0, #0
 80046d2:	f7fc fd4b 	bl	800116c <MX_RGB_Blue>
}
 80046d6:	bf00      	nop
 80046d8:	bd80      	pop	{r7, pc}

080046da <rgb_amarillo>:
void rgb_amarillo(){
 80046da:	b580      	push	{r7, lr}
 80046dc:	af00      	add	r7, sp, #0
	MX_RGB_Red(0);
 80046de:	2000      	movs	r0, #0
 80046e0:	f7fc fd0c 	bl	80010fc <MX_RGB_Red>
	MX_RGB_Green(0);
 80046e4:	2000      	movs	r0, #0
 80046e6:	f7fc fd25 	bl	8001134 <MX_RGB_Green>
	MX_RGB_Blue(1);
 80046ea:	2001      	movs	r0, #1
 80046ec:	f7fc fd3e 	bl	800116c <MX_RGB_Blue>
}
 80046f0:	bf00      	nop
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <rgb_celeste>:
void rgb_celeste(){
 80046f4:	b580      	push	{r7, lr}
 80046f6:	af00      	add	r7, sp, #0
	MX_RGB_Red(1);
 80046f8:	2001      	movs	r0, #1
 80046fa:	f7fc fcff 	bl	80010fc <MX_RGB_Red>
	MX_RGB_Green(0);
 80046fe:	2000      	movs	r0, #0
 8004700:	f7fc fd18 	bl	8001134 <MX_RGB_Green>
	MX_RGB_Blue(0);
 8004704:	2000      	movs	r0, #0
 8004706:	f7fc fd31 	bl	800116c <MX_RGB_Blue>
}
 800470a:	bf00      	nop
 800470c:	bd80      	pop	{r7, pc}

0800470e <rgb_morado>:
void rgb_morado(){
 800470e:	b580      	push	{r7, lr}
 8004710:	af00      	add	r7, sp, #0
	MX_RGB_Red(0);
 8004712:	2000      	movs	r0, #0
 8004714:	f7fc fcf2 	bl	80010fc <MX_RGB_Red>
	MX_RGB_Green(1);
 8004718:	2001      	movs	r0, #1
 800471a:	f7fc fd0b 	bl	8001134 <MX_RGB_Green>
	MX_RGB_Blue(0);
 800471e:	2000      	movs	r0, #0
 8004720:	f7fc fd24 	bl	800116c <MX_RGB_Blue>
}
 8004724:	bf00      	nop
 8004726:	bd80      	pop	{r7, pc}

08004728 <rgb_blanco>:
void rgb_blanco(){
 8004728:	b580      	push	{r7, lr}
 800472a:	af00      	add	r7, sp, #0
	MX_RGB_Red(0);
 800472c:	2000      	movs	r0, #0
 800472e:	f7fc fce5 	bl	80010fc <MX_RGB_Red>
	MX_RGB_Green(0);
 8004732:	2000      	movs	r0, #0
 8004734:	f7fc fcfe 	bl	8001134 <MX_RGB_Green>
	MX_RGB_Blue(0);
 8004738:	2000      	movs	r0, #0
 800473a:	f7fc fd17 	bl	800116c <MX_RGB_Blue>
}
 800473e:	bf00      	nop
 8004740:	bd80      	pop	{r7, pc}

08004742 <rgb_apagado>:
void rgb_apagado(){
 8004742:	b580      	push	{r7, lr}
 8004744:	af00      	add	r7, sp, #0
	MX_RGB_Red(1);
 8004746:	2001      	movs	r0, #1
 8004748:	f7fc fcd8 	bl	80010fc <MX_RGB_Red>
	MX_RGB_Green(1);
 800474c:	2001      	movs	r0, #1
 800474e:	f7fc fcf1 	bl	8001134 <MX_RGB_Green>
	MX_RGB_Blue(1);
 8004752:	2001      	movs	r0, #1
 8004754:	f7fc fd0a 	bl	800116c <MX_RGB_Blue>
}
 8004758:	bf00      	nop
 800475a:	bd80      	pop	{r7, pc}

0800475c <HAL_RTC_Init>:
 */
#include "HAL_RTC.h"

/*This function initialize the RTC module*/
void HAL_RTC_Init(void)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	af00      	add	r7, sp, #0
	MX_RTC_Init();
 8004760:	f7fe fb5e 	bl	8002e20 <MX_RTC_Init>
	return;
 8004764:	bf00      	nop
}
 8004766:	bd80      	pop	{r7, pc}

08004768 <HAL_Get_ActualTime>:

/*This function returns the actual time, the pointers should be put in the argument as following: hour, minutes, seconds*/
void HAL_Get_ActualTime(uint8_t *hh, uint8_t *mm, uint8_t *ss)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
	MX_RTC_GetTime(hh, mm, ss);
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	68b9      	ldr	r1, [r7, #8]
 8004778:	68f8      	ldr	r0, [r7, #12]
 800477a:	f7fe fbd1 	bl	8002f20 <MX_RTC_GetTime>
	LL_mDelay(50);
 800477e:	2032      	movs	r0, #50	; 0x32
 8004780:	f7ff fd36 	bl	80041f0 <LL_mDelay>
	return;
 8004784:	bf00      	nop
}
 8004786:	3710      	adds	r7, #16
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <HAL_Set_ActualTime>:
}

/*This function allow to configure a new actual time, the value of the new time should be put in the argument as
 * following: hour, minutes, seconds*/
void HAL_Set_ActualTime(uint8_t hh, uint8_t mm, uint8_t ss)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0
 8004792:	4603      	mov	r3, r0
 8004794:	71fb      	strb	r3, [r7, #7]
 8004796:	460b      	mov	r3, r1
 8004798:	71bb      	strb	r3, [r7, #6]
 800479a:	4613      	mov	r3, r2
 800479c:	717b      	strb	r3, [r7, #5]
	MX_RTC_SetTime(hh, mm, ss);
 800479e:	797a      	ldrb	r2, [r7, #5]
 80047a0:	79b9      	ldrb	r1, [r7, #6]
 80047a2:	79fb      	ldrb	r3, [r7, #7]
 80047a4:	4618      	mov	r0, r3
 80047a6:	f7fe fc19 	bl	8002fdc <MX_RTC_SetTime>
	LL_mDelay(50);
 80047aa:	2032      	movs	r0, #50	; 0x32
 80047ac:	f7ff fd20 	bl	80041f0 <LL_mDelay>
	return;
 80047b0:	bf00      	nop
}
 80047b2:	3708      	adds	r7, #8
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <HAL_TEMPSen_Init>:
 *      Author: carlo
 */
#include "HAL_TEMPSen.h"

void HAL_TEMPSen_Init()
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	af00      	add	r7, sp, #0
	MX_I2C1_Init();
 80047bc:	f7fc fe40 	bl	8001440 <MX_I2C1_Init>
	return;
 80047c0:	bf00      	nop
}
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <HAL_TEMPSen_ReadTemperature>:

uint8_t HAL_TEMPSen_ReadTemperature(void)
{
 80047c4:	b590      	push	{r4, r7, lr}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
	  uint16_t measure = 0x00;
 80047ca:	2300      	movs	r3, #0
 80047cc:	81fb      	strh	r3, [r7, #14]
	  uint8_t data[2];
	  uint8_t temp = 0;
 80047ce:	2300      	movs	r3, #0
 80047d0:	71fb      	strb	r3, [r7, #7]
	  data [0]= LM75B_CMD_Temp;
 80047d2:	2300      	movs	r3, #0
 80047d4:	713b      	strb	r3, [r7, #4]
	  MX_I2C1_Write(1, data, TEMP_Sens_ADDR);
 80047d6:	1d3b      	adds	r3, r7, #4
 80047d8:	2290      	movs	r2, #144	; 0x90
 80047da:	4619      	mov	r1, r3
 80047dc:	2001      	movs	r0, #1
 80047de:	f7fc fef5 	bl	80015cc <MX_I2C1_Write>
	  MX_I2C_Read(2, data, TEMP_Sens_ADDR);
 80047e2:	1d3b      	adds	r3, r7, #4
 80047e4:	2290      	movs	r2, #144	; 0x90
 80047e6:	4619      	mov	r1, r3
 80047e8:	2002      	movs	r0, #2
 80047ea:	f7fc febb 	bl	8001564 <MX_I2C_Read>

	  for (int i=0; i<2; i++)
 80047ee:	2300      	movs	r3, #0
 80047f0:	60bb      	str	r3, [r7, #8]
 80047f2:	e010      	b.n	8004816 <HAL_TEMPSen_ReadTemperature+0x52>
	  {
		  if(i==0)
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d105      	bne.n	8004806 <HAL_TEMPSen_ReadTemperature+0x42>
		  {
			  measure = data[0];
 80047fa:	793b      	ldrb	r3, [r7, #4]
 80047fc:	81fb      	strh	r3, [r7, #14]
			  measure = measure << 8;
 80047fe:	89fb      	ldrh	r3, [r7, #14]
 8004800:	021b      	lsls	r3, r3, #8
 8004802:	81fb      	strh	r3, [r7, #14]
 8004804:	e004      	b.n	8004810 <HAL_TEMPSen_ReadTemperature+0x4c>
		  }else
		  {
			  measure = measure | (data[1]);
 8004806:	797b      	ldrb	r3, [r7, #5]
 8004808:	b29a      	uxth	r2, r3
 800480a:	89fb      	ldrh	r3, [r7, #14]
 800480c:	4313      	orrs	r3, r2
 800480e:	81fb      	strh	r3, [r7, #14]
	  for (int i=0; i<2; i++)
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	3301      	adds	r3, #1
 8004814:	60bb      	str	r3, [r7, #8]
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	2b01      	cmp	r3, #1
 800481a:	ddeb      	ble.n	80047f4 <HAL_TEMPSen_ReadTemperature+0x30>
		  }
	  }
	  measure = measure >> 5;
 800481c:	89fb      	ldrh	r3, [r7, #14]
 800481e:	095b      	lsrs	r3, r3, #5
 8004820:	81fb      	strh	r3, [r7, #14]
	  temp = (uint8_t)(measure * 0.125);
 8004822:	89fb      	ldrh	r3, [r7, #14]
 8004824:	4618      	mov	r0, r3
 8004826:	f7fb fe21 	bl	800046c <__aeabi_i2d>
 800482a:	f04f 0200 	mov.w	r2, #0
 800482e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004832:	f7fb fe81 	bl	8000538 <__aeabi_dmul>
 8004836:	4603      	mov	r3, r0
 8004838:	460c      	mov	r4, r1
 800483a:	4618      	mov	r0, r3
 800483c:	4621      	mov	r1, r4
 800483e:	f7fc f88d 	bl	800095c <__aeabi_d2uiz>
 8004842:	4603      	mov	r3, r0
 8004844:	71fb      	strb	r3, [r7, #7]

	  return temp;
 8004846:	79fb      	ldrb	r3, [r7, #7]
}
 8004848:	4618      	mov	r0, r3
 800484a:	3714      	adds	r7, #20
 800484c:	46bd      	mov	sp, r7
 800484e:	bd90      	pop	{r4, r7, pc}

08004850 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004850:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004888 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004854:	480d      	ldr	r0, [pc, #52]	; (800488c <LoopForever+0x6>)
  ldr r1, =_edata
 8004856:	490e      	ldr	r1, [pc, #56]	; (8004890 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004858:	4a0e      	ldr	r2, [pc, #56]	; (8004894 <LoopForever+0xe>)
  movs r3, #0
 800485a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800485c:	e002      	b.n	8004864 <LoopCopyDataInit>

0800485e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800485e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004860:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004862:	3304      	adds	r3, #4

08004864 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004864:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004866:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004868:	d3f9      	bcc.n	800485e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800486a:	4a0b      	ldr	r2, [pc, #44]	; (8004898 <LoopForever+0x12>)
  ldr r4, =_ebss
 800486c:	4c0b      	ldr	r4, [pc, #44]	; (800489c <LoopForever+0x16>)
  movs r3, #0
 800486e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004870:	e001      	b.n	8004876 <LoopFillZerobss>

08004872 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004872:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004874:	3204      	adds	r2, #4

08004876 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004876:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004878:	d3fb      	bcc.n	8004872 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800487a:	f7fe fd95 	bl	80033a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800487e:	f000 f811 	bl	80048a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004882:	f7fd f945 	bl	8001b10 <main>

08004886 <LoopForever>:

LoopForever:
    b LoopForever
 8004886:	e7fe      	b.n	8004886 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004888:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800488c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004890:	200006bc 	.word	0x200006bc
  ldr r2, =_sidata
 8004894:	08004944 	.word	0x08004944
  ldr r2, =_sbss
 8004898:	200006bc 	.word	0x200006bc
  ldr r4, =_ebss
 800489c:	20000704 	.word	0x20000704

080048a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80048a0:	e7fe      	b.n	80048a0 <ADC1_2_IRQHandler>
	...

080048a4 <__libc_init_array>:
 80048a4:	b570      	push	{r4, r5, r6, lr}
 80048a6:	4e0d      	ldr	r6, [pc, #52]	; (80048dc <__libc_init_array+0x38>)
 80048a8:	4c0d      	ldr	r4, [pc, #52]	; (80048e0 <__libc_init_array+0x3c>)
 80048aa:	1ba4      	subs	r4, r4, r6
 80048ac:	10a4      	asrs	r4, r4, #2
 80048ae:	2500      	movs	r5, #0
 80048b0:	42a5      	cmp	r5, r4
 80048b2:	d109      	bne.n	80048c8 <__libc_init_array+0x24>
 80048b4:	4e0b      	ldr	r6, [pc, #44]	; (80048e4 <__libc_init_array+0x40>)
 80048b6:	4c0c      	ldr	r4, [pc, #48]	; (80048e8 <__libc_init_array+0x44>)
 80048b8:	f000 f820 	bl	80048fc <_init>
 80048bc:	1ba4      	subs	r4, r4, r6
 80048be:	10a4      	asrs	r4, r4, #2
 80048c0:	2500      	movs	r5, #0
 80048c2:	42a5      	cmp	r5, r4
 80048c4:	d105      	bne.n	80048d2 <__libc_init_array+0x2e>
 80048c6:	bd70      	pop	{r4, r5, r6, pc}
 80048c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80048cc:	4798      	blx	r3
 80048ce:	3501      	adds	r5, #1
 80048d0:	e7ee      	b.n	80048b0 <__libc_init_array+0xc>
 80048d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80048d6:	4798      	blx	r3
 80048d8:	3501      	adds	r5, #1
 80048da:	e7f2      	b.n	80048c2 <__libc_init_array+0x1e>
 80048dc:	0800493c 	.word	0x0800493c
 80048e0:	0800493c 	.word	0x0800493c
 80048e4:	0800493c 	.word	0x0800493c
 80048e8:	08004940 	.word	0x08004940

080048ec <memset>:
 80048ec:	4402      	add	r2, r0
 80048ee:	4603      	mov	r3, r0
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d100      	bne.n	80048f6 <memset+0xa>
 80048f4:	4770      	bx	lr
 80048f6:	f803 1b01 	strb.w	r1, [r3], #1
 80048fa:	e7f9      	b.n	80048f0 <memset+0x4>

080048fc <_init>:
 80048fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048fe:	bf00      	nop
 8004900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004902:	bc08      	pop	{r3}
 8004904:	469e      	mov	lr, r3
 8004906:	4770      	bx	lr

08004908 <_fini>:
 8004908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800490a:	bf00      	nop
 800490c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800490e:	bc08      	pop	{r3}
 8004910:	469e      	mov	lr, r3
 8004912:	4770      	bx	lr
