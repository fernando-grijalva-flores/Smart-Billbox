
Smart_Pillbox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044b0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08004638  08004638  00014638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004660  08004660  00014660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004664  08004664  00014664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000006bc  20000000  08004668  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  000206bc  2**0
                  CONTENTS
  7 .bss          00000048  200006bc  200006bc  000206bc  2**2
                  ALLOC
  8 ._user_heap_stack 00000080  20000704  20000704  000206bc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000206bc  2**0
                  CONTENTS, READONLY
 10 .debug_info   00008a20  00000000  00000000  000206ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001e03  00000000  00000000  0002910c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000b58  00000000  00000000  0002af10  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00004603  00000000  00000000  0002ba68  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000296c  00000000  00000000  0003006b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  000329d7  2**0
                  CONTENTS, READONLY
 16 .debug_ranges 00000a30  00000000  00000000  00032a58  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00002ec0  00000000  00000000  00033488  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200006bc 	.word	0x200006bc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004620 	.word	0x08004620

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200006c0 	.word	0x200006c0
 80001c4:	08004620 	.word	0x08004620

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__aeabi_d2uiz>:
 800095c:	004a      	lsls	r2, r1, #1
 800095e:	d211      	bcs.n	8000984 <__aeabi_d2uiz+0x28>
 8000960:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000964:	d211      	bcs.n	800098a <__aeabi_d2uiz+0x2e>
 8000966:	d50d      	bpl.n	8000984 <__aeabi_d2uiz+0x28>
 8000968:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800096c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000970:	d40e      	bmi.n	8000990 <__aeabi_d2uiz+0x34>
 8000972:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000976:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800097a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800097e:	fa23 f002 	lsr.w	r0, r3, r2
 8000982:	4770      	bx	lr
 8000984:	f04f 0000 	mov.w	r0, #0
 8000988:	4770      	bx	lr
 800098a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800098e:	d102      	bne.n	8000996 <__aeabi_d2uiz+0x3a>
 8000990:	f04f 30ff 	mov.w	r0, #4294967295
 8000994:	4770      	bx	lr
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	4770      	bx	lr

0800099c <LL_ADC_REG_SetSequencerRanks>:
  *         (5) On STM32F3, ADC channel available only on all ADC instances, but
  *             only one ADC instance is allowed to be connected to VrefInt at the same time.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800099c:	b480      	push	{r7}
 800099e:	b089      	sub	sp, #36	; 0x24
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	60b9      	str	r1, [r7, #8]
 80009a6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	3330      	adds	r3, #48	; 0x30
 80009ac:	4619      	mov	r1, r3
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80009b4:	f44f 7240 	mov.w	r2, #768	; 0x300
 80009b8:	61ba      	str	r2, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009ba:	69ba      	ldr	r2, [r7, #24]
 80009bc:	fa92 f2a2 	rbit	r2, r2
 80009c0:	617a      	str	r2, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80009c2:	697a      	ldr	r2, [r7, #20]
 80009c4:	fab2 f282 	clz	r2, r2
 80009c8:	b2d2      	uxtb	r2, r2
 80009ca:	40d3      	lsrs	r3, r2
 80009cc:	009b      	lsls	r3, r3, #2
 80009ce:	440b      	add	r3, r1
 80009d0:	61fb      	str	r3, [r7, #28]
  
  MODIFY_REG(*preg,
 80009d2:	69fb      	ldr	r3, [r7, #28]
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	f003 031f 	and.w	r3, r3, #31
 80009dc:	211f      	movs	r1, #31
 80009de:	fa01 f303 	lsl.w	r3, r1, r3
 80009e2:	43db      	mvns	r3, r3
 80009e4:	401a      	ands	r2, r3
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	0e9b      	lsrs	r3, r3, #26
 80009ea:	f003 011f 	and.w	r1, r3, #31
 80009ee:	68bb      	ldr	r3, [r7, #8]
 80009f0:	f003 031f 	and.w	r3, r3, #31
 80009f4:	fa01 f303 	lsl.w	r3, r1, r3
 80009f8:	431a      	orrs	r2, r3
 80009fa:	69fb      	ldr	r3, [r7, #28]
 80009fc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80009fe:	bf00      	nop
 8000a00:	3724      	adds	r7, #36	; 0x24
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr

08000a0a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_181CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_601CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	b08d      	sub	sp, #52	; 0x34
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	60f8      	str	r0, [r7, #12]
 8000a12:	60b9      	str	r1, [r7, #8]
 8000a14:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	3314      	adds	r3, #20
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a22:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000a26:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a28:	69ba      	ldr	r2, [r7, #24]
 8000a2a:	fa92 f2a2 	rbit	r2, r2
 8000a2e:	617a      	str	r2, [r7, #20]
  return result;
 8000a30:	697a      	ldr	r2, [r7, #20]
 8000a32:	fab2 f282 	clz	r2, r2
 8000a36:	b2d2      	uxtb	r2, r2
 8000a38:	40d3      	lsrs	r3, r2
 8000a3a:	009b      	lsls	r3, r3, #2
 8000a3c:	440b      	add	r3, r1
 8000a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  MODIFY_REG(*preg,
 8000a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a42:	681a      	ldr	r2, [r3, #0]
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8000a4a:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8000a4e:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a50:	6a39      	ldr	r1, [r7, #32]
 8000a52:	fa91 f1a1 	rbit	r1, r1
 8000a56:	61f9      	str	r1, [r7, #28]
  return result;
 8000a58:	69f9      	ldr	r1, [r7, #28]
 8000a5a:	fab1 f181 	clz	r1, r1
 8000a5e:	b2c9      	uxtb	r1, r1
 8000a60:	40cb      	lsrs	r3, r1
 8000a62:	2107      	movs	r1, #7
 8000a64:	fa01 f303 	lsl.w	r3, r1, r3
 8000a68:	43db      	mvns	r3, r3
 8000a6a:	401a      	ands	r2, r3
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8000a72:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8000a76:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000a7a:	fa91 f1a1 	rbit	r1, r1
 8000a7e:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 8000a80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000a82:	fab1 f181 	clz	r1, r1
 8000a86:	b2c9      	uxtb	r1, r1
 8000a88:	40cb      	lsrs	r3, r1
 8000a8a:	6879      	ldr	r1, [r7, #4]
 8000a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a90:	431a      	orrs	r2, r3
 8000a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a94:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 8000a96:	bf00      	nop
 8000a98:	3734      	adds	r7, #52	; 0x34
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
	...

08000aa4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	60f8      	str	r0, [r7, #12]
 8000aac:	60b9      	str	r1, [r7, #8]
 8000aae:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000ab6:	68b9      	ldr	r1, [r7, #8]
 8000ab8:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000aba:	400b      	ands	r3, r1
 8000abc:	43db      	mvns	r3, r3
 8000abe:	401a      	ands	r2, r3
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	f003 0318 	and.w	r3, r3, #24
 8000ac6:	4908      	ldr	r1, [pc, #32]	; (8000ae8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000ac8:	40d9      	lsrs	r1, r3
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	4019      	ands	r1, r3
 8000ace:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000ad0:	400b      	ands	r3, r1
 8000ad2:	431a      	orrs	r2, r3
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000ada:	bf00      	nop
 8000adc:	3714      	adds	r7, #20
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	0007fffe 	.word	0x0007fffe

08000aec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  /* 1. Set the intermediate state before moving the ADC voltage regulator    */
  /*    to state enable.                                                      */
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	689b      	ldr	r3, [r3, #8]
 8000af8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	609a      	str	r2, [r3, #8]
  /* 2. Set the final state of ADC voltage regulator enable                   */
  /*    (ADVREGEN bits set to 0x01).                                          */
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	689b      	ldr	r3, [r3, #8]
 8000b04:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000b08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000b0c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN_0);
}
 8000b14:	bf00      	nop
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	689b      	ldr	r3, [r3, #8]
 8000b2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000b30:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000b34:	f043 0201 	orr.w	r2, r3, #1
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000b3c:	bf00      	nop
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <LL_ADC_StartCalibration>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx, uint32_t SingleDiff)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	6039      	str	r1, [r7, #0]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	689b      	ldr	r3, [r3, #8]
 8000b56:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000b5a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000b5e:	683a      	ldr	r2, [r7, #0]
 8000b60:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8000b64:	4313      	orrs	r3, r2
 8000b66:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	609a      	str	r2, [r3, #8]
             ADC_CR_ADCALDIF | ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADCAL | (SingleDiff & ADC_SINGLEDIFF_CALIB_START_MASK));
}
 8000b6e:	bf00      	nop
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR       ADCAL          LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	b083      	sub	sp, #12
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	689b      	ldr	r3, [r3, #8]
 8000b86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000b8e:	bf0c      	ite	eq
 8000b90:	2301      	moveq	r3, #1
 8000b92:	2300      	movne	r3, #0
 8000b94:	b2db      	uxtb	r3, r3
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	b083      	sub	sp, #12
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	689b      	ldr	r3, [r3, #8]
 8000bae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000bb2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000bb6:	f043 0204 	orr.w	r2, r3, #4
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000bbe:	bf00      	nop
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr

08000bca <LL_ADC_REG_ReadConversionData8>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData8
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_ADC_REG_ReadConversionData8(ADC_TypeDef *ADCx)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	b083      	sub	sp, #12
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd6:	b2db      	uxtb	r3, r3
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <LL_ADC_IsActiveFlag_ADRDY>:
  * @rmtoll ISR      ADRDY          LL_ADC_IsActiveFlag_ADRDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_ADRDY(ADC_TypeDef *ADCx)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f003 0301 	and.w	r3, r3, #1
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	bf0c      	ite	eq
 8000bf8:	2301      	moveq	r3, #1
 8000bfa:	2300      	movne	r3, #0
 8000bfc:	b2db      	uxtb	r3, r3
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <LL_ADC_IsActiveFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_IsActiveFlag_EOC
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(ADC_TypeDef *ADCx)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	b083      	sub	sp, #12
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f003 0304 	and.w	r3, r3, #4
 8000c1a:	2b04      	cmp	r3, #4
 8000c1c:	bf0c      	ite	eq
 8000c1e:	2301      	moveq	r3, #1
 8000c20:	2300      	movne	r3, #0
 8000c22:	b2db      	uxtb	r3, r3
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <LL_ADC_ClearFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_ClearFlag_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2204      	movs	r2, #4
 8000c3c:	601a      	str	r2, [r3, #0]
}
 8000c3e:	bf00      	nop
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
	...

08000c4c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000c54:	4908      	ldr	r1, [pc, #32]	; (8000c78 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000c56:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000c58:	695a      	ldr	r2, [r3, #20]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000c60:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000c62:	695a      	ldr	r2, [r3, #20]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	4013      	ands	r3, r2
 8000c68:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
}
 8000c6c:	bf00      	nop
 8000c6e:	3714      	adds	r7, #20
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	40021000 	.word	0x40021000

08000c7c <MX_ADC1_Init>:
const uint32_t ADC_Sampling_Time_Map[ADC_Channel_Num] = {LL_ADC_SAMPLINGTIME_601CYCLES_5, LL_ADC_SAMPLINGTIME_601CYCLES_5};
/* USER CODE END 0 */

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b094      	sub	sp, #80	; 0x50
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000c82:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	605a      	str	r2, [r3, #4]
 8000c8c:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000c8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]
 8000c9a:	60da      	str	r2, [r3, #12]
 8000c9c:	611a      	str	r2, [r3, #16]
 8000c9e:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8000ca0:	f107 0318 	add.w	r3, r7, #24
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cae:	463b      	mov	r3, r7
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	611a      	str	r2, [r3, #16]
 8000cbc:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_ADC12);
 8000cbe:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000cc2:	f7ff ffc3 	bl	8000c4c <LL_AHB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000cc6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000cca:	f7ff ffbf 	bl	8000c4c <LL_AHB1_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PA0   ------> ADC1_IN1
  PA1   ------> ADC1_IN2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cda:	463b      	mov	r3, r7
 8000cdc:	4619      	mov	r1, r3
 8000cde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ce2:	f002 fc6a 	bl	80035ba <LL_GPIO_Init>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_8B;
 8000ce6:	2310      	movs	r3, #16
 8000ce8:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000cea:	2300      	movs	r3, #0
 8000cec:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8000cf2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000cfc:	f002 fae8 	bl	80032d0 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000d00:	2300      	movs	r3, #0
 8000d02:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8000d04:	2300      	movs	r3, #0
 8000d06:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_LIMITED;
 8000d10:	2301      	movs	r3, #1
 8000d12:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_OVERWRITTEN;
 8000d14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d18:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8000d1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d1e:	4619      	mov	r1, r3
 8000d20:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000d24:	f002 fafa 	bl	800331c <LL_ADC_REG_Init>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV1;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8000d30:	f107 0318 	add.w	r3, r7, #24
 8000d34:	4619      	mov	r1, r3
 8000d36:	481a      	ldr	r0, [pc, #104]	; (8000da0 <MX_ADC1_Init+0x124>)
 8000d38:	f002 fa8a 	bl	8003250 <LL_ADC_CommonInit>

  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC1);
 8000d3c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000d40:	f7ff fed4 	bl	8000aec <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8000d44:	4b17      	ldr	r3, [pc, #92]	; (8000da4 <MX_ADC1_Init+0x128>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	099b      	lsrs	r3, r3, #6
 8000d4a:	4a17      	ldr	r2, [pc, #92]	; (8000da8 <MX_ADC1_Init+0x12c>)
 8000d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d50:	099a      	lsrs	r2, r3, #6
 8000d52:	4613      	mov	r3, r2
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	4413      	add	r3, r2
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	4b13      	ldr	r3, [pc, #76]	; (8000dac <MX_ADC1_Init+0x130>)
 8000d5e:	fba3 2302 	umull	r2, r3, r3, r2
 8000d62:	08db      	lsrs	r3, r3, #3
 8000d64:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8000d66:	e002      	b.n	8000d6e <MX_ADC1_Init+0xf2>
  {
    wait_loop_index--;
 8000d68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8000d6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d1f9      	bne.n	8000d68 <MX_ADC1_Init+0xec>
  }
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 8000d74:	4a0e      	ldr	r2, [pc, #56]	; (8000db0 <MX_ADC1_Init+0x134>)
 8000d76:	2106      	movs	r1, #6
 8000d78:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000d7c:	f7ff fe0e 	bl	800099c <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_601CYCLES_5);
 8000d80:	2207      	movs	r2, #7
 8000d82:	490b      	ldr	r1, [pc, #44]	; (8000db0 <MX_ADC1_Init+0x134>)
 8000d84:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000d88:	f7ff fe3f 	bl	8000a0a <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SINGLE_ENDED);
 8000d8c:	227f      	movs	r2, #127	; 0x7f
 8000d8e:	4908      	ldr	r1, [pc, #32]	; (8000db0 <MX_ADC1_Init+0x134>)
 8000d90:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000d94:	f7ff fe86 	bl	8000aa4 <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d98:	bf00      	nop
 8000d9a:	3750      	adds	r7, #80	; 0x50
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	50000300 	.word	0x50000300
 8000da4:	200001bc 	.word	0x200001bc
 8000da8:	053e2d63 	.word	0x053e2d63
 8000dac:	cccccccd 	.word	0xcccccccd
 8000db0:	04300002 	.word	0x04300002

08000db4 <MX_ADC1_Enable>:

/* USER CODE BEGIN 1 */

/*This function enable ADC*/
void MX_ADC1_Enable(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
	LL_ADC_Enable(ADC1);
 8000db8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000dbc:	f7ff feb0 	bl	8000b20 <LL_ADC_Enable>
	while(!LL_ADC_IsActiveFlag_ADRDY(ADC1));
 8000dc0:	bf00      	nop
 8000dc2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000dc6:	f7ff ff0d 	bl	8000be4 <LL_ADC_IsActiveFlag_ADRDY>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d0f8      	beq.n	8000dc2 <MX_ADC1_Enable+0xe>

	return;
 8000dd0:	bf00      	nop
}
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <MX_ADC1_Calibration>:
/*This Function start the ADC calibration and wait into the cycle until calibration is in progress*/
void MX_ADC1_Calibration(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
	LL_ADC_StartCalibration(ADC1, LL_ADC_SINGLE_ENDED);
 8000dd8:	217f      	movs	r1, #127	; 0x7f
 8000dda:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000dde:	f7ff feb3 	bl	8000b48 <LL_ADC_StartCalibration>
	while(LL_ADC_IsCalibrationOnGoing(ADC1));
 8000de2:	bf00      	nop
 8000de4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000de8:	f7ff fec7 	bl	8000b7a <LL_ADC_IsCalibrationOnGoing>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d1f8      	bne.n	8000de4 <MX_ADC1_Calibration+0x10>

	return;
 8000df2:	bf00      	nop
}
 8000df4:	bd80      	pop	{r7, pc}
	...

08000df8 <MX_ADC1_SetChannel>:
 * just use one of the following arguments:
 * Channel 1: ADC_Channel_1
 * Channel 2: ADC_Channel_2
 */
void MX_ADC1_SetChannel(uint32_t Channel)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
	LL_ADC_REG_SetSequencerRanks(ADC1,LL_ADC_REG_RANK_1, ADC_Channel_Map[Channel]);
 8000e00:	4a0d      	ldr	r2, [pc, #52]	; (8000e38 <MX_ADC1_SetChannel+0x40>)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e08:	461a      	mov	r2, r3
 8000e0a:	2106      	movs	r1, #6
 8000e0c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000e10:	f7ff fdc4 	bl	800099c <LL_ADC_REG_SetSequencerRanks>
	LL_ADC_SetChannelSamplingTime(ADC1,ADC_Channel_Map[Channel],ADC_Sampling_Time_Map[Channel]);
 8000e14:	4a08      	ldr	r2, [pc, #32]	; (8000e38 <MX_ADC1_SetChannel+0x40>)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000e1c:	4a07      	ldr	r2, [pc, #28]	; (8000e3c <MX_ADC1_SetChannel+0x44>)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e24:	461a      	mov	r2, r3
 8000e26:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000e2a:	f7ff fdee 	bl	8000a0a <LL_ADC_SetChannelSamplingTime>

	return;
 8000e2e:	bf00      	nop
}
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	08004650 	.word	0x08004650
 8000e3c:	08004658 	.word	0x08004658

08000e40 <MX_ADC1_StartConversion>:

/*This function start the ADC conversion process*/
void MX_ADC1_StartConversion(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
	LL_ADC_REG_StartConversion(ADC1);
 8000e44:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000e48:	f7ff feab 	bl	8000ba2 <LL_ADC_REG_StartConversion>
	/*This cycle waits until the end of conversion flag is active*/
	while(!LL_ADC_IsActiveFlag_EOC(ADC1));
 8000e4c:	bf00      	nop
 8000e4e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000e52:	f7ff feda 	bl	8000c0a <LL_ADC_IsActiveFlag_EOC>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d0f8      	beq.n	8000e4e <MX_ADC1_StartConversion+0xe>
	/*When ADC finish the conversion just clear the EOC flag*/
	LL_ADC_ClearFlag_EOC(ADC1);
 8000e5c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000e60:	f7ff fee6 	bl	8000c30 <LL_ADC_ClearFlag_EOC>

	return;
 8000e64:	bf00      	nop
}
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <MX_ADC1_GetValue>:

/*This function get the ADC value on a 8 bits format*/
uint16_t MX_ADC1_GetValue(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
	uint16_t ADC_value;
	ADC_value=LL_ADC_REG_ReadConversionData8(ADC1);
 8000e6e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000e72:	f7ff feaa 	bl	8000bca <LL_ADC_REG_ReadConversionData8>
 8000e76:	4603      	mov	r3, r0
 8000e78:	80fb      	strh	r3, [r7, #6]
	return ADC_value;
 8000e7a:	88fb      	ldrh	r3, [r7, #6]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <LL_AHB1_GRP1_EnableClock>:
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000e8c:	4908      	ldr	r1, [pc, #32]	; (8000eb0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e8e:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e90:	695a      	ldr	r2, [r3, #20]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000e98:	4b05      	ldr	r3, [pc, #20]	; (8000eb0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e9a:	695a      	ldr	r2, [r3, #20]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
}
 8000ea4:	bf00      	nop
 8000ea6:	3714      	adds	r7, #20
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	40021000 	.word	0x40021000

08000eb4 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	691a      	ldr	r2, [r3, #16]
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	401a      	ands	r2, r3
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	bf0c      	ite	eq
 8000ecc:	2301      	moveq	r3, #1
 8000ece:	2300      	movne	r3, #0
 8000ed0:	b2db      	uxtb	r3, r3
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	b083      	sub	sp, #12
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
 8000ee6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	683a      	ldr	r2, [r7, #0]
 8000eec:	619a      	str	r2, [r3, #24]
}
 8000eee:	bf00      	nop
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000efa:	b480      	push	{r7}
 8000efc:	b083      	sub	sp, #12
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
 8000f02:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	683a      	ldr	r2, [r7, #0]
 8000f08:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f0a:	bf00      	nop
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
	...

08000f18 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1e:	463b      	mov	r3, r7
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
 8000f2c:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000f2e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000f32:	f7ff ffa7 	bl	8000e84 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000f36:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000f3a:	f7ff ffa3 	bl	8000e84 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000f3e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000f42:	f7ff ff9f 	bl	8000e84 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(GPIOA, LCD_RESET_Pin|LCD_A0_Pin);
 8000f46:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000f4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f4e:	f7ff ffc6 	bl	8000ede <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(LCD_CS_N_GPIO_Port, LCD_CS_N_Pin);
 8000f52:	2140      	movs	r1, #64	; 0x40
 8000f54:	483b      	ldr	r0, [pc, #236]	; (8001044 <MX_GPIO_Init+0x12c>)
 8000f56:	f7ff ffc2 	bl	8000ede <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 8000f5a:	2180      	movs	r1, #128	; 0x80
 8000f5c:	483a      	ldr	r0, [pc, #232]	; (8001048 <MX_GPIO_Init+0x130>)
 8000f5e:	f7ff ffcc 	bl	8000efa <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 8000f62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f6a:	f7ff ffc6 	bl	8000efa <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED_R_GPIO_Port, LED_R_Pin);
 8000f6e:	2110      	movs	r1, #16
 8000f70:	4834      	ldr	r0, [pc, #208]	; (8001044 <MX_GPIO_Init+0x12c>)
 8000f72:	f7ff ffc2 	bl	8000efa <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = J_RIGHT_Pin|J_LEFT_Pin;
 8000f76:	2303      	movs	r3, #3
 8000f78:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f82:	463b      	mov	r3, r7
 8000f84:	4619      	mov	r1, r3
 8000f86:	4830      	ldr	r0, [pc, #192]	; (8001048 <MX_GPIO_Init+0x130>)
 8000f88:	f002 fb17 	bl	80035ba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = J_UP_Pin;
 8000f8c:	2310      	movs	r3, #16
 8000f8e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000f90:	2300      	movs	r3, #0
 8000f92:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f94:	2300      	movs	r3, #0
 8000f96:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(J_UP_GPIO_Port, &GPIO_InitStruct);
 8000f98:	463b      	mov	r3, r7
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa0:	f002 fb0b 	bl	80035ba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LCD_RESET_Pin|LCD_A0_Pin;
 8000fa4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000fa8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000faa:	2301      	movs	r3, #1
 8000fac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fba:	463b      	mov	r3, r7
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fc2:	f002 fafa 	bl	80035ba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = J_DOWN_Pin|J_CENTER_Pin;
 8000fc6:	2321      	movs	r3, #33	; 0x21
 8000fc8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd2:	463b      	mov	r3, r7
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	481b      	ldr	r0, [pc, #108]	; (8001044 <MX_GPIO_Init+0x12c>)
 8000fd8:	f002 faef 	bl	80035ba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_G_Pin;
 8000fdc:	2380      	movs	r3, #128	; 0x80
 8000fde:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000fec:	2300      	movs	r3, #0
 8000fee:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED_G_GPIO_Port, &GPIO_InitStruct);
 8000ff0:	463b      	mov	r3, r7
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4814      	ldr	r0, [pc, #80]	; (8001048 <MX_GPIO_Init+0x130>)
 8000ff6:	f002 fae0 	bl	80035ba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_B_Pin;
 8000ffa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ffe:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001000:	2301      	movs	r3, #1
 8001002:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001004:	2300      	movs	r3, #0
 8001006:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800100c:	2300      	movs	r3, #0
 800100e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 8001010:	463b      	mov	r3, r7
 8001012:	4619      	mov	r1, r3
 8001014:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001018:	f002 facf 	bl	80035ba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_R_Pin|LCD_CS_N_Pin;
 800101c:	2350      	movs	r3, #80	; 0x50
 800101e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001020:	2301      	movs	r3, #1
 8001022:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001024:	2300      	movs	r3, #0
 8001026:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800102c:	2300      	movs	r3, #0
 800102e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001030:	463b      	mov	r3, r7
 8001032:	4619      	mov	r1, r3
 8001034:	4803      	ldr	r0, [pc, #12]	; (8001044 <MX_GPIO_Init+0x12c>)
 8001036:	f002 fac0 	bl	80035ba <LL_GPIO_Init>

}
 800103a:	bf00      	nop
 800103c:	3718      	adds	r7, #24
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	48000400 	.word	0x48000400
 8001048:	48000800 	.word	0x48000800

0800104c <MX_Joystick_Up>:

/* USER CODE BEGIN 2 */
short MX_Joystick_Up(){
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
	/* Deteccion de Joystick Up */
	short v = LL_GPIO_IsInputPinSet(GPIOA,J_UP_Pin);
 8001052:	2110      	movs	r1, #16
 8001054:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001058:	f7ff ff2c 	bl	8000eb4 <LL_GPIO_IsInputPinSet>
 800105c:	4603      	mov	r3, r0
 800105e:	80fb      	strh	r3, [r7, #6]
	return v;
 8001060:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001064:	4618      	mov	r0, r3
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <MX_Joystick_Down>:
short MX_Joystick_Down(){
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
	/* Deteccion de Joystick Down */
	short v = LL_GPIO_IsInputPinSet(GPIOB,J_DOWN_Pin);
 8001072:	2101      	movs	r1, #1
 8001074:	4805      	ldr	r0, [pc, #20]	; (800108c <MX_Joystick_Down+0x20>)
 8001076:	f7ff ff1d 	bl	8000eb4 <LL_GPIO_IsInputPinSet>
 800107a:	4603      	mov	r3, r0
 800107c:	80fb      	strh	r3, [r7, #6]
	return v;
 800107e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001082:	4618      	mov	r0, r3
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	48000400 	.word	0x48000400

08001090 <MX_Joystick_Right>:
short MX_Joystick_Right(){
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
	/* Deteccion de Joystick Right */
	short v = LL_GPIO_IsInputPinSet(GPIOC,J_RIGHT_Pin);
 8001096:	2101      	movs	r1, #1
 8001098:	4805      	ldr	r0, [pc, #20]	; (80010b0 <MX_Joystick_Right+0x20>)
 800109a:	f7ff ff0b 	bl	8000eb4 <LL_GPIO_IsInputPinSet>
 800109e:	4603      	mov	r3, r0
 80010a0:	80fb      	strh	r3, [r7, #6]
	return v;
 80010a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	48000800 	.word	0x48000800

080010b4 <MX_Joystick_Left>:
short MX_Joystick_Left(){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
	/* Deteccion de Joystick Left */
	short v = LL_GPIO_IsInputPinSet(GPIOC,J_LEFT_Pin);
 80010ba:	2102      	movs	r1, #2
 80010bc:	4805      	ldr	r0, [pc, #20]	; (80010d4 <MX_Joystick_Left+0x20>)
 80010be:	f7ff fef9 	bl	8000eb4 <LL_GPIO_IsInputPinSet>
 80010c2:	4603      	mov	r3, r0
 80010c4:	80fb      	strh	r3, [r7, #6]
	return v;
 80010c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	48000800 	.word	0x48000800

080010d8 <MX_Joystick_Center>:
short MX_Joystick_Center(){
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
	/* Deteccion de Joystick Center */
	short v = LL_GPIO_IsInputPinSet(GPIOB,J_CENTER_Pin);
 80010de:	2120      	movs	r1, #32
 80010e0:	4805      	ldr	r0, [pc, #20]	; (80010f8 <MX_Joystick_Center+0x20>)
 80010e2:	f7ff fee7 	bl	8000eb4 <LL_GPIO_IsInputPinSet>
 80010e6:	4603      	mov	r3, r0
 80010e8:	80fb      	strh	r3, [r7, #6]
	return v;
 80010ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	48000400 	.word	0x48000400

080010fc <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	601a      	str	r2, [r3, #0]
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	601a      	str	r2, [r3, #0]
}
 8001130:	bf00      	nop
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <LL_I2C_SetMasterAddressingMode>:
  *         @arg @ref LL_I2C_ADDRESSING_MODE_7BIT
  *         @arg @ref LL_I2C_ADDRESSING_MODE_10BIT
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMasterAddressingMode(I2C_TypeDef *I2Cx, uint32_t AddressingMode)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_ADD10, AddressingMode);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	431a      	orrs	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	605a      	str	r2, [r3, #4]
}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr

08001162 <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 8001162:	b480      	push	{r7}
 8001164:	b085      	sub	sp, #20
 8001166:	af00      	add	r7, sp, #0
 8001168:	60f8      	str	r0, [r7, #12]
 800116a:	60b9      	str	r1, [r7, #8]
 800116c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	68db      	ldr	r3, [r3, #12]
 8001172:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001176:	f023 0306 	bic.w	r3, r3, #6
 800117a:	68b9      	ldr	r1, [r7, #8]
 800117c:	687a      	ldr	r2, [r7, #4]
 800117e:	430a      	orrs	r2, r1
 8001180:	431a      	orrs	r2, r3
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	60da      	str	r2, [r3, #12]
}
 8001186:	bf00      	nop
 8001188:	3714      	adds	r7, #20
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr

08001192 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8001192:	b480      	push	{r7}
 8001194:	b083      	sub	sp, #12
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	68db      	ldr	r3, [r3, #12]
 800119e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	60da      	str	r2, [r3, #12]
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <LL_I2C_IsActiveFlag_TXIS>:
  * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(I2C_TypeDef *I2Cx)
{
 80011b2:	b480      	push	{r7}
 80011b4:	b083      	sub	sp, #12
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	699b      	ldr	r3, [r3, #24]
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d101      	bne.n	80011ca <LL_I2C_IsActiveFlag_TXIS+0x18>
 80011c6:	2301      	movs	r3, #1
 80011c8:	e000      	b.n	80011cc <LL_I2C_IsActiveFlag_TXIS+0x1a>
 80011ca:	2300      	movs	r3, #0
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	f003 0304 	and.w	r3, r3, #4
 80011e8:	2b04      	cmp	r3, #4
 80011ea:	d101      	bne.n	80011f0 <LL_I2C_IsActiveFlag_RXNE+0x18>
 80011ec:	2301      	movs	r3, #1
 80011ee:	e000      	b.n	80011f2 <LL_I2C_IsActiveFlag_RXNE+0x1a>
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr

080011fe <LL_I2C_IsActiveFlag_STOP>:
  * @rmtoll ISR          STOPF         LL_I2C_IsActiveFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(I2C_TypeDef *I2Cx)
{
 80011fe:	b480      	push	{r7}
 8001200:	b083      	sub	sp, #12
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	699b      	ldr	r3, [r3, #24]
 800120a:	f003 0320 	and.w	r3, r3, #32
 800120e:	2b20      	cmp	r3, #32
 8001210:	d101      	bne.n	8001216 <LL_I2C_IsActiveFlag_STOP+0x18>
 8001212:	2301      	movs	r3, #1
 8001214:	e000      	b.n	8001218 <LL_I2C_IsActiveFlag_STOP+0x1a>
 8001216:	2300      	movs	r3, #0
}
 8001218:	4618      	mov	r0, r3
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <LL_I2C_ClearFlag_STOP>:
  * @rmtoll ICR          STOPCF        LL_I2C_ClearFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	69db      	ldr	r3, [r3, #28]
 8001230:	f043 0220 	orr.w	r2, r3, #32
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	61da      	str	r2, [r3, #28]
}
 8001238:	bf00      	nop
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	605a      	str	r2, [r3, #4]
}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <LL_I2C_SetTransferSize>:
  * @param  I2Cx I2C Instance.
  * @param  TransferSize This parameter must be a value between Min_Data=0x00 and Max_Data=0xFF.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetTransferSize(I2C_TypeDef *I2Cx, uint32_t TransferSize)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NBYTES, TransferSize << I2C_CR2_NBYTES_Pos);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	041b      	lsls	r3, r3, #16
 800127a:	431a      	orrs	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	605a      	str	r2, [r3, #4]
}
 8001280:	bf00      	nop
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <LL_I2C_GenerateStartCondition>:
  * @rmtoll CR2          START           LL_I2C_GenerateStartCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStartCondition(I2C_TypeDef *I2Cx)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_START);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	605a      	str	r2, [r3, #4]
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <LL_I2C_SetTransferRequest>:
  *         @arg @ref LL_I2C_REQUEST_WRITE
  *         @arg @ref LL_I2C_REQUEST_READ
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetTransferRequest(I2C_TypeDef *I2Cx, uint32_t TransferRequest)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_RD_WRN, TransferRequest);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	431a      	orrs	r2, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	605a      	str	r2, [r3, #4]
}
 80012c6:	bf00      	nop
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <LL_I2C_SetSlaveAddr>:
  * @param  I2Cx I2C Instance.
  * @param  SlaveAddr This parameter must be a value between Min_Data=0x00 and Max_Data=0x3F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetSlaveAddr(I2C_TypeDef *I2Cx, uint32_t SlaveAddr)
{
 80012d2:	b480      	push	{r7}
 80012d4:	b083      	sub	sp, #12
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
 80012da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD, SlaveAddr);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80012e4:	f023 0303 	bic.w	r3, r3, #3
 80012e8:	683a      	ldr	r2, [r7, #0]
 80012ea:	431a      	orrs	r2, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	605a      	str	r2, [r3, #4]
}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001308:	b2db      	uxtb	r3, r3
}
 800130a:	4618      	mov	r0, r3
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr

08001316 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8001316:	b480      	push	{r7}
 8001318:	b083      	sub	sp, #12
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
 800131e:	460b      	mov	r3, r1
 8001320:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 8001322:	78fa      	ldrb	r2, [r7, #3]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <LL_AHB1_GRP1_EnableClock>:
{
 8001334:	b480      	push	{r7}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 800133c:	4908      	ldr	r1, [pc, #32]	; (8001360 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800133e:	4b08      	ldr	r3, [pc, #32]	; (8001360 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001340:	695a      	ldr	r2, [r3, #20]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4313      	orrs	r3, r2
 8001346:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001348:	4b05      	ldr	r3, [pc, #20]	; (8001360 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800134a:	695a      	ldr	r2, [r3, #20]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4013      	ands	r3, r2
 8001350:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001352:	68fb      	ldr	r3, [r7, #12]
}
 8001354:	bf00      	nop
 8001356:	3714      	adds	r7, #20
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	40021000 	.word	0x40021000

08001364 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800136c:	4908      	ldr	r1, [pc, #32]	; (8001390 <LL_APB1_GRP1_EnableClock+0x2c>)
 800136e:	4b08      	ldr	r3, [pc, #32]	; (8001390 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001370:	69da      	ldr	r2, [r3, #28]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4313      	orrs	r3, r2
 8001376:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001378:	4b05      	ldr	r3, [pc, #20]	; (8001390 <LL_APB1_GRP1_EnableClock+0x2c>)
 800137a:	69da      	ldr	r2, [r3, #28]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4013      	ands	r3, r2
 8001380:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001382:	68fb      	ldr	r3, [r7, #12]
}
 8001384:	bf00      	nop
 8001386:	3714      	adds	r7, #20
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	40021000 	.word	0x40021000

08001394 <MX_I2C1_Init>:

/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b08e      	sub	sp, #56	; 0x38
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800139a:	f107 031c 	add.w	r3, r7, #28
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	605a      	str	r2, [r3, #4]
 80013a4:	609a      	str	r2, [r3, #8]
 80013a6:	60da      	str	r2, [r3, #12]
 80013a8:	611a      	str	r2, [r3, #16]
 80013aa:	615a      	str	r2, [r3, #20]
 80013ac:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ae:	1d3b      	adds	r3, r7, #4
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
 80013bc:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80013be:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80013c2:	f7ff ffb7 	bl	8001334 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB8   ------> I2C1_SCL
  PB9   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 80013c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013ca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80013cc:	2302      	movs	r3, #2
 80013ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80013d0:	2303      	movs	r3, #3
 80013d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80013d4:	2301      	movs	r3, #1
 80013d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80013dc:	2304      	movs	r3, #4
 80013de:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e0:	1d3b      	adds	r3, r7, #4
 80013e2:	4619      	mov	r1, r3
 80013e4:	481a      	ldr	r0, [pc, #104]	; (8001450 <MX_I2C1_Init+0xbc>)
 80013e6:	f002 f8e8 	bl	80035ba <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 80013ea:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80013ee:	f7ff ffb9 	bl	8001364 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 80013f2:	4818      	ldr	r0, [pc, #96]	; (8001454 <MX_I2C1_Init+0xc0>)
 80013f4:	f7ff ff26 	bl	8001244 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 80013f8:	4816      	ldr	r0, [pc, #88]	; (8001454 <MX_I2C1_Init+0xc0>)
 80013fa:	f7ff feca 	bl	8001192 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 80013fe:	4815      	ldr	r0, [pc, #84]	; (8001454 <MX_I2C1_Init+0xc0>)
 8001400:	f7ff fe8c 	bl	800111c <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8001404:	4813      	ldr	r0, [pc, #76]	; (8001454 <MX_I2C1_Init+0xc0>)
 8001406:	f7ff fe79 	bl	80010fc <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 800140a:	2300      	movs	r3, #0
 800140c:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x00101D7C;
 800140e:	4b12      	ldr	r3, [pc, #72]	; (8001458 <MX_I2C1_Init+0xc4>)
 8001410:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8001412:	2300      	movs	r3, #0
 8001414:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8001416:	2300      	movs	r3, #0
 8001418:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 800141a:	2300      	movs	r3, #0
 800141c:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 800141e:	2300      	movs	r3, #0
 8001420:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_10BIT;
 8001422:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001426:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8001428:	f107 031c 	add.w	r3, r7, #28
 800142c:	4619      	mov	r1, r3
 800142e:	4809      	ldr	r0, [pc, #36]	; (8001454 <MX_I2C1_Init+0xc0>)
 8001430:	f002 f9d6 	bl	80037e0 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8001434:	2200      	movs	r2, #0
 8001436:	2100      	movs	r1, #0
 8001438:	4806      	ldr	r0, [pc, #24]	; (8001454 <MX_I2C1_Init+0xc0>)
 800143a:	f7ff fe92 	bl	8001162 <LL_I2C_SetOwnAddress2>
  LL_I2C_SetMasterAddressingMode(I2C1, LL_I2C_ADDRESSING_MODE_10BIT);
 800143e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001442:	4804      	ldr	r0, [pc, #16]	; (8001454 <MX_I2C1_Init+0xc0>)
 8001444:	f7ff fe7a 	bl	800113c <LL_I2C_SetMasterAddressingMode>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001448:	bf00      	nop
 800144a:	3738      	adds	r7, #56	; 0x38
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	48000400 	.word	0x48000400
 8001454:	40005400 	.word	0x40005400
 8001458:	00101d7c 	.word	0x00101d7c

0800145c <MX_I2C1_MasterInit>:

/* USER CODE BEGIN 1 */

void MX_I2C1_MasterInit(MX_I2C1_XferType transferType, uint8_t transferSize, uint16_t periph_addr)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	71fb      	strb	r3, [r7, #7]
 8001466:	460b      	mov	r3, r1
 8001468:	71bb      	strb	r3, [r7, #6]
 800146a:	4613      	mov	r3, r2
 800146c:	80bb      	strh	r3, [r7, #4]
	/*Define Addressing mode*/
	LL_I2C_SetMasterAddressingMode(I2C1, LL_I2C_ADDRESSING_MODE_7BIT);
 800146e:	2100      	movs	r1, #0
 8001470:	4810      	ldr	r0, [pc, #64]	; (80014b4 <MX_I2C1_MasterInit+0x58>)
 8001472:	f7ff fe63 	bl	800113c <LL_I2C_SetMasterAddressingMode>

	/*Define Slave Address*/
	LL_I2C_SetSlaveAddr(I2C1, periph_addr);
 8001476:	88bb      	ldrh	r3, [r7, #4]
 8001478:	4619      	mov	r1, r3
 800147a:	480e      	ldr	r0, [pc, #56]	; (80014b4 <MX_I2C1_MasterInit+0x58>)
 800147c:	f7ff ff29 	bl	80012d2 <LL_I2C_SetSlaveAddr>

	/*Define Transfer Type*/
	if(transferType == MX_I2C1_xferRead)
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d105      	bne.n	8001492 <MX_I2C1_MasterInit+0x36>
	{
		LL_I2C_SetTransferRequest(I2C1, LL_I2C_REQUEST_READ);
 8001486:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800148a:	480a      	ldr	r0, [pc, #40]	; (80014b4 <MX_I2C1_MasterInit+0x58>)
 800148c:	f7ff ff0e 	bl	80012ac <LL_I2C_SetTransferRequest>
 8001490:	e003      	b.n	800149a <MX_I2C1_MasterInit+0x3e>
	}
	else
	{
		LL_I2C_SetTransferRequest(I2C1, LL_I2C_REQUEST_WRITE);
 8001492:	2100      	movs	r1, #0
 8001494:	4807      	ldr	r0, [pc, #28]	; (80014b4 <MX_I2C1_MasterInit+0x58>)
 8001496:	f7ff ff09 	bl	80012ac <LL_I2C_SetTransferRequest>
	}

	/*Define transfer size*/
	LL_I2C_SetTransferSize(I2C1, transferSize);
 800149a:	79bb      	ldrb	r3, [r7, #6]
 800149c:	4619      	mov	r1, r3
 800149e:	4805      	ldr	r0, [pc, #20]	; (80014b4 <MX_I2C1_MasterInit+0x58>)
 80014a0:	f7ff fee0 	bl	8001264 <LL_I2C_SetTransferSize>

	/*Enable Auto End Mode*/
	LL_I2C_EnableAutoEndMode(I2C1);
 80014a4:	4803      	ldr	r0, [pc, #12]	; (80014b4 <MX_I2C1_MasterInit+0x58>)
 80014a6:	f7ff fecd 	bl	8001244 <LL_I2C_EnableAutoEndMode>

	return;
 80014aa:	bf00      	nop
}
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40005400 	.word	0x40005400

080014b8 <MX_I2C_Read>:

void MX_I2C_Read (uint8_t transferSize, uint8_t *dataRx, uint16_t periph_addr)
{
 80014b8:	b590      	push	{r4, r7, lr}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	6039      	str	r1, [r7, #0]
 80014c2:	71fb      	strb	r3, [r7, #7]
 80014c4:	4613      	mov	r3, r2
 80014c6:	80bb      	strh	r3, [r7, #4]
	/*Counter to read data*/
	uint8_t i = 0;
 80014c8:	2300      	movs	r3, #0
 80014ca:	73fb      	strb	r3, [r7, #15]

	/*Master Initialization*/
	MX_I2C1_MasterInit(MX_I2C1_xferRead, transferSize, periph_addr);
 80014cc:	88ba      	ldrh	r2, [r7, #4]
 80014ce:	79fb      	ldrb	r3, [r7, #7]
 80014d0:	4619      	mov	r1, r3
 80014d2:	2000      	movs	r0, #0
 80014d4:	f7ff ffc2 	bl	800145c <MX_I2C1_MasterInit>

	/*Generate Start Condition*/
	LL_I2C_GenerateStartCondition(I2C1);
 80014d8:	4810      	ldr	r0, [pc, #64]	; (800151c <MX_I2C_Read+0x64>)
 80014da:	f7ff fed7 	bl	800128c <LL_I2C_GenerateStartCondition>

	/*Check if Stop Flag is active or not*/
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 80014de:	e010      	b.n	8001502 <MX_I2C_Read+0x4a>
	{
		/*This condition is used to check if the buffer is not empty, if not dataRx pointer take information from the salve*/
		if(LL_I2C_IsActiveFlag_RXNE(I2C1))
 80014e0:	480e      	ldr	r0, [pc, #56]	; (800151c <MX_I2C_Read+0x64>)
 80014e2:	f7ff fe79 	bl	80011d8 <LL_I2C_IsActiveFlag_RXNE>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d00a      	beq.n	8001502 <MX_I2C_Read+0x4a>
		{
			dataRx[i++] = LL_I2C_ReceiveData8(I2C1);
 80014ec:	7bfb      	ldrb	r3, [r7, #15]
 80014ee:	1c5a      	adds	r2, r3, #1
 80014f0:	73fa      	strb	r2, [r7, #15]
 80014f2:	461a      	mov	r2, r3
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	189c      	adds	r4, r3, r2
 80014f8:	4808      	ldr	r0, [pc, #32]	; (800151c <MX_I2C_Read+0x64>)
 80014fa:	f7ff feff 	bl	80012fc <LL_I2C_ReceiveData8>
 80014fe:	4603      	mov	r3, r0
 8001500:	7023      	strb	r3, [r4, #0]
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001502:	4806      	ldr	r0, [pc, #24]	; (800151c <MX_I2C_Read+0x64>)
 8001504:	f7ff fe7b 	bl	80011fe <LL_I2C_IsActiveFlag_STOP>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d0e8      	beq.n	80014e0 <MX_I2C_Read+0x28>
		}
	}

	/*Clear Stop flag when the data transmission has ended*/
	LL_I2C_ClearFlag_STOP(I2C1);
 800150e:	4803      	ldr	r0, [pc, #12]	; (800151c <MX_I2C_Read+0x64>)
 8001510:	f7ff fe88 	bl	8001224 <LL_I2C_ClearFlag_STOP>

	return;
 8001514:	bf00      	nop
}
 8001516:	3714      	adds	r7, #20
 8001518:	46bd      	mov	sp, r7
 800151a:	bd90      	pop	{r4, r7, pc}
 800151c:	40005400 	.word	0x40005400

08001520 <MX_I2C1_Write>:

void MX_I2C1_Write (uint8_t transferSize, uint8_t *dataTx, uint16_t periph_addr)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	6039      	str	r1, [r7, #0]
 800152a:	71fb      	strb	r3, [r7, #7]
 800152c:	4613      	mov	r3, r2
 800152e:	80bb      	strh	r3, [r7, #4]
	uint8_t i = 0;
 8001530:	2300      	movs	r3, #0
 8001532:	73fb      	strb	r3, [r7, #15]

	/*Master Initialization*/
	MX_I2C1_MasterInit(MX_I2C1_xferWrite, transferSize, periph_addr);
 8001534:	88ba      	ldrh	r2, [r7, #4]
 8001536:	79fb      	ldrb	r3, [r7, #7]
 8001538:	4619      	mov	r1, r3
 800153a:	2001      	movs	r0, #1
 800153c:	f7ff ff8e 	bl	800145c <MX_I2C1_MasterInit>

	/*Generate Start Condition*/
	LL_I2C_GenerateStartCondition(I2C1);
 8001540:	4810      	ldr	r0, [pc, #64]	; (8001584 <MX_I2C1_Write+0x64>)
 8001542:	f7ff fea3 	bl	800128c <LL_I2C_GenerateStartCondition>

	/*Check if Stop Flag is active or not*/
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001546:	e010      	b.n	800156a <MX_I2C1_Write+0x4a>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8001548:	480e      	ldr	r0, [pc, #56]	; (8001584 <MX_I2C1_Write+0x64>)
 800154a:	f7ff fe32 	bl	80011b2 <LL_I2C_IsActiveFlag_TXIS>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d00a      	beq.n	800156a <MX_I2C1_Write+0x4a>
		{
			LL_I2C_TransmitData8(I2C1, dataTx[i++]);
 8001554:	7bfb      	ldrb	r3, [r7, #15]
 8001556:	1c5a      	adds	r2, r3, #1
 8001558:	73fa      	strb	r2, [r7, #15]
 800155a:	461a      	mov	r2, r3
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	4413      	add	r3, r2
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	4619      	mov	r1, r3
 8001564:	4807      	ldr	r0, [pc, #28]	; (8001584 <MX_I2C1_Write+0x64>)
 8001566:	f7ff fed6 	bl	8001316 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 800156a:	4806      	ldr	r0, [pc, #24]	; (8001584 <MX_I2C1_Write+0x64>)
 800156c:	f7ff fe47 	bl	80011fe <LL_I2C_IsActiveFlag_STOP>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d0e8      	beq.n	8001548 <MX_I2C1_Write+0x28>
		}
	}

	/*Clear Stop flag when the data transmission has ended*/
	LL_I2C_ClearFlag_STOP(I2C1);
 8001576:	4803      	ldr	r0, [pc, #12]	; (8001584 <MX_I2C1_Write+0x64>)
 8001578:	f7ff fe54 	bl	8001224 <LL_I2C_ClearFlag_STOP>

	return;
 800157c:	bf00      	nop
}
 800157e:	3710      	adds	r7, #16
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40005400 	.word	0x40005400

08001588 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f003 0307 	and.w	r3, r3, #7
 8001596:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001598:	4b0c      	ldr	r3, [pc, #48]	; (80015cc <__NVIC_SetPriorityGrouping+0x44>)
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800159e:	68ba      	ldr	r2, [r7, #8]
 80015a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015a4:	4013      	ands	r3, r2
 80015a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ba:	4a04      	ldr	r2, [pc, #16]	; (80015cc <__NVIC_SetPriorityGrouping+0x44>)
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	60d3      	str	r3, [r2, #12]
}
 80015c0:	bf00      	nop
 80015c2:	3714      	adds	r7, #20
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015d4:	4b04      	ldr	r3, [pc, #16]	; (80015e8 <__NVIC_GetPriorityGrouping+0x18>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	0a1b      	lsrs	r3, r3, #8
 80015da:	f003 0307 	and.w	r3, r3, #7
}
 80015de:	4618      	mov	r0, r3
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	e000ed00 	.word	0xe000ed00

080015ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	6039      	str	r1, [r7, #0]
 80015f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	db0a      	blt.n	8001616 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001600:	490d      	ldr	r1, [pc, #52]	; (8001638 <__NVIC_SetPriority+0x4c>)
 8001602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001606:	683a      	ldr	r2, [r7, #0]
 8001608:	b2d2      	uxtb	r2, r2
 800160a:	0112      	lsls	r2, r2, #4
 800160c:	b2d2      	uxtb	r2, r2
 800160e:	440b      	add	r3, r1
 8001610:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001614:	e00a      	b.n	800162c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001616:	4909      	ldr	r1, [pc, #36]	; (800163c <__NVIC_SetPriority+0x50>)
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	f003 030f 	and.w	r3, r3, #15
 800161e:	3b04      	subs	r3, #4
 8001620:	683a      	ldr	r2, [r7, #0]
 8001622:	b2d2      	uxtb	r2, r2
 8001624:	0112      	lsls	r2, r2, #4
 8001626:	b2d2      	uxtb	r2, r2
 8001628:	440b      	add	r3, r1
 800162a:	761a      	strb	r2, [r3, #24]
}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	e000e100 	.word	0xe000e100
 800163c:	e000ed00 	.word	0xe000ed00

08001640 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001640:	b480      	push	{r7}
 8001642:	b089      	sub	sp, #36	; 0x24
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	f1c3 0307 	rsb	r3, r3, #7
 800165a:	2b04      	cmp	r3, #4
 800165c:	bf28      	it	cs
 800165e:	2304      	movcs	r3, #4
 8001660:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	3304      	adds	r3, #4
 8001666:	2b06      	cmp	r3, #6
 8001668:	d902      	bls.n	8001670 <NVIC_EncodePriority+0x30>
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	3b03      	subs	r3, #3
 800166e:	e000      	b.n	8001672 <NVIC_EncodePriority+0x32>
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001674:	2201      	movs	r2, #1
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	1e5a      	subs	r2, r3, #1
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	401a      	ands	r2, r3
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001686:	2101      	movs	r1, #1
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	fa01 f303 	lsl.w	r3, r1, r3
 800168e:	1e59      	subs	r1, r3, #1
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001694:	4313      	orrs	r3, r2
         );
}
 8001696:	4618      	mov	r0, r3
 8001698:	3724      	adds	r7, #36	; 0x24
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
	...

080016a4 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80016a8:	4a05      	ldr	r2, [pc, #20]	; (80016c0 <LL_RCC_HSI_Enable+0x1c>)
 80016aa:	4b05      	ldr	r3, [pc, #20]	; (80016c0 <LL_RCC_HSI_Enable+0x1c>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f043 0301 	orr.w	r3, r3, #1
 80016b2:	6013      	str	r3, [r2, #0]
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	40021000 	.word	0x40021000

080016c4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80016c8:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <LL_RCC_HSI_IsReady+0x20>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0302 	and.w	r3, r3, #2
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	bf0c      	ite	eq
 80016d4:	2301      	moveq	r3, #1
 80016d6:	2300      	movne	r3, #0
 80016d8:	b2db      	uxtb	r3, r3
}
 80016da:	4618      	mov	r0, r3
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	40021000 	.word	0x40021000

080016e8 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80016f0:	4907      	ldr	r1, [pc, #28]	; (8001710 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80016f2:	4b07      	ldr	r3, [pc, #28]	; (8001710 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	00db      	lsls	r3, r3, #3
 80016fe:	4313      	orrs	r3, r2
 8001700:	600b      	str	r3, [r1, #0]
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	40021000 	.word	0x40021000

08001714 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001718:	4a05      	ldr	r2, [pc, #20]	; (8001730 <LL_RCC_LSI_Enable+0x1c>)
 800171a:	4b05      	ldr	r3, [pc, #20]	; (8001730 <LL_RCC_LSI_Enable+0x1c>)
 800171c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171e:	f043 0301 	orr.w	r3, r3, #1
 8001722:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	40021000 	.word	0x40021000

08001734 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY));
 8001738:	4b06      	ldr	r3, [pc, #24]	; (8001754 <LL_RCC_LSI_IsReady+0x20>)
 800173a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173c:	f003 0302 	and.w	r3, r3, #2
 8001740:	2b02      	cmp	r3, #2
 8001742:	bf0c      	ite	eq
 8001744:	2301      	moveq	r3, #1
 8001746:	2300      	movne	r3, #0
 8001748:	b2db      	uxtb	r3, r3
}
 800174a:	4618      	mov	r0, r3
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	40021000 	.word	0x40021000

08001758 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001760:	4906      	ldr	r1, [pc, #24]	; (800177c <LL_RCC_SetSysClkSource+0x24>)
 8001762:	4b06      	ldr	r3, [pc, #24]	; (800177c <LL_RCC_SetSysClkSource+0x24>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f023 0203 	bic.w	r2, r3, #3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4313      	orrs	r3, r2
 800176e:	604b      	str	r3, [r1, #4]
}
 8001770:	bf00      	nop
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	40021000 	.word	0x40021000

08001780 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001784:	4b04      	ldr	r3, [pc, #16]	; (8001798 <LL_RCC_GetSysClkSource+0x18>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f003 030c 	and.w	r3, r3, #12
}
 800178c:	4618      	mov	r0, r3
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	40021000 	.word	0x40021000

0800179c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80017a4:	4906      	ldr	r1, [pc, #24]	; (80017c0 <LL_RCC_SetAHBPrescaler+0x24>)
 80017a6:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <LL_RCC_SetAHBPrescaler+0x24>)
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	604b      	str	r3, [r1, #4]
}
 80017b4:	bf00      	nop
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	40021000 	.word	0x40021000

080017c4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80017cc:	4906      	ldr	r1, [pc, #24]	; (80017e8 <LL_RCC_SetAPB1Prescaler+0x24>)
 80017ce:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <LL_RCC_SetAPB1Prescaler+0x24>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4313      	orrs	r3, r2
 80017da:	604b      	str	r3, [r1, #4]
}
 80017dc:	bf00      	nop
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	40021000 	.word	0x40021000

080017ec <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80017f4:	4906      	ldr	r1, [pc, #24]	; (8001810 <LL_RCC_SetAPB2Prescaler+0x24>)
 80017f6:	4b06      	ldr	r3, [pc, #24]	; (8001810 <LL_RCC_SetAPB2Prescaler+0x24>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4313      	orrs	r3, r2
 8001802:	604b      	str	r3, [r1, #4]
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	40021000 	.word	0x40021000

08001814 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 800181c:	4908      	ldr	r1, [pc, #32]	; (8001840 <LL_RCC_SetI2CClockSource+0x2c>)
 800181e:	4b08      	ldr	r3, [pc, #32]	; (8001840 <LL_RCC_SetI2CClockSource+0x2c>)
 8001820:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	0e1b      	lsrs	r3, r3, #24
 8001826:	43db      	mvns	r3, r3
 8001828:	401a      	ands	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001830:	4313      	orrs	r3, r2
 8001832:	630b      	str	r3, [r1, #48]	; 0x30
}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	40021000 	.word	0x40021000

08001844 <LL_RCC_SetADCClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
#if defined(RCC_CFGR2_ADCPRE34)
  MODIFY_REG(RCC->CFGR2, (ADCxSource >> 16U), (ADCxSource & 0x0000FFFFU));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_ADCPRE12, ADCxSource);
 800184c:	4906      	ldr	r1, [pc, #24]	; (8001868 <LL_RCC_SetADCClockSource+0x24>)
 800184e:	4b06      	ldr	r3, [pc, #24]	; (8001868 <LL_RCC_SetADCClockSource+0x24>)
 8001850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001852:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4313      	orrs	r3, r2
 800185a:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_ADCPRE34 */
}
 800185c:	bf00      	nop
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	40021000 	.word	0x40021000

0800186c <LL_RCC_SetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV32
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRTCClockSource(uint32_t Source)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8001874:	4906      	ldr	r1, [pc, #24]	; (8001890 <LL_RCC_SetRTCClockSource+0x24>)
 8001876:	4b06      	ldr	r3, [pc, #24]	; (8001890 <LL_RCC_SetRTCClockSource+0x24>)
 8001878:	6a1b      	ldr	r3, [r3, #32]
 800187a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4313      	orrs	r3, r2
 8001882:	620b      	str	r3, [r1, #32]
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	40021000 	.word	0x40021000

08001894 <LL_RCC_GetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSE
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV32
  */
__STATIC_INLINE uint32_t LL_RCC_GetRTCClockSource(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8001898:	4b04      	ldr	r3, [pc, #16]	; (80018ac <LL_RCC_GetRTCClockSource+0x18>)
 800189a:	6a1b      	ldr	r3, [r3, #32]
 800189c:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	40021000 	.word	0x40021000

080018b0 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80018b4:	4a05      	ldr	r2, [pc, #20]	; (80018cc <LL_RCC_EnableRTC+0x1c>)
 80018b6:	4b05      	ldr	r3, [pc, #20]	; (80018cc <LL_RCC_EnableRTC+0x1c>)
 80018b8:	6a1b      	ldr	r3, [r3, #32]
 80018ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018be:	6213      	str	r3, [r2, #32]
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	40021000 	.word	0x40021000

080018d0 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80018d4:	4a05      	ldr	r2, [pc, #20]	; (80018ec <LL_RCC_ForceBackupDomainReset+0x1c>)
 80018d6:	4b05      	ldr	r3, [pc, #20]	; (80018ec <LL_RCC_ForceBackupDomainReset+0x1c>)
 80018d8:	6a1b      	ldr	r3, [r3, #32]
 80018da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018de:	6213      	str	r3, [r2, #32]
}
 80018e0:	bf00      	nop
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	40021000 	.word	0x40021000

080018f0 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80018f4:	4a05      	ldr	r2, [pc, #20]	; (800190c <LL_RCC_ReleaseBackupDomainReset+0x1c>)
 80018f6:	4b05      	ldr	r3, [pc, #20]	; (800190c <LL_RCC_ReleaseBackupDomainReset+0x1c>)
 80018f8:	6a1b      	ldr	r3, [r3, #32]
 80018fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018fe:	6213      	str	r3, [r2, #32]
}
 8001900:	bf00      	nop
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	40021000 	.word	0x40021000

08001910 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001914:	4a05      	ldr	r2, [pc, #20]	; (800192c <LL_RCC_PLL_Enable+0x1c>)
 8001916:	4b05      	ldr	r3, [pc, #20]	; (800192c <LL_RCC_PLL_Enable+0x1c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800191e:	6013      	str	r3, [r2, #0]
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	40021000 	.word	0x40021000

08001930 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001934:	4b07      	ldr	r3, [pc, #28]	; (8001954 <LL_RCC_PLL_IsReady+0x24>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800193c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001940:	bf0c      	ite	eq
 8001942:	2301      	moveq	r3, #1
 8001944:	2300      	movne	r3, #0
 8001946:	b2db      	uxtb	r3, r3
}
 8001948:	4618      	mov	r0, r3
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	40021000 	.word	0x40021000

08001958 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, (Source & RCC_CFGR_PLLSRC) | PLLMul);
 8001962:	480e      	ldr	r0, [pc, #56]	; (800199c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001964:	4b0d      	ldr	r3, [pc, #52]	; (800199c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	430b      	orrs	r3, r1
 8001976:	4313      	orrs	r3, r2
 8001978:	6043      	str	r3, [r0, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, (Source & RCC_CFGR2_PREDIV));
 800197a:	4908      	ldr	r1, [pc, #32]	; (800199c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800197c:	4b07      	ldr	r3, [pc, #28]	; (800199c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800197e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001980:	f023 020f 	bic.w	r2, r3, #15
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f003 030f 	and.w	r3, r3, #15
 800198a:	4313      	orrs	r3, r2
 800198c:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800198e:	bf00      	nop
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	40021000 	.word	0x40021000

080019a0 <LL_APB1_GRP1_EnableClock>:
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80019a8:	4908      	ldr	r1, [pc, #32]	; (80019cc <LL_APB1_GRP1_EnableClock+0x2c>)
 80019aa:	4b08      	ldr	r3, [pc, #32]	; (80019cc <LL_APB1_GRP1_EnableClock+0x2c>)
 80019ac:	69da      	ldr	r2, [r3, #28]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80019b4:	4b05      	ldr	r3, [pc, #20]	; (80019cc <LL_APB1_GRP1_EnableClock+0x2c>)
 80019b6:	69da      	ldr	r2, [r3, #28]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4013      	ands	r3, r2
 80019bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019be:	68fb      	ldr	r3, [r7, #12]
}
 80019c0:	bf00      	nop
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	40021000 	.word	0x40021000

080019d0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80019d8:	4908      	ldr	r1, [pc, #32]	; (80019fc <LL_APB2_GRP1_EnableClock+0x2c>)
 80019da:	4b08      	ldr	r3, [pc, #32]	; (80019fc <LL_APB2_GRP1_EnableClock+0x2c>)
 80019dc:	699a      	ldr	r2, [r3, #24]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80019e4:	4b05      	ldr	r3, [pc, #20]	; (80019fc <LL_APB2_GRP1_EnableClock+0x2c>)
 80019e6:	699a      	ldr	r2, [r3, #24]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	4013      	ands	r3, r2
 80019ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019ee:	68fb      	ldr	r3, [r7, #12]
}
 80019f0:	bf00      	nop
 80019f2:	3714      	adds	r7, #20
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	40021000 	.word	0x40021000

08001a00 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001a08:	4906      	ldr	r1, [pc, #24]	; (8001a24 <LL_FLASH_SetLatency+0x24>)
 8001a0a:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <LL_FLASH_SetLatency+0x24>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f023 0207 	bic.w	r2, r3, #7
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	600b      	str	r3, [r1, #0]
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	40022000 	.word	0x40022000

08001a28 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001a2c:	4b04      	ldr	r3, [pc, #16]	; (8001a40 <LL_FLASH_GetLatency+0x18>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0307 	and.w	r3, r3, #7
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	40022000 	.word	0x40022000

08001a44 <LL_PWR_EnableBkUpAccess>:
  * @brief  Enable access to the backup domain
  * @rmtoll CR    DBP       LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a48:	4a05      	ldr	r2, [pc, #20]	; (8001a60 <LL_PWR_EnableBkUpAccess+0x1c>)
 8001a4a:	4b05      	ldr	r3, [pc, #20]	; (8001a60 <LL_PWR_EnableBkUpAccess+0x1c>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a52:	6013      	str	r3, [r2, #0]
}
 8001a54:	bf00      	nop
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	40007000 	.word	0x40007000

08001a64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a64:	b590      	push	{r4, r7, lr}
 8001a66:	b087      	sub	sp, #28
 8001a68:	af02      	add	r7, sp, #8

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001a6a:	2001      	movs	r0, #1
 8001a6c:	f7ff ffb0 	bl	80019d0 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001a70:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001a74:	f7ff ff94 	bl	80019a0 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a78:	2003      	movs	r0, #3
 8001a7a:	f7ff fd85 	bl	8001588 <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8001a7e:	f7ff fda7 	bl	80015d0 <__NVIC_GetPriorityGrouping>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2200      	movs	r2, #0
 8001a86:	210f      	movs	r1, #15
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff fdd9 	bl	8001640 <NVIC_EncodePriority>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	4619      	mov	r1, r3
 8001a92:	f04f 30ff 	mov.w	r0, #4294967295
 8001a96:	f7ff fda9 	bl	80015ec <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a9a:	f000 f8a7 	bl	8001bec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a9e:	f7ff fa3b 	bl	8000f18 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_TEMPSen_Init();
 8001aa2:	f002 fd1b 	bl	80044dc <HAL_TEMPSen_Init>
  HAL_RTC_Init();
 8001aa6:	f002 fceb 	bl	8004480 <HAL_RTC_Init>
  HAL_LCD_Init();
 8001aaa:	f002 fb0d 	bl	80040c8 <HAL_LCD_Init>
  HAL_POT_Init();
 8001aae:	f002 fca5 	bl	80043fc <HAL_POT_Init>
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_LCD_Write_AsciiString(word[w_starting],36,1);
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	2124      	movs	r1, #36	; 0x24
 8001ab6:	483e      	ldr	r0, [pc, #248]	; (8001bb0 <main+0x14c>)
 8001ab8:	f002 fc3e 	bl	8004338 <HAL_LCD_Write_AsciiString>
  LL_mDelay(1000);
 8001abc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ac0:	f002 fab2 	bl	8004028 <LL_mDelay>
  HAL_LCD_Clear();
 8001ac4:	f002 fb79 	bl	80041ba <HAL_LCD_Clear>

  while (1)
  {

	  if (inicio==1)
 8001ac8:	4b3a      	ldr	r3, [pc, #232]	; (8001bb4 <main+0x150>)
 8001aca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d14a      	bne.n	8001b68 <main+0x104>
	  	  {

		  if (IntervaloH1==Hora && IntervaloM1==Minuto && alarma1==inactive)
 8001ad2:	4b39      	ldr	r3, [pc, #228]	; (8001bb8 <main+0x154>)
 8001ad4:	781a      	ldrb	r2, [r3, #0]
 8001ad6:	4b39      	ldr	r3, [pc, #228]	; (8001bbc <main+0x158>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d112      	bne.n	8001b04 <main+0xa0>
 8001ade:	4b38      	ldr	r3, [pc, #224]	; (8001bc0 <main+0x15c>)
 8001ae0:	781a      	ldrb	r2, [r3, #0]
 8001ae2:	4b38      	ldr	r3, [pc, #224]	; (8001bc4 <main+0x160>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d10c      	bne.n	8001b04 <main+0xa0>
 8001aea:	4b37      	ldr	r3, [pc, #220]	; (8001bc8 <main+0x164>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d108      	bne.n	8001b04 <main+0xa0>
		  {
		  	  EA=E5;
 8001af2:	4b36      	ldr	r3, [pc, #216]	; (8001bcc <main+0x168>)
 8001af4:	2205      	movs	r2, #5
 8001af6:	701a      	strb	r2, [r3, #0]
		  	  alarma1=active;
 8001af8:	4b33      	ldr	r3, [pc, #204]	; (8001bc8 <main+0x164>)
 8001afa:	2201      	movs	r2, #1
 8001afc:	701a      	strb	r2, [r3, #0]
		  	  first=0;
 8001afe:	4b34      	ldr	r3, [pc, #208]	; (8001bd0 <main+0x16c>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	801a      	strh	r2, [r3, #0]
		  }
		  if (IntervaloH2==Hora && IntervaloM2==Minuto && alarma2==inactive)
 8001b04:	4b33      	ldr	r3, [pc, #204]	; (8001bd4 <main+0x170>)
 8001b06:	781a      	ldrb	r2, [r3, #0]
 8001b08:	4b2c      	ldr	r3, [pc, #176]	; (8001bbc <main+0x158>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d112      	bne.n	8001b36 <main+0xd2>
 8001b10:	4b31      	ldr	r3, [pc, #196]	; (8001bd8 <main+0x174>)
 8001b12:	781a      	ldrb	r2, [r3, #0]
 8001b14:	4b2b      	ldr	r3, [pc, #172]	; (8001bc4 <main+0x160>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d10c      	bne.n	8001b36 <main+0xd2>
 8001b1c:	4b2f      	ldr	r3, [pc, #188]	; (8001bdc <main+0x178>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d108      	bne.n	8001b36 <main+0xd2>
		  {
			  EA=E5;
 8001b24:	4b29      	ldr	r3, [pc, #164]	; (8001bcc <main+0x168>)
 8001b26:	2205      	movs	r2, #5
 8001b28:	701a      	strb	r2, [r3, #0]
		  	  alarma2=active;
 8001b2a:	4b2c      	ldr	r3, [pc, #176]	; (8001bdc <main+0x178>)
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	701a      	strb	r2, [r3, #0]
		  	  first=0;
 8001b30:	4b27      	ldr	r3, [pc, #156]	; (8001bd0 <main+0x16c>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	801a      	strh	r2, [r3, #0]
		  }
		  if (IntervaloH3 == Hora && IntervaloM3 == Minuto && alarma3==inactive)
 8001b36:	4b2a      	ldr	r3, [pc, #168]	; (8001be0 <main+0x17c>)
 8001b38:	781a      	ldrb	r2, [r3, #0]
 8001b3a:	4b20      	ldr	r3, [pc, #128]	; (8001bbc <main+0x158>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d112      	bne.n	8001b68 <main+0x104>
 8001b42:	4b28      	ldr	r3, [pc, #160]	; (8001be4 <main+0x180>)
 8001b44:	781a      	ldrb	r2, [r3, #0]
 8001b46:	4b1f      	ldr	r3, [pc, #124]	; (8001bc4 <main+0x160>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d10c      	bne.n	8001b68 <main+0x104>
 8001b4e:	4b26      	ldr	r3, [pc, #152]	; (8001be8 <main+0x184>)
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d108      	bne.n	8001b68 <main+0x104>
		  {
			  EA=E5;
 8001b56:	4b1d      	ldr	r3, [pc, #116]	; (8001bcc <main+0x168>)
 8001b58:	2205      	movs	r2, #5
 8001b5a:	701a      	strb	r2, [r3, #0]
		  	  alarma3=active;
 8001b5c:	4b22      	ldr	r3, [pc, #136]	; (8001be8 <main+0x184>)
 8001b5e:	2201      	movs	r2, #1
 8001b60:	701a      	strb	r2, [r3, #0]
		  	  first=0;
 8001b62:	4b1b      	ldr	r3, [pc, #108]	; (8001bd0 <main+0x16c>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	801a      	strh	r2, [r3, #0]
		  }


	  }
	  short btnu = MX_Joystick_Up();
 8001b68:	f7ff fa70 	bl	800104c <MX_Joystick_Up>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	81fb      	strh	r3, [r7, #14]
	 // LL_mDelay(2);
	  short btnd = MX_Joystick_Down();
 8001b70:	f7ff fa7c 	bl	800106c <MX_Joystick_Down>
 8001b74:	4603      	mov	r3, r0
 8001b76:	81bb      	strh	r3, [r7, #12]
	  //LL_mDelay(2);
	  short btnl = MX_Joystick_Left();
 8001b78:	f7ff fa9c 	bl	80010b4 <MX_Joystick_Left>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	817b      	strh	r3, [r7, #10]
	  //LL_mDelay(2);
	  short btnr = MX_Joystick_Right();
 8001b80:	f7ff fa86 	bl	8001090 <MX_Joystick_Right>
 8001b84:	4603      	mov	r3, r0
 8001b86:	813b      	strh	r3, [r7, #8]
	 // LL_mDelay(2);
	  short btnc = MX_Joystick_Center();
 8001b88:	f7ff faa6 	bl	80010d8 <MX_Joystick_Center>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	80fb      	strh	r3, [r7, #6]
	  fsm(btnu, btnd, btnl, btnr, btnc);
 8001b90:	f9b7 4008 	ldrsh.w	r4, [r7, #8]
 8001b94:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001b98:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001b9c:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8001ba0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ba4:	9300      	str	r3, [sp, #0]
 8001ba6:	4623      	mov	r3, r4
 8001ba8:	f000 fefe 	bl	80029a8 <fsm>
  {
 8001bac:	e78c      	b.n	8001ac8 <main+0x64>
 8001bae:	bf00      	nop
 8001bb0:	20000069 	.word	0x20000069
 8001bb4:	200006de 	.word	0x200006de
 8001bb8:	200006fa 	.word	0x200006fa
 8001bbc:	200006fe 	.word	0x200006fe
 8001bc0:	200006f9 	.word	0x200006f9
 8001bc4:	200006f5 	.word	0x200006f5
 8001bc8:	200006f6 	.word	0x200006f6
 8001bcc:	200006d8 	.word	0x200006d8
 8001bd0:	200006dc 	.word	0x200006dc
 8001bd4:	200006fc 	.word	0x200006fc
 8001bd8:	200006fd 	.word	0x200006fd
 8001bdc:	200006ff 	.word	0x200006ff
 8001be0:	20000700 	.word	0x20000700
 8001be4:	200006f7 	.word	0x200006f7
 8001be8:	200006f8 	.word	0x200006f8

08001bec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8001bf0:	2002      	movs	r0, #2
 8001bf2:	f7ff ff05 	bl	8001a00 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8001bf6:	bf00      	nop
 8001bf8:	f7ff ff16 	bl	8001a28 <LL_FLASH_GetLatency>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d1fa      	bne.n	8001bf8 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 8001c02:	f7ff fd4f 	bl	80016a4 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001c06:	bf00      	nop
 8001c08:	f7ff fd5c 	bl	80016c4 <LL_RCC_HSI_IsReady>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d1fa      	bne.n	8001c08 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8001c12:	2010      	movs	r0, #16
 8001c14:	f7ff fd68 	bl	80016e8 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_LSI_Enable();
 8001c18:	f7ff fd7c 	bl	8001714 <LL_RCC_LSI_Enable>

   /* Wait till LSI is ready */
  while(LL_RCC_LSI_IsReady() != 1)
 8001c1c:	bf00      	nop
 8001c1e:	f7ff fd89 	bl	8001734 <LL_RCC_LSI_IsReady>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d1fa      	bne.n	8001c1e <SystemClock_Config+0x32>
  {

  }
  LL_PWR_EnableBkUpAccess();
 8001c28:	f7ff ff0c 	bl	8001a44 <LL_PWR_EnableBkUpAccess>
  if(LL_RCC_GetRTCClockSource() != LL_RCC_RTC_CLKSOURCE_LSI)
 8001c2c:	f7ff fe32 	bl	8001894 <LL_RCC_GetRTCClockSource>
 8001c30:	4603      	mov	r3, r0
 8001c32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c36:	d007      	beq.n	8001c48 <SystemClock_Config+0x5c>
  {
    LL_RCC_ForceBackupDomainReset();
 8001c38:	f7ff fe4a 	bl	80018d0 <LL_RCC_ForceBackupDomainReset>
    LL_RCC_ReleaseBackupDomainReset();
 8001c3c:	f7ff fe58 	bl	80018f0 <LL_RCC_ReleaseBackupDomainReset>
    LL_RCC_SetRTCClockSource(LL_RCC_RTC_CLKSOURCE_LSI);
 8001c40:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001c44:	f7ff fe12 	bl	800186c <LL_RCC_SetRTCClockSource>
  }
  LL_RCC_EnableRTC();
 8001c48:	f7ff fe32 	bl	80018b0 <LL_RCC_EnableRTC>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI_DIV_2, LL_RCC_PLL_MUL_16);
 8001c4c:	f44f 1160 	mov.w	r1, #3670016	; 0x380000
 8001c50:	2000      	movs	r0, #0
 8001c52:	f7ff fe81 	bl	8001958 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8001c56:	f7ff fe5b 	bl	8001910 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001c5a:	bf00      	nop
 8001c5c:	f7ff fe68 	bl	8001930 <LL_RCC_PLL_IsReady>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d1fa      	bne.n	8001c5c <SystemClock_Config+0x70>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001c66:	2000      	movs	r0, #0
 8001c68:	f7ff fd98 	bl	800179c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8001c6c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001c70:	f7ff fda8 	bl	80017c4 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_16);
 8001c74:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8001c78:	f7ff fdb8 	bl	80017ec <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001c7c:	2002      	movs	r0, #2
 8001c7e:	f7ff fd6b 	bl	8001758 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001c82:	bf00      	nop
 8001c84:	f7ff fd7c 	bl	8001780 <LL_RCC_GetSysClkSource>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b08      	cmp	r3, #8
 8001c8c:	d1fa      	bne.n	8001c84 <SystemClock_Config+0x98>
  {

  }
  LL_Init1msTick(64000000);
 8001c8e:	4808      	ldr	r0, [pc, #32]	; (8001cb0 <SystemClock_Config+0xc4>)
 8001c90:	f002 f9bc 	bl	800400c <LL_Init1msTick>
  LL_SetSystemCoreClock(64000000);
 8001c94:	4806      	ldr	r0, [pc, #24]	; (8001cb0 <SystemClock_Config+0xc4>)
 8001c96:	f002 f9eb 	bl	8004070 <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 8001c9a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001c9e:	f7ff fdb9 	bl	8001814 <LL_RCC_SetI2CClockSource>
  LL_RCC_SetADCClockSource(LL_RCC_ADC12_CLKSRC_PLL_DIV_1);
 8001ca2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001ca6:	f7ff fdcd 	bl	8001844 <LL_RCC_SetADCClockSource>
}
 8001caa:	bf00      	nop
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	03d09000 	.word	0x03d09000

08001cb4 <estado_Anterior>:

/* USER CODE BEGIN 4 */
void estado_Anterior(short btnU, short btnD, short btnL, short btnR, short btnC){
 8001cb4:	b490      	push	{r4, r7}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4604      	mov	r4, r0
 8001cbc:	4608      	mov	r0, r1
 8001cbe:	4611      	mov	r1, r2
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	4623      	mov	r3, r4
 8001cc4:	80fb      	strh	r3, [r7, #6]
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	80bb      	strh	r3, [r7, #4]
 8001cca:	460b      	mov	r3, r1
 8001ccc:	807b      	strh	r3, [r7, #2]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	803b      	strh	r3, [r7, #0]
	btnUa = btnU;
 8001cd2:	4a0a      	ldr	r2, [pc, #40]	; (8001cfc <estado_Anterior+0x48>)
 8001cd4:	88fb      	ldrh	r3, [r7, #6]
 8001cd6:	8013      	strh	r3, [r2, #0]
	btnDa = btnD;
 8001cd8:	4a09      	ldr	r2, [pc, #36]	; (8001d00 <estado_Anterior+0x4c>)
 8001cda:	88bb      	ldrh	r3, [r7, #4]
 8001cdc:	8013      	strh	r3, [r2, #0]
	btnLa = btnL;
 8001cde:	4a09      	ldr	r2, [pc, #36]	; (8001d04 <estado_Anterior+0x50>)
 8001ce0:	887b      	ldrh	r3, [r7, #2]
 8001ce2:	8013      	strh	r3, [r2, #0]
	btnRa = btnR;
 8001ce4:	4a08      	ldr	r2, [pc, #32]	; (8001d08 <estado_Anterior+0x54>)
 8001ce6:	883b      	ldrh	r3, [r7, #0]
 8001ce8:	8013      	strh	r3, [r2, #0]
	btnCa = btnC;
 8001cea:	4a08      	ldr	r2, [pc, #32]	; (8001d0c <estado_Anterior+0x58>)
 8001cec:	8a3b      	ldrh	r3, [r7, #16]
 8001cee:	8013      	strh	r3, [r2, #0]
}
 8001cf0:	bf00      	nop
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bc90      	pop	{r4, r7}
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	200006e8 	.word	0x200006e8
 8001d00:	200006e4 	.word	0x200006e4
 8001d04:	200006e6 	.word	0x200006e6
 8001d08:	200006e0 	.word	0x200006e0
 8001d0c:	200006ec 	.word	0x200006ec

08001d10 <EDO_0>:

// Funciones por estado
void EDO_0(short btnU, short btnD, short btnL, short btnR, short btnC){
 8001d10:	b590      	push	{r4, r7, lr}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af02      	add	r7, sp, #8
 8001d16:	4604      	mov	r4, r0
 8001d18:	4608      	mov	r0, r1
 8001d1a:	4611      	mov	r1, r2
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	4623      	mov	r3, r4
 8001d20:	80fb      	strh	r3, [r7, #6]
 8001d22:	4603      	mov	r3, r0
 8001d24:	80bb      	strh	r3, [r7, #4]
 8001d26:	460b      	mov	r3, r1
 8001d28:	807b      	strh	r3, [r7, #2]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	803b      	strh	r3, [r7, #0]
	// Configuracion de reloj
	if(first == 0){
 8001d2e:	4b4d      	ldr	r3, [pc, #308]	; (8001e64 <EDO_0+0x154>)
 8001d30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d116      	bne.n	8001d66 <EDO_0+0x56>
		// Mostrado de valores fijos
		HAL_LCD_Write_AsciiString(word[configuracion],24,0);
 8001d38:	2200      	movs	r2, #0
 8001d3a:	2118      	movs	r1, #24
 8001d3c:	484a      	ldr	r0, [pc, #296]	; (8001e68 <EDO_0+0x158>)
 8001d3e:	f002 fafb 	bl	8004338 <HAL_LCD_Write_AsciiString>
		HAL_LCD_Write_AsciiString(word[reloj],48,1);
 8001d42:	2201      	movs	r2, #1
 8001d44:	2130      	movs	r1, #48	; 0x30
 8001d46:	4849      	ldr	r0, [pc, #292]	; (8001e6c <EDO_0+0x15c>)
 8001d48:	f002 faf6 	bl	8004338 <HAL_LCD_Write_AsciiString>
		HAL_LCD_Write_ascii(':',60,2);
 8001d4c:	2202      	movs	r2, #2
 8001d4e:	213c      	movs	r1, #60	; 0x3c
 8001d50:	203a      	movs	r0, #58	; 0x3a
 8001d52:	f002 fa89 	bl	8004268 <HAL_LCD_Write_ascii>
		HAL_LCD_Write_AsciiString(word[aceptar],36,3);
 8001d56:	2203      	movs	r2, #3
 8001d58:	2124      	movs	r1, #36	; 0x24
 8001d5a:	4845      	ldr	r0, [pc, #276]	; (8001e70 <EDO_0+0x160>)
 8001d5c:	f002 faec 	bl	8004338 <HAL_LCD_Write_AsciiString>
		first = 1;
 8001d60:	4b40      	ldr	r3, [pc, #256]	; (8001e64 <EDO_0+0x154>)
 8001d62:	2201      	movs	r2, #1
 8001d64:	801a      	strh	r2, [r3, #0]
	}
	Horas = HAL_POT_Percentage(POT1_Channel)*23/100;
 8001d66:	2000      	movs	r0, #0
 8001d68:	f002 fb6a 	bl	8004440 <HAL_POT_Percentage>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	461a      	mov	r2, r3
 8001d70:	4613      	mov	r3, r2
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	4413      	add	r3, r2
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	1a9b      	subs	r3, r3, r2
 8001d7a:	4a3e      	ldr	r2, [pc, #248]	; (8001e74 <EDO_0+0x164>)
 8001d7c:	fb82 1203 	smull	r1, r2, r2, r3
 8001d80:	1152      	asrs	r2, r2, #5
 8001d82:	17db      	asrs	r3, r3, #31
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	b2da      	uxtb	r2, r3
 8001d88:	4b3b      	ldr	r3, [pc, #236]	; (8001e78 <EDO_0+0x168>)
 8001d8a:	701a      	strb	r2, [r3, #0]
	Minutos = HAL_POT_Percentage(POT2_Channel)*59/100;
 8001d8c:	2001      	movs	r0, #1
 8001d8e:	f002 fb57 	bl	8004440 <HAL_POT_Percentage>
 8001d92:	4603      	mov	r3, r0
 8001d94:	461a      	mov	r2, r3
 8001d96:	4613      	mov	r3, r2
 8001d98:	011b      	lsls	r3, r3, #4
 8001d9a:	1a9b      	subs	r3, r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	1a9b      	subs	r3, r3, r2
 8001da0:	4a34      	ldr	r2, [pc, #208]	; (8001e74 <EDO_0+0x164>)
 8001da2:	fb82 1203 	smull	r1, r2, r2, r3
 8001da6:	1152      	asrs	r2, r2, #5
 8001da8:	17db      	asrs	r3, r3, #31
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	b2da      	uxtb	r2, r3
 8001dae:	4b33      	ldr	r3, [pc, #204]	; (8001e7c <EDO_0+0x16c>)
 8001db0:	701a      	strb	r2, [r3, #0]
	HAL_LCD_Write_Number(&Horas,48,2);
 8001db2:	2202      	movs	r2, #2
 8001db4:	2130      	movs	r1, #48	; 0x30
 8001db6:	4830      	ldr	r0, [pc, #192]	; (8001e78 <EDO_0+0x168>)
 8001db8:	f002 faee 	bl	8004398 <HAL_LCD_Write_Number>
	HAL_LCD_Write_Number(&Minutos,67,2);
 8001dbc:	2202      	movs	r2, #2
 8001dbe:	2143      	movs	r1, #67	; 0x43
 8001dc0:	482e      	ldr	r0, [pc, #184]	; (8001e7c <EDO_0+0x16c>)
 8001dc2:	f002 fae9 	bl	8004398 <HAL_LCD_Write_Number>
	if(btnC == 1 && btnC != btnCa && inicio == 0){
 8001dc6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d11c      	bne.n	8001e08 <EDO_0+0xf8>
 8001dce:	4b2c      	ldr	r3, [pc, #176]	; (8001e80 <EDO_0+0x170>)
 8001dd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dd4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d015      	beq.n	8001e08 <EDO_0+0xf8>
 8001ddc:	4b29      	ldr	r3, [pc, #164]	; (8001e84 <EDO_0+0x174>)
 8001dde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d110      	bne.n	8001e08 <EDO_0+0xf8>
		// Cambio de estado
		EA = E1;
 8001de6:	4b28      	ldr	r3, [pc, #160]	; (8001e88 <EDO_0+0x178>)
 8001de8:	2201      	movs	r2, #1
 8001dea:	701a      	strb	r2, [r3, #0]
		first = 0;
 8001dec:	4b1d      	ldr	r3, [pc, #116]	; (8001e64 <EDO_0+0x154>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	801a      	strh	r2, [r3, #0]
		HAL_LCD_Clear();
 8001df2:	f002 f9e2 	bl	80041ba <HAL_LCD_Clear>
		HAL_Set_ActualTime(Horas,Minutos,0);
 8001df6:	4b20      	ldr	r3, [pc, #128]	; (8001e78 <EDO_0+0x168>)
 8001df8:	7818      	ldrb	r0, [r3, #0]
 8001dfa:	4b20      	ldr	r3, [pc, #128]	; (8001e7c <EDO_0+0x16c>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	4619      	mov	r1, r3
 8001e02:	f002 fb55 	bl	80044b0 <HAL_Set_ActualTime>
 8001e06:	e01a      	b.n	8001e3e <EDO_0+0x12e>
	}
	else if(btnC == 1 && btnC != btnCa){
 8001e08:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d116      	bne.n	8001e3e <EDO_0+0x12e>
 8001e10:	4b1b      	ldr	r3, [pc, #108]	; (8001e80 <EDO_0+0x170>)
 8001e12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e16:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d00f      	beq.n	8001e3e <EDO_0+0x12e>
		// Cambio de estado
		EA = E3;
 8001e1e:	4b1a      	ldr	r3, [pc, #104]	; (8001e88 <EDO_0+0x178>)
 8001e20:	2203      	movs	r2, #3
 8001e22:	701a      	strb	r2, [r3, #0]
		first = 0;
 8001e24:	4b0f      	ldr	r3, [pc, #60]	; (8001e64 <EDO_0+0x154>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	801a      	strh	r2, [r3, #0]
		HAL_LCD_Clear();
 8001e2a:	f002 f9c6 	bl	80041ba <HAL_LCD_Clear>
		HAL_Set_ActualTime(Horas,Minutos,0);
 8001e2e:	4b12      	ldr	r3, [pc, #72]	; (8001e78 <EDO_0+0x168>)
 8001e30:	7818      	ldrb	r0, [r3, #0]
 8001e32:	4b12      	ldr	r3, [pc, #72]	; (8001e7c <EDO_0+0x16c>)
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	2200      	movs	r2, #0
 8001e38:	4619      	mov	r1, r3
 8001e3a:	f002 fb39 	bl	80044b0 <HAL_Set_ActualTime>
	}
	estado_Anterior(btnU, btnD, btnL, btnR, btnC);
 8001e3e:	f9b7 4000 	ldrsh.w	r4, [r7]
 8001e42:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001e46:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001e4a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001e4e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001e52:	9300      	str	r3, [sp, #0]
 8001e54:	4623      	mov	r3, r4
 8001e56:	f7ff ff2d 	bl	8001cb4 <estado_Anterior>
}
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd90      	pop	{r4, r7, pc}
 8001e62:	bf00      	nop
 8001e64:	200006dc 	.word	0x200006dc
 8001e68:	20000000 	.word	0x20000000
 8001e6c:	20000015 	.word	0x20000015
 8001e70:	2000002a 	.word	0x2000002a
 8001e74:	51eb851f 	.word	0x51eb851f
 8001e78:	20000701 	.word	0x20000701
 8001e7c:	200006f4 	.word	0x200006f4
 8001e80:	200006ec 	.word	0x200006ec
 8001e84:	200006de 	.word	0x200006de
 8001e88:	200006d8 	.word	0x200006d8

08001e8c <EDO_1>:

void EDO_1(short btnU, short btnD, short btnL, short btnR, short btnC){
 8001e8c:	b590      	push	{r4, r7, lr}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af02      	add	r7, sp, #8
 8001e92:	4604      	mov	r4, r0
 8001e94:	4608      	mov	r0, r1
 8001e96:	4611      	mov	r1, r2
 8001e98:	461a      	mov	r2, r3
 8001e9a:	4623      	mov	r3, r4
 8001e9c:	80fb      	strh	r3, [r7, #6]
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	80bb      	strh	r3, [r7, #4]
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	807b      	strh	r3, [r7, #2]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	803b      	strh	r3, [r7, #0]
	// Configuracion pastillas
	if(first == 0){
 8001eaa:	4bbc      	ldr	r3, [pc, #752]	; (800219c <EDO_1+0x310>)
 8001eac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d125      	bne.n	8001f00 <EDO_1+0x74>
		// Mostrado de valores fijos
		HAL_LCD_Write_AsciiString(word[pastillasABC],18,0);
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	2112      	movs	r1, #18
 8001eb8:	48b9      	ldr	r0, [pc, #740]	; (80021a0 <EDO_1+0x314>)
 8001eba:	f002 fa3d 	bl	8004338 <HAL_LCD_Write_AsciiString>
		HAL_LCD_Write_AsciiString(word[w_timeInterval],36,1);
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	2124      	movs	r1, #36	; 0x24
 8001ec2:	48b8      	ldr	r0, [pc, #736]	; (80021a4 <EDO_1+0x318>)
 8001ec4:	f002 fa38 	bl	8004338 <HAL_LCD_Write_AsciiString>
		HAL_LCD_Write_ascii(':',60,2);
 8001ec8:	2202      	movs	r2, #2
 8001eca:	213c      	movs	r1, #60	; 0x3c
 8001ecc:	203a      	movs	r0, #58	; 0x3a
 8001ece:	f002 f9cb 	bl	8004268 <HAL_LCD_Write_ascii>
		HAL_LCD_Write_AsciiString(word[w_accept],36,3);
 8001ed2:	2203      	movs	r2, #3
 8001ed4:	2124      	movs	r1, #36	; 0x24
 8001ed6:	48b4      	ldr	r0, [pc, #720]	; (80021a8 <EDO_1+0x31c>)
 8001ed8:	f002 fa2e 	bl	8004338 <HAL_LCD_Write_AsciiString>
		// > en A la primera vez
		HAL_LCD_Write_ascii('>',72,0);
 8001edc:	2200      	movs	r2, #0
 8001ede:	2148      	movs	r1, #72	; 0x48
 8001ee0:	203e      	movs	r0, #62	; 0x3e
 8001ee2:	f002 f9c1 	bl	8004268 <HAL_LCD_Write_ascii>
		HAL_LCD_Write_ascii(' ',84,0);
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	2154      	movs	r1, #84	; 0x54
 8001eea:	2020      	movs	r0, #32
 8001eec:	f002 f9bc 	bl	8004268 <HAL_LCD_Write_ascii>
		HAL_LCD_Write_ascii(' ',96,0);
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	2160      	movs	r1, #96	; 0x60
 8001ef4:	2020      	movs	r0, #32
 8001ef6:	f002 f9b7 	bl	8004268 <HAL_LCD_Write_ascii>
		first = 1;
 8001efa:	4ba8      	ldr	r3, [pc, #672]	; (800219c <EDO_1+0x310>)
 8001efc:	2201      	movs	r2, #1
 8001efe:	801a      	strh	r2, [r3, #0]
	}
	// Obtencion horas y minutos
	Horas = HAL_POT_Percentage(POT1_Channel)*23/100;
 8001f00:	2000      	movs	r0, #0
 8001f02:	f002 fa9d 	bl	8004440 <HAL_POT_Percentage>
 8001f06:	4603      	mov	r3, r0
 8001f08:	461a      	mov	r2, r3
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	4413      	add	r3, r2
 8001f10:	00db      	lsls	r3, r3, #3
 8001f12:	1a9b      	subs	r3, r3, r2
 8001f14:	4aa5      	ldr	r2, [pc, #660]	; (80021ac <EDO_1+0x320>)
 8001f16:	fb82 1203 	smull	r1, r2, r2, r3
 8001f1a:	1152      	asrs	r2, r2, #5
 8001f1c:	17db      	asrs	r3, r3, #31
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	b2da      	uxtb	r2, r3
 8001f22:	4ba3      	ldr	r3, [pc, #652]	; (80021b0 <EDO_1+0x324>)
 8001f24:	701a      	strb	r2, [r3, #0]
	Minutos = HAL_POT_Percentage(POT2_Channel)*59/100;
 8001f26:	2001      	movs	r0, #1
 8001f28:	f002 fa8a 	bl	8004440 <HAL_POT_Percentage>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	461a      	mov	r2, r3
 8001f30:	4613      	mov	r3, r2
 8001f32:	011b      	lsls	r3, r3, #4
 8001f34:	1a9b      	subs	r3, r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	1a9b      	subs	r3, r3, r2
 8001f3a:	4a9c      	ldr	r2, [pc, #624]	; (80021ac <EDO_1+0x320>)
 8001f3c:	fb82 1203 	smull	r1, r2, r2, r3
 8001f40:	1152      	asrs	r2, r2, #5
 8001f42:	17db      	asrs	r3, r3, #31
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	b2da      	uxtb	r2, r3
 8001f48:	4b9a      	ldr	r3, [pc, #616]	; (80021b4 <EDO_1+0x328>)
 8001f4a:	701a      	strb	r2, [r3, #0]
	// Mostrado valor seleccionado
	HAL_LCD_Write_Number(&Horas,48,2);
 8001f4c:	2202      	movs	r2, #2
 8001f4e:	2130      	movs	r1, #48	; 0x30
 8001f50:	4897      	ldr	r0, [pc, #604]	; (80021b0 <EDO_1+0x324>)
 8001f52:	f002 fa21 	bl	8004398 <HAL_LCD_Write_Number>
	HAL_LCD_Write_Number(&Minutos,67,2);
 8001f56:	2202      	movs	r2, #2
 8001f58:	2143      	movs	r1, #67	; 0x43
 8001f5a:	4896      	ldr	r0, [pc, #600]	; (80021b4 <EDO_1+0x328>)
 8001f5c:	f002 fa1c 	bl	8004398 <HAL_LCD_Write_Number>

	if(Puntero == 0){
 8001f60:	4b95      	ldr	r3, [pc, #596]	; (80021b8 <EDO_1+0x32c>)
 8001f62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d108      	bne.n	8001f7c <EDO_1+0xf0>
		// Si el puntero esta en A carga los valores a A
		IntervaloH1 = Horas;
 8001f6a:	4b91      	ldr	r3, [pc, #580]	; (80021b0 <EDO_1+0x324>)
 8001f6c:	781a      	ldrb	r2, [r3, #0]
 8001f6e:	4b93      	ldr	r3, [pc, #588]	; (80021bc <EDO_1+0x330>)
 8001f70:	701a      	strb	r2, [r3, #0]
		IntervaloM1 = Minutos;
 8001f72:	4b90      	ldr	r3, [pc, #576]	; (80021b4 <EDO_1+0x328>)
 8001f74:	781a      	ldrb	r2, [r3, #0]
 8001f76:	4b92      	ldr	r3, [pc, #584]	; (80021c0 <EDO_1+0x334>)
 8001f78:	701a      	strb	r2, [r3, #0]
 8001f7a:	e01a      	b.n	8001fb2 <EDO_1+0x126>
	}
	else if(Puntero == 1){
 8001f7c:	4b8e      	ldr	r3, [pc, #568]	; (80021b8 <EDO_1+0x32c>)
 8001f7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d108      	bne.n	8001f98 <EDO_1+0x10c>
		// Si el puntero esta en B carga los valores a B
		IntervaloH2 = Horas;
 8001f86:	4b8a      	ldr	r3, [pc, #552]	; (80021b0 <EDO_1+0x324>)
 8001f88:	781a      	ldrb	r2, [r3, #0]
 8001f8a:	4b8e      	ldr	r3, [pc, #568]	; (80021c4 <EDO_1+0x338>)
 8001f8c:	701a      	strb	r2, [r3, #0]
		IntervaloM2 = Minutos;
 8001f8e:	4b89      	ldr	r3, [pc, #548]	; (80021b4 <EDO_1+0x328>)
 8001f90:	781a      	ldrb	r2, [r3, #0]
 8001f92:	4b8d      	ldr	r3, [pc, #564]	; (80021c8 <EDO_1+0x33c>)
 8001f94:	701a      	strb	r2, [r3, #0]
 8001f96:	e00c      	b.n	8001fb2 <EDO_1+0x126>
	}
	else if(Puntero == 2){
 8001f98:	4b87      	ldr	r3, [pc, #540]	; (80021b8 <EDO_1+0x32c>)
 8001f9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d107      	bne.n	8001fb2 <EDO_1+0x126>
		// Si el puntero esta en C carga los valores a C
		IntervaloH3 = Horas;
 8001fa2:	4b83      	ldr	r3, [pc, #524]	; (80021b0 <EDO_1+0x324>)
 8001fa4:	781a      	ldrb	r2, [r3, #0]
 8001fa6:	4b89      	ldr	r3, [pc, #548]	; (80021cc <EDO_1+0x340>)
 8001fa8:	701a      	strb	r2, [r3, #0]
		IntervaloM3 = Minutos;
 8001faa:	4b82      	ldr	r3, [pc, #520]	; (80021b4 <EDO_1+0x328>)
 8001fac:	781a      	ldrb	r2, [r3, #0]
 8001fae:	4b88      	ldr	r3, [pc, #544]	; (80021d0 <EDO_1+0x344>)
 8001fb0:	701a      	strb	r2, [r3, #0]
	}
	// Puntero
	if(btnL == 1 && btnL != btnLa && btnR == 0){
 8001fb2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d156      	bne.n	8002068 <EDO_1+0x1dc>
 8001fba:	4b86      	ldr	r3, [pc, #536]	; (80021d4 <EDO_1+0x348>)
 8001fbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fc0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d04f      	beq.n	8002068 <EDO_1+0x1dc>
 8001fc8:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d14b      	bne.n	8002068 <EDO_1+0x1dc>
		Puntero -= 1;
 8001fd0:	4b79      	ldr	r3, [pc, #484]	; (80021b8 <EDO_1+0x32c>)
 8001fd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	b21a      	sxth	r2, r3
 8001fde:	4b76      	ldr	r3, [pc, #472]	; (80021b8 <EDO_1+0x32c>)
 8001fe0:	801a      	strh	r2, [r3, #0]
		if (Puntero < 0)
 8001fe2:	4b75      	ldr	r3, [pc, #468]	; (80021b8 <EDO_1+0x32c>)
 8001fe4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	da02      	bge.n	8001ff2 <EDO_1+0x166>
			Puntero = 2;
 8001fec:	4b72      	ldr	r3, [pc, #456]	; (80021b8 <EDO_1+0x32c>)
 8001fee:	2202      	movs	r2, #2
 8001ff0:	801a      	strh	r2, [r3, #0]
		switch (Puntero){
 8001ff2:	4b71      	ldr	r3, [pc, #452]	; (80021b8 <EDO_1+0x32c>)
 8001ff4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d014      	beq.n	8002026 <EDO_1+0x19a>
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d022      	beq.n	8002046 <EDO_1+0x1ba>
 8002000:	2b00      	cmp	r3, #0
 8002002:	d000      	beq.n	8002006 <EDO_1+0x17a>
				HAL_LCD_Write_ascii(' ',72,0);
				HAL_LCD_Write_ascii(' ',84,0);
				HAL_LCD_Write_ascii('>',96,0);
				break;
		}
	}
 8002004:	e089      	b.n	800211a <EDO_1+0x28e>
				HAL_LCD_Write_ascii('>',72,0);
 8002006:	2200      	movs	r2, #0
 8002008:	2148      	movs	r1, #72	; 0x48
 800200a:	203e      	movs	r0, #62	; 0x3e
 800200c:	f002 f92c 	bl	8004268 <HAL_LCD_Write_ascii>
				HAL_LCD_Write_ascii(' ',84,0);
 8002010:	2200      	movs	r2, #0
 8002012:	2154      	movs	r1, #84	; 0x54
 8002014:	2020      	movs	r0, #32
 8002016:	f002 f927 	bl	8004268 <HAL_LCD_Write_ascii>
				HAL_LCD_Write_ascii(' ',96,0);
 800201a:	2200      	movs	r2, #0
 800201c:	2160      	movs	r1, #96	; 0x60
 800201e:	2020      	movs	r0, #32
 8002020:	f002 f922 	bl	8004268 <HAL_LCD_Write_ascii>
				break;
 8002024:	e01f      	b.n	8002066 <EDO_1+0x1da>
				HAL_LCD_Write_ascii(' ',72,0);
 8002026:	2200      	movs	r2, #0
 8002028:	2148      	movs	r1, #72	; 0x48
 800202a:	2020      	movs	r0, #32
 800202c:	f002 f91c 	bl	8004268 <HAL_LCD_Write_ascii>
				HAL_LCD_Write_ascii('>',84,0);
 8002030:	2200      	movs	r2, #0
 8002032:	2154      	movs	r1, #84	; 0x54
 8002034:	203e      	movs	r0, #62	; 0x3e
 8002036:	f002 f917 	bl	8004268 <HAL_LCD_Write_ascii>
				HAL_LCD_Write_ascii(' ',96,0);
 800203a:	2200      	movs	r2, #0
 800203c:	2160      	movs	r1, #96	; 0x60
 800203e:	2020      	movs	r0, #32
 8002040:	f002 f912 	bl	8004268 <HAL_LCD_Write_ascii>
				break;
 8002044:	e00f      	b.n	8002066 <EDO_1+0x1da>
				HAL_LCD_Write_ascii(' ',72,0);
 8002046:	2200      	movs	r2, #0
 8002048:	2148      	movs	r1, #72	; 0x48
 800204a:	2020      	movs	r0, #32
 800204c:	f002 f90c 	bl	8004268 <HAL_LCD_Write_ascii>
				HAL_LCD_Write_ascii(' ',84,0);
 8002050:	2200      	movs	r2, #0
 8002052:	2154      	movs	r1, #84	; 0x54
 8002054:	2020      	movs	r0, #32
 8002056:	f002 f907 	bl	8004268 <HAL_LCD_Write_ascii>
				HAL_LCD_Write_ascii('>',96,0);
 800205a:	2200      	movs	r2, #0
 800205c:	2160      	movs	r1, #96	; 0x60
 800205e:	203e      	movs	r0, #62	; 0x3e
 8002060:	f002 f902 	bl	8004268 <HAL_LCD_Write_ascii>
				break;
 8002064:	bf00      	nop
	}
 8002066:	e058      	b.n	800211a <EDO_1+0x28e>
	else if(btnR == 1 && btnR != btnRa && btnL == 0){
 8002068:	f9b7 3000 	ldrsh.w	r3, [r7]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d154      	bne.n	800211a <EDO_1+0x28e>
 8002070:	4b59      	ldr	r3, [pc, #356]	; (80021d8 <EDO_1+0x34c>)
 8002072:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002076:	f9b7 2000 	ldrsh.w	r2, [r7]
 800207a:	429a      	cmp	r2, r3
 800207c:	d04d      	beq.n	800211a <EDO_1+0x28e>
 800207e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d149      	bne.n	800211a <EDO_1+0x28e>
		Puntero += 1;
 8002086:	4b4c      	ldr	r3, [pc, #304]	; (80021b8 <EDO_1+0x32c>)
 8002088:	f9b3 3000 	ldrsh.w	r3, [r3]
 800208c:	b29b      	uxth	r3, r3
 800208e:	3301      	adds	r3, #1
 8002090:	b29b      	uxth	r3, r3
 8002092:	b21a      	sxth	r2, r3
 8002094:	4b48      	ldr	r3, [pc, #288]	; (80021b8 <EDO_1+0x32c>)
 8002096:	801a      	strh	r2, [r3, #0]
		if (Puntero > 2)
 8002098:	4b47      	ldr	r3, [pc, #284]	; (80021b8 <EDO_1+0x32c>)
 800209a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800209e:	2b02      	cmp	r3, #2
 80020a0:	dd02      	ble.n	80020a8 <EDO_1+0x21c>
			Puntero = 0;
 80020a2:	4b45      	ldr	r3, [pc, #276]	; (80021b8 <EDO_1+0x32c>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	801a      	strh	r2, [r3, #0]
		switch (Puntero){
 80020a8:	4b43      	ldr	r3, [pc, #268]	; (80021b8 <EDO_1+0x32c>)
 80020aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d013      	beq.n	80020da <EDO_1+0x24e>
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d021      	beq.n	80020fa <EDO_1+0x26e>
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d12f      	bne.n	800211a <EDO_1+0x28e>
			case 0:
				HAL_LCD_Write_ascii('>',72,0);
 80020ba:	2200      	movs	r2, #0
 80020bc:	2148      	movs	r1, #72	; 0x48
 80020be:	203e      	movs	r0, #62	; 0x3e
 80020c0:	f002 f8d2 	bl	8004268 <HAL_LCD_Write_ascii>
				HAL_LCD_Write_ascii(' ',84,0);
 80020c4:	2200      	movs	r2, #0
 80020c6:	2154      	movs	r1, #84	; 0x54
 80020c8:	2020      	movs	r0, #32
 80020ca:	f002 f8cd 	bl	8004268 <HAL_LCD_Write_ascii>
				HAL_LCD_Write_ascii(' ',96,0);
 80020ce:	2200      	movs	r2, #0
 80020d0:	2160      	movs	r1, #96	; 0x60
 80020d2:	2020      	movs	r0, #32
 80020d4:	f002 f8c8 	bl	8004268 <HAL_LCD_Write_ascii>
				break;
 80020d8:	e01f      	b.n	800211a <EDO_1+0x28e>
			case 1:
				HAL_LCD_Write_ascii(' ',72,0);
 80020da:	2200      	movs	r2, #0
 80020dc:	2148      	movs	r1, #72	; 0x48
 80020de:	2020      	movs	r0, #32
 80020e0:	f002 f8c2 	bl	8004268 <HAL_LCD_Write_ascii>
				HAL_LCD_Write_ascii('>',84,0);
 80020e4:	2200      	movs	r2, #0
 80020e6:	2154      	movs	r1, #84	; 0x54
 80020e8:	203e      	movs	r0, #62	; 0x3e
 80020ea:	f002 f8bd 	bl	8004268 <HAL_LCD_Write_ascii>
				HAL_LCD_Write_ascii(' ',96,0);
 80020ee:	2200      	movs	r2, #0
 80020f0:	2160      	movs	r1, #96	; 0x60
 80020f2:	2020      	movs	r0, #32
 80020f4:	f002 f8b8 	bl	8004268 <HAL_LCD_Write_ascii>
				break;
 80020f8:	e00f      	b.n	800211a <EDO_1+0x28e>
			case 2:
				HAL_LCD_Write_ascii(' ',72,0);
 80020fa:	2200      	movs	r2, #0
 80020fc:	2148      	movs	r1, #72	; 0x48
 80020fe:	2020      	movs	r0, #32
 8002100:	f002 f8b2 	bl	8004268 <HAL_LCD_Write_ascii>
				HAL_LCD_Write_ascii(' ',84,0);
 8002104:	2200      	movs	r2, #0
 8002106:	2154      	movs	r1, #84	; 0x54
 8002108:	2020      	movs	r0, #32
 800210a:	f002 f8ad 	bl	8004268 <HAL_LCD_Write_ascii>
				HAL_LCD_Write_ascii('>',96,0);
 800210e:	2200      	movs	r2, #0
 8002110:	2160      	movs	r1, #96	; 0x60
 8002112:	203e      	movs	r0, #62	; 0x3e
 8002114:	f002 f8a8 	bl	8004268 <HAL_LCD_Write_ascii>
				break;
 8002118:	bf00      	nop
		}
	}


	// Aceptar
	if(btnC == 1 && btnC != btnCa && inicio == 0){
 800211a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d117      	bne.n	8002152 <EDO_1+0x2c6>
 8002122:	4b2e      	ldr	r3, [pc, #184]	; (80021dc <EDO_1+0x350>)
 8002124:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002128:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800212c:	429a      	cmp	r2, r3
 800212e:	d010      	beq.n	8002152 <EDO_1+0x2c6>
 8002130:	4b2b      	ldr	r3, [pc, #172]	; (80021e0 <EDO_1+0x354>)
 8002132:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d10b      	bne.n	8002152 <EDO_1+0x2c6>
		// Cambio de estado
		EA = E2;
 800213a:	4b2a      	ldr	r3, [pc, #168]	; (80021e4 <EDO_1+0x358>)
 800213c:	2202      	movs	r2, #2
 800213e:	701a      	strb	r2, [r3, #0]
		first = 0;
 8002140:	4b16      	ldr	r3, [pc, #88]	; (800219c <EDO_1+0x310>)
 8002142:	2200      	movs	r2, #0
 8002144:	801a      	strh	r2, [r3, #0]
		inicio = 1; //cambio, se setea en 0 cuando entramos a imprimir
 8002146:	4b26      	ldr	r3, [pc, #152]	; (80021e0 <EDO_1+0x354>)
 8002148:	2201      	movs	r2, #1
 800214a:	801a      	strh	r2, [r3, #0]
		HAL_LCD_Clear();
 800214c:	f002 f835 	bl	80041ba <HAL_LCD_Clear>
 8002150:	e012      	b.n	8002178 <EDO_1+0x2ec>
	}
	else if(btnC == 1 && btnC != btnCa){
 8002152:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d10e      	bne.n	8002178 <EDO_1+0x2ec>
 800215a:	4b20      	ldr	r3, [pc, #128]	; (80021dc <EDO_1+0x350>)
 800215c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002160:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002164:	429a      	cmp	r2, r3
 8002166:	d007      	beq.n	8002178 <EDO_1+0x2ec>
		// Cambio de estado
		EA = E3;
 8002168:	4b1e      	ldr	r3, [pc, #120]	; (80021e4 <EDO_1+0x358>)
 800216a:	2203      	movs	r2, #3
 800216c:	701a      	strb	r2, [r3, #0]
		first = 0;
 800216e:	4b0b      	ldr	r3, [pc, #44]	; (800219c <EDO_1+0x310>)
 8002170:	2200      	movs	r2, #0
 8002172:	801a      	strh	r2, [r3, #0]
		HAL_LCD_Clear();
 8002174:	f002 f821 	bl	80041ba <HAL_LCD_Clear>
	}
	estado_Anterior(btnU, btnD, btnL, btnR, btnC);
 8002178:	f9b7 4000 	ldrsh.w	r4, [r7]
 800217c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002180:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002184:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002188:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800218c:	9300      	str	r3, [sp, #0]
 800218e:	4623      	mov	r3, r4
 8002190:	f7ff fd90 	bl	8001cb4 <estado_Anterior>
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	bd90      	pop	{r4, r7, pc}
 800219c:	200006dc 	.word	0x200006dc
 80021a0:	2000003f 	.word	0x2000003f
 80021a4:	20000054 	.word	0x20000054
 80021a8:	2000002a 	.word	0x2000002a
 80021ac:	51eb851f 	.word	0x51eb851f
 80021b0:	20000701 	.word	0x20000701
 80021b4:	200006f4 	.word	0x200006f4
 80021b8:	200006da 	.word	0x200006da
 80021bc:	200006fa 	.word	0x200006fa
 80021c0:	200006f9 	.word	0x200006f9
 80021c4:	200006fc 	.word	0x200006fc
 80021c8:	200006fd 	.word	0x200006fd
 80021cc:	20000700 	.word	0x20000700
 80021d0:	200006f7 	.word	0x200006f7
 80021d4:	200006e6 	.word	0x200006e6
 80021d8:	200006e0 	.word	0x200006e0
 80021dc:	200006ec 	.word	0x200006ec
 80021e0:	200006de 	.word	0x200006de
 80021e4:	200006d8 	.word	0x200006d8

080021e8 <EDO_2>:

void EDO_2(short btnU, short btnD, short btnL, short btnR, short btnC){
 80021e8:	b590      	push	{r4, r7, lr}
 80021ea:	b087      	sub	sp, #28
 80021ec:	af02      	add	r7, sp, #8
 80021ee:	4604      	mov	r4, r0
 80021f0:	4608      	mov	r0, r1
 80021f2:	4611      	mov	r1, r2
 80021f4:	461a      	mov	r2, r3
 80021f6:	4623      	mov	r3, r4
 80021f8:	80fb      	strh	r3, [r7, #6]
 80021fa:	4603      	mov	r3, r0
 80021fc:	80bb      	strh	r3, [r7, #4]
 80021fe:	460b      	mov	r3, r1
 8002200:	807b      	strh	r3, [r7, #2]
 8002202:	4613      	mov	r3, r2
 8002204:	803b      	strh	r3, [r7, #0]
	// Pantalla principal
	if(first == 0){
 8002206:	4b31      	ldr	r3, [pc, #196]	; (80022cc <EDO_2+0xe4>)
 8002208:	f9b3 3000 	ldrsh.w	r3, [r3]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d11b      	bne.n	8002248 <EDO_2+0x60>
		// Mostrado de valores fijos
		HAL_LCD_Write_AsciiString(word[reloj],48,0);
 8002210:	2200      	movs	r2, #0
 8002212:	2130      	movs	r1, #48	; 0x30
 8002214:	482e      	ldr	r0, [pc, #184]	; (80022d0 <EDO_2+0xe8>)
 8002216:	f002 f88f 	bl	8004338 <HAL_LCD_Write_AsciiString>
		HAL_LCD_Write_ascii(':',60,1);
 800221a:	2201      	movs	r2, #1
 800221c:	213c      	movs	r1, #60	; 0x3c
 800221e:	203a      	movs	r0, #58	; 0x3a
 8002220:	f002 f822 	bl	8004268 <HAL_LCD_Write_ascii>
		HAL_LCD_Write_AsciiString(word[temperatura],30,2);
 8002224:	2202      	movs	r2, #2
 8002226:	211e      	movs	r1, #30
 8002228:	482a      	ldr	r0, [pc, #168]	; (80022d4 <EDO_2+0xec>)
 800222a:	f002 f885 	bl	8004338 <HAL_LCD_Write_AsciiString>
		HAL_LCD_Write_ascii(SYMBOL_ASCII_CELSIUS,66,3);
 800222e:	2203      	movs	r2, #3
 8002230:	2142      	movs	r1, #66	; 0x42
 8002232:	20f8      	movs	r0, #248	; 0xf8
 8002234:	f002 f818 	bl	8004268 <HAL_LCD_Write_ascii>
		HAL_LCD_Write_ascii('C',72,3);
 8002238:	2203      	movs	r2, #3
 800223a:	2148      	movs	r1, #72	; 0x48
 800223c:	2043      	movs	r0, #67	; 0x43
 800223e:	f002 f813 	bl	8004268 <HAL_LCD_Write_ascii>
		first = 1;
 8002242:	4b22      	ldr	r3, [pc, #136]	; (80022cc <EDO_2+0xe4>)
 8002244:	2201      	movs	r2, #1
 8002246:	801a      	strh	r2, [r3, #0]
	}
	// Obtener tiempo
	HAL_Get_ActualTime(&Hora,&Minuto,&Segundo);
 8002248:	4a23      	ldr	r2, [pc, #140]	; (80022d8 <EDO_2+0xf0>)
 800224a:	4924      	ldr	r1, [pc, #144]	; (80022dc <EDO_2+0xf4>)
 800224c:	4824      	ldr	r0, [pc, #144]	; (80022e0 <EDO_2+0xf8>)
 800224e:	f002 f91d 	bl	800448c <HAL_Get_ActualTime>
	// Mostrar tiempo
	HAL_LCD_Write_Number(&Hora,48,1);
 8002252:	2201      	movs	r2, #1
 8002254:	2130      	movs	r1, #48	; 0x30
 8002256:	4822      	ldr	r0, [pc, #136]	; (80022e0 <EDO_2+0xf8>)
 8002258:	f002 f89e 	bl	8004398 <HAL_LCD_Write_Number>
	HAL_LCD_Write_Number(&Minuto,66,1);
 800225c:	2201      	movs	r2, #1
 800225e:	2142      	movs	r1, #66	; 0x42
 8002260:	481e      	ldr	r0, [pc, #120]	; (80022dc <EDO_2+0xf4>)
 8002262:	f002 f899 	bl	8004398 <HAL_LCD_Write_Number>
	// Temperatura
	uint8_t Temp = HAL_TEMPSen_ReadTemperature();
 8002266:	f002 f93f 	bl	80044e8 <HAL_TEMPSen_ReadTemperature>
 800226a:	4603      	mov	r3, r0
 800226c:	73fb      	strb	r3, [r7, #15]
	LL_mDelay(1);
 800226e:	2001      	movs	r0, #1
 8002270:	f001 feda 	bl	8004028 <LL_mDelay>
	// Mostrar Temperaura
	HAL_LCD_Write_Number(&Temp,54,3);
 8002274:	f107 030f 	add.w	r3, r7, #15
 8002278:	2203      	movs	r2, #3
 800227a:	2136      	movs	r1, #54	; 0x36
 800227c:	4618      	mov	r0, r3
 800227e:	f002 f88b 	bl	8004398 <HAL_LCD_Write_Number>
	if(btnC == 1 && btnC != btnCa){
 8002282:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d10e      	bne.n	80022a8 <EDO_2+0xc0>
 800228a:	4b16      	ldr	r3, [pc, #88]	; (80022e4 <EDO_2+0xfc>)
 800228c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002290:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8002294:	429a      	cmp	r2, r3
 8002296:	d007      	beq.n	80022a8 <EDO_2+0xc0>
		// Cambio de estado
		EA = E3;
 8002298:	4b13      	ldr	r3, [pc, #76]	; (80022e8 <EDO_2+0x100>)
 800229a:	2203      	movs	r2, #3
 800229c:	701a      	strb	r2, [r3, #0]
		first = 0;
 800229e:	4b0b      	ldr	r3, [pc, #44]	; (80022cc <EDO_2+0xe4>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	801a      	strh	r2, [r3, #0]
		HAL_LCD_Clear();
 80022a4:	f001 ff89 	bl	80041ba <HAL_LCD_Clear>
	}
	estado_Anterior(btnU, btnD, btnL, btnR, btnC);
 80022a8:	f9b7 4000 	ldrsh.w	r4, [r7]
 80022ac:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80022b0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80022b4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80022b8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80022bc:	9300      	str	r3, [sp, #0]
 80022be:	4623      	mov	r3, r4
 80022c0:	f7ff fcf8 	bl	8001cb4 <estado_Anterior>
}
 80022c4:	bf00      	nop
 80022c6:	3714      	adds	r7, #20
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd90      	pop	{r4, r7, pc}
 80022cc:	200006dc 	.word	0x200006dc
 80022d0:	20000015 	.word	0x20000015
 80022d4:	2000007e 	.word	0x2000007e
 80022d8:	200006fb 	.word	0x200006fb
 80022dc:	200006f5 	.word	0x200006f5
 80022e0:	200006fe 	.word	0x200006fe
 80022e4:	200006ec 	.word	0x200006ec
 80022e8:	200006d8 	.word	0x200006d8

080022ec <EDO_3>:

void EDO_3(short btnU, short btnD, short btnL, short btnR, short btnC){
 80022ec:	b590      	push	{r4, r7, lr}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af02      	add	r7, sp, #8
 80022f2:	4604      	mov	r4, r0
 80022f4:	4608      	mov	r0, r1
 80022f6:	4611      	mov	r1, r2
 80022f8:	461a      	mov	r2, r3
 80022fa:	4623      	mov	r3, r4
 80022fc:	80fb      	strh	r3, [r7, #6]
 80022fe:	4603      	mov	r3, r0
 8002300:	80bb      	strh	r3, [r7, #4]
 8002302:	460b      	mov	r3, r1
 8002304:	807b      	strh	r3, [r7, #2]
 8002306:	4613      	mov	r3, r2
 8002308:	803b      	strh	r3, [r7, #0]
	// Menu
	if(first == 0){
 800230a:	4bcf      	ldr	r3, [pc, #828]	; (8002648 <EDO_3+0x35c>)
 800230c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d12d      	bne.n	8002370 <EDO_3+0x84>
			// Mostrado de valores fijos
			HAL_LCD_Write_AsciiString(word[w_adjustClock],24,0);
 8002314:	2200      	movs	r2, #0
 8002316:	2118      	movs	r1, #24
 8002318:	48cc      	ldr	r0, [pc, #816]	; (800264c <EDO_3+0x360>)
 800231a:	f002 f80d 	bl	8004338 <HAL_LCD_Write_AsciiString>
			HAL_LCD_Write_AsciiString(word[w_adjustPill],12,1);
 800231e:	2201      	movs	r2, #1
 8002320:	210c      	movs	r1, #12
 8002322:	48cb      	ldr	r0, [pc, #812]	; (8002650 <EDO_3+0x364>)
 8002324:	f002 f808 	bl	8004338 <HAL_LCD_Write_AsciiString>
			HAL_LCD_Write_AsciiString(word[w_timeAndTemp],13,2);
 8002328:	2202      	movs	r2, #2
 800232a:	210d      	movs	r1, #13
 800232c:	48c9      	ldr	r0, [pc, #804]	; (8002654 <EDO_3+0x368>)
 800232e:	f002 f803 	bl	8004338 <HAL_LCD_Write_AsciiString>
			HAL_LCD_Write_AsciiString(word[w_timePills],6,3);
 8002332:	2203      	movs	r2, #3
 8002334:	2106      	movs	r1, #6
 8002336:	48c8      	ldr	r0, [pc, #800]	; (8002658 <EDO_3+0x36c>)
 8002338:	f001 fffe 	bl	8004338 <HAL_LCD_Write_AsciiString>
			// > en A la primera vez
			HAL_LCD_Write_ascii('>',18,0);
 800233c:	2200      	movs	r2, #0
 800233e:	2112      	movs	r1, #18
 8002340:	203e      	movs	r0, #62	; 0x3e
 8002342:	f001 ff91 	bl	8004268 <HAL_LCD_Write_ascii>
			HAL_LCD_Write_ascii(' ',6,1);
 8002346:	2201      	movs	r2, #1
 8002348:	2106      	movs	r1, #6
 800234a:	2020      	movs	r0, #32
 800234c:	f001 ff8c 	bl	8004268 <HAL_LCD_Write_ascii>
			HAL_LCD_Write_ascii(' ',6,2);
 8002350:	2202      	movs	r2, #2
 8002352:	2106      	movs	r1, #6
 8002354:	2020      	movs	r0, #32
 8002356:	f001 ff87 	bl	8004268 <HAL_LCD_Write_ascii>
			HAL_LCD_Write_ascii(' ',0,3);
 800235a:	2203      	movs	r2, #3
 800235c:	2100      	movs	r1, #0
 800235e:	2020      	movs	r0, #32
 8002360:	f001 ff82 	bl	8004268 <HAL_LCD_Write_ascii>
			first = 1;
 8002364:	4bb8      	ldr	r3, [pc, #736]	; (8002648 <EDO_3+0x35c>)
 8002366:	2201      	movs	r2, #1
 8002368:	801a      	strh	r2, [r3, #0]
			Puntero=0;
 800236a:	4bbc      	ldr	r3, [pc, #752]	; (800265c <EDO_3+0x370>)
 800236c:	2200      	movs	r2, #0
 800236e:	801a      	strh	r2, [r3, #0]
		}

	if(Puntero == 0 && btnC == 1 && btnC != btnCa){
 8002370:	4bba      	ldr	r3, [pc, #744]	; (800265c <EDO_3+0x370>)
 8002372:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d113      	bne.n	80023a2 <EDO_3+0xb6>
 800237a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d10f      	bne.n	80023a2 <EDO_3+0xb6>
 8002382:	4bb7      	ldr	r3, [pc, #732]	; (8002660 <EDO_3+0x374>)
 8002384:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002388:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800238c:	429a      	cmp	r2, r3
 800238e:	d008      	beq.n	80023a2 <EDO_3+0xb6>
		//Si puntero es igual a 0 y el boton central es presionado, ira a ajustar reloj
		EA=E0;
 8002390:	4bb4      	ldr	r3, [pc, #720]	; (8002664 <EDO_3+0x378>)
 8002392:	2200      	movs	r2, #0
 8002394:	701a      	strb	r2, [r3, #0]
		HAL_LCD_Clear();
 8002396:	f001 ff10 	bl	80041ba <HAL_LCD_Clear>
		first=0;
 800239a:	4bab      	ldr	r3, [pc, #684]	; (8002648 <EDO_3+0x35c>)
 800239c:	2200      	movs	r2, #0
 800239e:	801a      	strh	r2, [r3, #0]
 80023a0:	e049      	b.n	8002436 <EDO_3+0x14a>
	}
	else if(Puntero == 1 && btnC == 1 && btnC != btnCa){
 80023a2:	4bae      	ldr	r3, [pc, #696]	; (800265c <EDO_3+0x370>)
 80023a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d113      	bne.n	80023d4 <EDO_3+0xe8>
 80023ac:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d10f      	bne.n	80023d4 <EDO_3+0xe8>
 80023b4:	4baa      	ldr	r3, [pc, #680]	; (8002660 <EDO_3+0x374>)
 80023b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023ba:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d008      	beq.n	80023d4 <EDO_3+0xe8>
		//Si puntero es igual a 1 y el boton central es presionado, ira a ajustar intervalos pastilla
		EA=E1;
 80023c2:	4ba8      	ldr	r3, [pc, #672]	; (8002664 <EDO_3+0x378>)
 80023c4:	2201      	movs	r2, #1
 80023c6:	701a      	strb	r2, [r3, #0]
		HAL_LCD_Clear();
 80023c8:	f001 fef7 	bl	80041ba <HAL_LCD_Clear>
		first=0;
 80023cc:	4b9e      	ldr	r3, [pc, #632]	; (8002648 <EDO_3+0x35c>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	801a      	strh	r2, [r3, #0]
 80023d2:	e030      	b.n	8002436 <EDO_3+0x14a>
	}
	else if(Puntero == 2 && btnC == 1 && btnC != btnCa){
 80023d4:	4ba1      	ldr	r3, [pc, #644]	; (800265c <EDO_3+0x370>)
 80023d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d113      	bne.n	8002406 <EDO_3+0x11a>
 80023de:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d10f      	bne.n	8002406 <EDO_3+0x11a>
 80023e6:	4b9e      	ldr	r3, [pc, #632]	; (8002660 <EDO_3+0x374>)
 80023e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023ec:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d008      	beq.n	8002406 <EDO_3+0x11a>
		//Si puntero es igual a 2 y el boton central es presionado, ira a mostrar hora actual y temp
		EA=E2;
 80023f4:	4b9b      	ldr	r3, [pc, #620]	; (8002664 <EDO_3+0x378>)
 80023f6:	2202      	movs	r2, #2
 80023f8:	701a      	strb	r2, [r3, #0]
		HAL_LCD_Clear();
 80023fa:	f001 fede 	bl	80041ba <HAL_LCD_Clear>
		first=0;
 80023fe:	4b92      	ldr	r3, [pc, #584]	; (8002648 <EDO_3+0x35c>)
 8002400:	2200      	movs	r2, #0
 8002402:	801a      	strh	r2, [r3, #0]
 8002404:	e017      	b.n	8002436 <EDO_3+0x14a>
	}
	else if(Puntero == 3 && btnC == 1 && btnC != btnCa){
 8002406:	4b95      	ldr	r3, [pc, #596]	; (800265c <EDO_3+0x370>)
 8002408:	f9b3 3000 	ldrsh.w	r3, [r3]
 800240c:	2b03      	cmp	r3, #3
 800240e:	d112      	bne.n	8002436 <EDO_3+0x14a>
 8002410:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d10e      	bne.n	8002436 <EDO_3+0x14a>
 8002418:	4b91      	ldr	r3, [pc, #580]	; (8002660 <EDO_3+0x374>)
 800241a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800241e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002422:	429a      	cmp	r2, r3
 8002424:	d007      	beq.n	8002436 <EDO_3+0x14a>
		//Si puntero es igual a 3 y el boton central es presionado, ira a mostrar los intervalos configurados
		EA=E7;
 8002426:	4b8f      	ldr	r3, [pc, #572]	; (8002664 <EDO_3+0x378>)
 8002428:	2207      	movs	r2, #7
 800242a:	701a      	strb	r2, [r3, #0]
		HAL_LCD_Clear();
 800242c:	f001 fec5 	bl	80041ba <HAL_LCD_Clear>
		first=0;
 8002430:	4b85      	ldr	r3, [pc, #532]	; (8002648 <EDO_3+0x35c>)
 8002432:	2200      	movs	r2, #0
 8002434:	801a      	strh	r2, [r3, #0]
		}
	// Puntero
	if(btnD == 1 && btnD != btnDa && btnU == 0){
 8002436:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800243a:	2b01      	cmp	r3, #1
 800243c:	f040 8091 	bne.w	8002562 <EDO_3+0x276>
 8002440:	4b89      	ldr	r3, [pc, #548]	; (8002668 <EDO_3+0x37c>)
 8002442:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002446:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800244a:	429a      	cmp	r2, r3
 800244c:	f000 8089 	beq.w	8002562 <EDO_3+0x276>
 8002450:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002454:	2b00      	cmp	r3, #0
 8002456:	f040 8084 	bne.w	8002562 <EDO_3+0x276>
		Puntero += 1;
 800245a:	4b80      	ldr	r3, [pc, #512]	; (800265c <EDO_3+0x370>)
 800245c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002460:	b29b      	uxth	r3, r3
 8002462:	3301      	adds	r3, #1
 8002464:	b29b      	uxth	r3, r3
 8002466:	b21a      	sxth	r2, r3
 8002468:	4b7c      	ldr	r3, [pc, #496]	; (800265c <EDO_3+0x370>)
 800246a:	801a      	strh	r2, [r3, #0]
		if (Puntero > 3)
 800246c:	4b7b      	ldr	r3, [pc, #492]	; (800265c <EDO_3+0x370>)
 800246e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002472:	2b03      	cmp	r3, #3
 8002474:	dd02      	ble.n	800247c <EDO_3+0x190>
			Puntero = 0;
 8002476:	4b79      	ldr	r3, [pc, #484]	; (800265c <EDO_3+0x370>)
 8002478:	2200      	movs	r2, #0
 800247a:	801a      	strh	r2, [r3, #0]
		switch (Puntero){
 800247c:	4b77      	ldr	r3, [pc, #476]	; (800265c <EDO_3+0x370>)
 800247e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002482:	2b03      	cmp	r3, #3
 8002484:	f200 8109 	bhi.w	800269a <EDO_3+0x3ae>
 8002488:	a201      	add	r2, pc, #4	; (adr r2, 8002490 <EDO_3+0x1a4>)
 800248a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800248e:	bf00      	nop
 8002490:	080024a1 	.word	0x080024a1
 8002494:	080024d1 	.word	0x080024d1
 8002498:	08002501 	.word	0x08002501
 800249c:	08002531 	.word	0x08002531
			case 0:
				LL_mDelay(1);
 80024a0:	2001      	movs	r0, #1
 80024a2:	f001 fdc1 	bl	8004028 <LL_mDelay>
				HAL_LCD_Write_ascii('>',18,0);
 80024a6:	2200      	movs	r2, #0
 80024a8:	2112      	movs	r1, #18
 80024aa:	203e      	movs	r0, #62	; 0x3e
 80024ac:	f001 fedc 	bl	8004268 <HAL_LCD_Write_ascii>
				HAL_LCD_Write_ascii(' ',6,1);
 80024b0:	2201      	movs	r2, #1
 80024b2:	2106      	movs	r1, #6
 80024b4:	2020      	movs	r0, #32
 80024b6:	f001 fed7 	bl	8004268 <HAL_LCD_Write_ascii>
				HAL_LCD_Write_ascii(' ',6,2);
 80024ba:	2202      	movs	r2, #2
 80024bc:	2106      	movs	r1, #6
 80024be:	2020      	movs	r0, #32
 80024c0:	f001 fed2 	bl	8004268 <HAL_LCD_Write_ascii>
				HAL_LCD_Write_ascii(' ',0,3);
 80024c4:	2203      	movs	r2, #3
 80024c6:	2100      	movs	r1, #0
 80024c8:	2020      	movs	r0, #32
 80024ca:	f001 fecd 	bl	8004268 <HAL_LCD_Write_ascii>
				break;
 80024ce:	e047      	b.n	8002560 <EDO_3+0x274>
			case 1:
				LL_mDelay(1);
 80024d0:	2001      	movs	r0, #1
 80024d2:	f001 fda9 	bl	8004028 <LL_mDelay>
				HAL_LCD_Write_ascii(' ',18,0);
 80024d6:	2200      	movs	r2, #0
 80024d8:	2112      	movs	r1, #18
 80024da:	2020      	movs	r0, #32
 80024dc:	f001 fec4 	bl	8004268 <HAL_LCD_Write_ascii>
				HAL_LCD_Write_ascii('>',6,1);
 80024e0:	2201      	movs	r2, #1
 80024e2:	2106      	movs	r1, #6
 80024e4:	203e      	movs	r0, #62	; 0x3e
 80024e6:	f001 febf 	bl	8004268 <HAL_LCD_Write_ascii>
				HAL_LCD_Write_ascii(' ',6,2);
 80024ea:	2202      	movs	r2, #2
 80024ec:	2106      	movs	r1, #6
 80024ee:	2020      	movs	r0, #32
 80024f0:	f001 feba 	bl	8004268 <HAL_LCD_Write_ascii>
				HAL_LCD_Write_ascii(' ',0,3);
 80024f4:	2203      	movs	r2, #3
 80024f6:	2100      	movs	r1, #0
 80024f8:	2020      	movs	r0, #32
 80024fa:	f001 feb5 	bl	8004268 <HAL_LCD_Write_ascii>
				break;
 80024fe:	e02f      	b.n	8002560 <EDO_3+0x274>
			case 2:
				LL_mDelay(1);
 8002500:	2001      	movs	r0, #1
 8002502:	f001 fd91 	bl	8004028 <LL_mDelay>
				HAL_LCD_Write_ascii(' ',18,0);
 8002506:	2200      	movs	r2, #0
 8002508:	2112      	movs	r1, #18
 800250a:	2020      	movs	r0, #32
 800250c:	f001 feac 	bl	8004268 <HAL_LCD_Write_ascii>
				HAL_LCD_Write_ascii(' ',6,1);
 8002510:	2201      	movs	r2, #1
 8002512:	2106      	movs	r1, #6
 8002514:	2020      	movs	r0, #32
 8002516:	f001 fea7 	bl	8004268 <HAL_LCD_Write_ascii>
				HAL_LCD_Write_ascii('>',6,2);
 800251a:	2202      	movs	r2, #2
 800251c:	2106      	movs	r1, #6
 800251e:	203e      	movs	r0, #62	; 0x3e
 8002520:	f001 fea2 	bl	8004268 <HAL_LCD_Write_ascii>
				HAL_LCD_Write_ascii(' ',0,3);
 8002524:	2203      	movs	r2, #3
 8002526:	2100      	movs	r1, #0
 8002528:	2020      	movs	r0, #32
 800252a:	f001 fe9d 	bl	8004268 <HAL_LCD_Write_ascii>
				break;
 800252e:	e017      	b.n	8002560 <EDO_3+0x274>
			case 3:
				LL_mDelay(1);
 8002530:	2001      	movs	r0, #1
 8002532:	f001 fd79 	bl	8004028 <LL_mDelay>
				HAL_LCD_Write_ascii(' ',18,0);
 8002536:	2200      	movs	r2, #0
 8002538:	2112      	movs	r1, #18
 800253a:	2020      	movs	r0, #32
 800253c:	f001 fe94 	bl	8004268 <HAL_LCD_Write_ascii>
				HAL_LCD_Write_ascii(' ',6,1);
 8002540:	2201      	movs	r2, #1
 8002542:	2106      	movs	r1, #6
 8002544:	2020      	movs	r0, #32
 8002546:	f001 fe8f 	bl	8004268 <HAL_LCD_Write_ascii>
				HAL_LCD_Write_ascii(' ',6,2);
 800254a:	2202      	movs	r2, #2
 800254c:	2106      	movs	r1, #6
 800254e:	2020      	movs	r0, #32
 8002550:	f001 fe8a 	bl	8004268 <HAL_LCD_Write_ascii>
				HAL_LCD_Write_ascii('>',0,3);
 8002554:	2203      	movs	r2, #3
 8002556:	2100      	movs	r1, #0
 8002558:	203e      	movs	r0, #62	; 0x3e
 800255a:	f001 fe85 	bl	8004268 <HAL_LCD_Write_ascii>
							break;
 800255e:	bf00      	nop
		}
	}
 8002560:	e09b      	b.n	800269a <EDO_3+0x3ae>
	else if(btnU == 1 && btnU != btnUa && btnD == 0){
 8002562:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002566:	2b01      	cmp	r3, #1
 8002568:	f040 8098 	bne.w	800269c <EDO_3+0x3b0>
 800256c:	4b3f      	ldr	r3, [pc, #252]	; (800266c <EDO_3+0x380>)
 800256e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002572:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002576:	429a      	cmp	r2, r3
 8002578:	f000 8090 	beq.w	800269c <EDO_3+0x3b0>
 800257c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002580:	2b00      	cmp	r3, #0
 8002582:	f040 808b 	bne.w	800269c <EDO_3+0x3b0>
			Puntero -= 1;
 8002586:	4b35      	ldr	r3, [pc, #212]	; (800265c <EDO_3+0x370>)
 8002588:	f9b3 3000 	ldrsh.w	r3, [r3]
 800258c:	b29b      	uxth	r3, r3
 800258e:	3b01      	subs	r3, #1
 8002590:	b29b      	uxth	r3, r3
 8002592:	b21a      	sxth	r2, r3
 8002594:	4b31      	ldr	r3, [pc, #196]	; (800265c <EDO_3+0x370>)
 8002596:	801a      	strh	r2, [r3, #0]
			if (Puntero < 0)
 8002598:	4b30      	ldr	r3, [pc, #192]	; (800265c <EDO_3+0x370>)
 800259a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	da02      	bge.n	80025a8 <EDO_3+0x2bc>
				Puntero = 3;
 80025a2:	4b2e      	ldr	r3, [pc, #184]	; (800265c <EDO_3+0x370>)
 80025a4:	2203      	movs	r2, #3
 80025a6:	801a      	strh	r2, [r3, #0]
			switch (Puntero){
 80025a8:	4b2c      	ldr	r3, [pc, #176]	; (800265c <EDO_3+0x370>)
 80025aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025ae:	2b03      	cmp	r3, #3
 80025b0:	d874      	bhi.n	800269c <EDO_3+0x3b0>
 80025b2:	a201      	add	r2, pc, #4	; (adr r2, 80025b8 <EDO_3+0x2cc>)
 80025b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025b8:	080025c9 	.word	0x080025c9
 80025bc:	080025f3 	.word	0x080025f3
 80025c0:	0800261d 	.word	0x0800261d
 80025c4:	08002671 	.word	0x08002671
				case 0:
					//LL_mDelay(1);
					HAL_LCD_Write_ascii('>',18,0);
 80025c8:	2200      	movs	r2, #0
 80025ca:	2112      	movs	r1, #18
 80025cc:	203e      	movs	r0, #62	; 0x3e
 80025ce:	f001 fe4b 	bl	8004268 <HAL_LCD_Write_ascii>
					HAL_LCD_Write_ascii(' ',6,1);
 80025d2:	2201      	movs	r2, #1
 80025d4:	2106      	movs	r1, #6
 80025d6:	2020      	movs	r0, #32
 80025d8:	f001 fe46 	bl	8004268 <HAL_LCD_Write_ascii>
					HAL_LCD_Write_ascii(' ',6,2);
 80025dc:	2202      	movs	r2, #2
 80025de:	2106      	movs	r1, #6
 80025e0:	2020      	movs	r0, #32
 80025e2:	f001 fe41 	bl	8004268 <HAL_LCD_Write_ascii>
					HAL_LCD_Write_ascii(' ',0,3);
 80025e6:	2203      	movs	r2, #3
 80025e8:	2100      	movs	r1, #0
 80025ea:	2020      	movs	r0, #32
 80025ec:	f001 fe3c 	bl	8004268 <HAL_LCD_Write_ascii>
					break;
 80025f0:	e054      	b.n	800269c <EDO_3+0x3b0>
				case 1:
					//LL_mDelay(1);
					HAL_LCD_Write_ascii(' ',18,0);
 80025f2:	2200      	movs	r2, #0
 80025f4:	2112      	movs	r1, #18
 80025f6:	2020      	movs	r0, #32
 80025f8:	f001 fe36 	bl	8004268 <HAL_LCD_Write_ascii>
					HAL_LCD_Write_ascii('>',6,1);
 80025fc:	2201      	movs	r2, #1
 80025fe:	2106      	movs	r1, #6
 8002600:	203e      	movs	r0, #62	; 0x3e
 8002602:	f001 fe31 	bl	8004268 <HAL_LCD_Write_ascii>
					HAL_LCD_Write_ascii(' ',6,2);
 8002606:	2202      	movs	r2, #2
 8002608:	2106      	movs	r1, #6
 800260a:	2020      	movs	r0, #32
 800260c:	f001 fe2c 	bl	8004268 <HAL_LCD_Write_ascii>
					HAL_LCD_Write_ascii(' ',0,3);
 8002610:	2203      	movs	r2, #3
 8002612:	2100      	movs	r1, #0
 8002614:	2020      	movs	r0, #32
 8002616:	f001 fe27 	bl	8004268 <HAL_LCD_Write_ascii>
					break;
 800261a:	e03f      	b.n	800269c <EDO_3+0x3b0>
				case 2:
					//LL_mDelay(1);
					HAL_LCD_Write_ascii(' ',18,0);
 800261c:	2200      	movs	r2, #0
 800261e:	2112      	movs	r1, #18
 8002620:	2020      	movs	r0, #32
 8002622:	f001 fe21 	bl	8004268 <HAL_LCD_Write_ascii>
					HAL_LCD_Write_ascii(' ',6,1);
 8002626:	2201      	movs	r2, #1
 8002628:	2106      	movs	r1, #6
 800262a:	2020      	movs	r0, #32
 800262c:	f001 fe1c 	bl	8004268 <HAL_LCD_Write_ascii>
					HAL_LCD_Write_ascii('>',6,2);
 8002630:	2202      	movs	r2, #2
 8002632:	2106      	movs	r1, #6
 8002634:	203e      	movs	r0, #62	; 0x3e
 8002636:	f001 fe17 	bl	8004268 <HAL_LCD_Write_ascii>
					HAL_LCD_Write_ascii(' ',0,3);
 800263a:	2203      	movs	r2, #3
 800263c:	2100      	movs	r1, #0
 800263e:	2020      	movs	r0, #32
 8002640:	f001 fe12 	bl	8004268 <HAL_LCD_Write_ascii>
					break;
 8002644:	e02a      	b.n	800269c <EDO_3+0x3b0>
 8002646:	bf00      	nop
 8002648:	200006dc 	.word	0x200006dc
 800264c:	20000093 	.word	0x20000093
 8002650:	200000a8 	.word	0x200000a8
 8002654:	200000bd 	.word	0x200000bd
 8002658:	200000d2 	.word	0x200000d2
 800265c:	200006da 	.word	0x200006da
 8002660:	200006ec 	.word	0x200006ec
 8002664:	200006d8 	.word	0x200006d8
 8002668:	200006e4 	.word	0x200006e4
 800266c:	200006e8 	.word	0x200006e8
				case 3:
					//LL_mDelay(1);
					HAL_LCD_Write_ascii(' ',18,0);
 8002670:	2200      	movs	r2, #0
 8002672:	2112      	movs	r1, #18
 8002674:	2020      	movs	r0, #32
 8002676:	f001 fdf7 	bl	8004268 <HAL_LCD_Write_ascii>
					HAL_LCD_Write_ascii(' ',6,1);
 800267a:	2201      	movs	r2, #1
 800267c:	2106      	movs	r1, #6
 800267e:	2020      	movs	r0, #32
 8002680:	f001 fdf2 	bl	8004268 <HAL_LCD_Write_ascii>
					HAL_LCD_Write_ascii(' ',6,2);
 8002684:	2202      	movs	r2, #2
 8002686:	2106      	movs	r1, #6
 8002688:	2020      	movs	r0, #32
 800268a:	f001 fded 	bl	8004268 <HAL_LCD_Write_ascii>
					HAL_LCD_Write_ascii('>',0,3);
 800268e:	2203      	movs	r2, #3
 8002690:	2100      	movs	r1, #0
 8002692:	203e      	movs	r0, #62	; 0x3e
 8002694:	f001 fde8 	bl	8004268 <HAL_LCD_Write_ascii>
								break;
 8002698:	e000      	b.n	800269c <EDO_3+0x3b0>
	}
 800269a:	bf00      	nop
		// Cambio de estado

		first = 0;
		HAL_LCD_Clear();
	}*/
	estado_Anterior(btnU, btnD, btnL, btnR, btnC);
 800269c:	f9b7 4000 	ldrsh.w	r4, [r7]
 80026a0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80026a4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80026a8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80026ac:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80026b0:	9300      	str	r3, [sp, #0]
 80026b2:	4623      	mov	r3, r4
 80026b4:	f7ff fafe 	bl	8001cb4 <estado_Anterior>
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd90      	pop	{r4, r7, pc}

080026c0 <EDO_4>:

void EDO_4(short btnU, short btnD, short btnL, short btnR, short btnC){
 80026c0:	b590      	push	{r4, r7, lr}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	4604      	mov	r4, r0
 80026c8:	4608      	mov	r0, r1
 80026ca:	4611      	mov	r1, r2
 80026cc:	461a      	mov	r2, r3
 80026ce:	4623      	mov	r3, r4
 80026d0:	80fb      	strh	r3, [r7, #6]
 80026d2:	4603      	mov	r3, r0
 80026d4:	80bb      	strh	r3, [r7, #4]
 80026d6:	460b      	mov	r3, r1
 80026d8:	807b      	strh	r3, [r7, #2]
 80026da:	4613      	mov	r3, r2
 80026dc:	803b      	strh	r3, [r7, #0]
	// Alarma Temperatura
	if(first == 0){
 80026de:	4b11      	ldr	r3, [pc, #68]	; (8002724 <EDO_4+0x64>)
 80026e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d10c      	bne.n	8002702 <EDO_4+0x42>
		// Mostrado de valores fijos
		HAL_LCD_Write_AsciiString("Temperatura",30,1);
 80026e8:	2201      	movs	r2, #1
 80026ea:	211e      	movs	r1, #30
 80026ec:	480e      	ldr	r0, [pc, #56]	; (8002728 <EDO_4+0x68>)
 80026ee:	f001 fe23 	bl	8004338 <HAL_LCD_Write_AsciiString>
		HAL_LCD_Write_AsciiString("Sobrepasada",30,2);
 80026f2:	2202      	movs	r2, #2
 80026f4:	211e      	movs	r1, #30
 80026f6:	480d      	ldr	r0, [pc, #52]	; (800272c <EDO_4+0x6c>)
 80026f8:	f001 fe1e 	bl	8004338 <HAL_LCD_Write_AsciiString>
		first = 1;
 80026fc:	4b09      	ldr	r3, [pc, #36]	; (8002724 <EDO_4+0x64>)
 80026fe:	2201      	movs	r2, #1
 8002700:	801a      	strh	r2, [r3, #0]
	}
	if(HAL_TEMPSen_ReadTemperature() < 40){
 8002702:	f001 fef1 	bl	80044e8 <HAL_TEMPSen_ReadTemperature>
 8002706:	4603      	mov	r3, r0
 8002708:	2b27      	cmp	r3, #39	; 0x27
 800270a:	d807      	bhi.n	800271c <EDO_4+0x5c>
		// Cambio de estado
		EA = E2;
 800270c:	4b08      	ldr	r3, [pc, #32]	; (8002730 <EDO_4+0x70>)
 800270e:	2202      	movs	r2, #2
 8002710:	701a      	strb	r2, [r3, #0]
		first = 0;
 8002712:	4b04      	ldr	r3, [pc, #16]	; (8002724 <EDO_4+0x64>)
 8002714:	2200      	movs	r2, #0
 8002716:	801a      	strh	r2, [r3, #0]
		HAL_LCD_Clear();
 8002718:	f001 fd4f 	bl	80041ba <HAL_LCD_Clear>
	}
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	bd90      	pop	{r4, r7, pc}
 8002724:	200006dc 	.word	0x200006dc
 8002728:	08004638 	.word	0x08004638
 800272c:	08004644 	.word	0x08004644
 8002730:	200006d8 	.word	0x200006d8

08002734 <EDO_5>:

void EDO_5(short btnU, short btnD, short btnL, short btnR, short btnC){
 8002734:	b590      	push	{r4, r7, lr}
 8002736:	b085      	sub	sp, #20
 8002738:	af02      	add	r7, sp, #8
 800273a:	4604      	mov	r4, r0
 800273c:	4608      	mov	r0, r1
 800273e:	4611      	mov	r1, r2
 8002740:	461a      	mov	r2, r3
 8002742:	4623      	mov	r3, r4
 8002744:	80fb      	strh	r3, [r7, #6]
 8002746:	4603      	mov	r3, r0
 8002748:	80bb      	strh	r3, [r7, #4]
 800274a:	460b      	mov	r3, r1
 800274c:	807b      	strh	r3, [r7, #2]
 800274e:	4613      	mov	r3, r2
 8002750:	803b      	strh	r3, [r7, #0]
	// Alarma Pastilla
	if(first == 0){
 8002752:	4b24      	ldr	r3, [pc, #144]	; (80027e4 <EDO_5+0xb0>)
 8002754:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d11d      	bne.n	8002798 <EDO_5+0x64>
		// Mostrado de valores fijos
		HAL_LCD_Clear();
 800275c:	f001 fd2d 	bl	80041ba <HAL_LCD_Clear>
		HAL_LCD_Write_AsciiString(word[tomePastilla],24,0);
 8002760:	2200      	movs	r2, #0
 8002762:	2118      	movs	r1, #24
 8002764:	4820      	ldr	r0, [pc, #128]	; (80027e8 <EDO_5+0xb4>)
 8002766:	f001 fde7 	bl	8004338 <HAL_LCD_Write_AsciiString>
		HAL_LCD_Write_AsciiString(word[rojo],36,1);
 800276a:	2201      	movs	r2, #1
 800276c:	2124      	movs	r1, #36	; 0x24
 800276e:	481f      	ldr	r0, [pc, #124]	; (80027ec <EDO_5+0xb8>)
 8002770:	f001 fde2 	bl	8004338 <HAL_LCD_Write_AsciiString>
		HAL_LCD_Write_AsciiString(word[verde],66,1);
 8002774:	2201      	movs	r2, #1
 8002776:	2142      	movs	r1, #66	; 0x42
 8002778:	481d      	ldr	r0, [pc, #116]	; (80027f0 <EDO_5+0xbc>)
 800277a:	f001 fddd 	bl	8004338 <HAL_LCD_Write_AsciiString>
		HAL_LCD_Write_AsciiString(word[azul],54,2);
 800277e:	2202      	movs	r2, #2
 8002780:	2136      	movs	r1, #54	; 0x36
 8002782:	481c      	ldr	r0, [pc, #112]	; (80027f4 <EDO_5+0xc0>)
 8002784:	f001 fdd8 	bl	8004338 <HAL_LCD_Write_AsciiString>
		HAL_LCD_Write_AsciiString(word[entendido],30,3);
 8002788:	2203      	movs	r2, #3
 800278a:	211e      	movs	r1, #30
 800278c:	481a      	ldr	r0, [pc, #104]	; (80027f8 <EDO_5+0xc4>)
 800278e:	f001 fdd3 	bl	8004338 <HAL_LCD_Write_AsciiString>
		first = 1;
 8002792:	4b14      	ldr	r3, [pc, #80]	; (80027e4 <EDO_5+0xb0>)
 8002794:	2201      	movs	r2, #1
 8002796:	801a      	strh	r2, [r3, #0]
	}

	if(btnC == 1 && btnC != btnCa){
 8002798:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800279c:	2b01      	cmp	r3, #1
 800279e:	d10e      	bne.n	80027be <EDO_5+0x8a>
 80027a0:	4b16      	ldr	r3, [pc, #88]	; (80027fc <EDO_5+0xc8>)
 80027a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027a6:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d007      	beq.n	80027be <EDO_5+0x8a>
		// Cambio de estado
		EA = E3;
 80027ae:	4b14      	ldr	r3, [pc, #80]	; (8002800 <EDO_5+0xcc>)
 80027b0:	2203      	movs	r2, #3
 80027b2:	701a      	strb	r2, [r3, #0]
		first = 0;
 80027b4:	4b0b      	ldr	r3, [pc, #44]	; (80027e4 <EDO_5+0xb0>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	801a      	strh	r2, [r3, #0]
		HAL_LCD_Clear();
 80027ba:	f001 fcfe 	bl	80041ba <HAL_LCD_Clear>
	}
	estado_Anterior(btnU, btnD, btnL, btnR, btnC);
 80027be:	f9b7 4000 	ldrsh.w	r4, [r7]
 80027c2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80027c6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80027ca:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80027ce:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80027d2:	9300      	str	r3, [sp, #0]
 80027d4:	4623      	mov	r3, r4
 80027d6:	f7ff fa6d 	bl	8001cb4 <estado_Anterior>
}
 80027da:	bf00      	nop
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd90      	pop	{r4, r7, pc}
 80027e2:	bf00      	nop
 80027e4:	200006dc 	.word	0x200006dc
 80027e8:	200000fc 	.word	0x200000fc
 80027ec:	20000111 	.word	0x20000111
 80027f0:	20000126 	.word	0x20000126
 80027f4:	2000013b 	.word	0x2000013b
 80027f8:	20000150 	.word	0x20000150
 80027fc:	200006ec 	.word	0x200006ec
 8002800:	200006d8 	.word	0x200006d8

08002804 <EDO_6>:

void EDO_6(short btnU, short btnD, short btnL, short btnR, short btnC){
 8002804:	b590      	push	{r4, r7, lr}
 8002806:	b085      	sub	sp, #20
 8002808:	af02      	add	r7, sp, #8
 800280a:	4604      	mov	r4, r0
 800280c:	4608      	mov	r0, r1
 800280e:	4611      	mov	r1, r2
 8002810:	461a      	mov	r2, r3
 8002812:	4623      	mov	r3, r4
 8002814:	80fb      	strh	r3, [r7, #6]
 8002816:	4603      	mov	r3, r0
 8002818:	80bb      	strh	r3, [r7, #4]
 800281a:	460b      	mov	r3, r1
 800281c:	807b      	strh	r3, [r7, #2]
 800281e:	4613      	mov	r3, r2
 8002820:	803b      	strh	r3, [r7, #0]
	// Codigo de estado inicio

	if(btnC == 1 && btnC != btnCa){
 8002822:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d10e      	bne.n	8002848 <EDO_6+0x44>
 800282a:	4b10      	ldr	r3, [pc, #64]	; (800286c <EDO_6+0x68>)
 800282c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002830:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002834:	429a      	cmp	r2, r3
 8002836:	d007      	beq.n	8002848 <EDO_6+0x44>
		// Cambio de estado
		EA = E3;
 8002838:	4b0d      	ldr	r3, [pc, #52]	; (8002870 <EDO_6+0x6c>)
 800283a:	2203      	movs	r2, #3
 800283c:	701a      	strb	r2, [r3, #0]
		first = 0;
 800283e:	4b0d      	ldr	r3, [pc, #52]	; (8002874 <EDO_6+0x70>)
 8002840:	2200      	movs	r2, #0
 8002842:	801a      	strh	r2, [r3, #0]
		HAL_LCD_Clear();
 8002844:	f001 fcb9 	bl	80041ba <HAL_LCD_Clear>
	}
	estado_Anterior(btnU, btnD, btnL, btnR, btnC);
 8002848:	f9b7 4000 	ldrsh.w	r4, [r7]
 800284c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002850:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002854:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002858:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800285c:	9300      	str	r3, [sp, #0]
 800285e:	4623      	mov	r3, r4
 8002860:	f7ff fa28 	bl	8001cb4 <estado_Anterior>
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	bd90      	pop	{r4, r7, pc}
 800286c:	200006ec 	.word	0x200006ec
 8002870:	200006d8 	.word	0x200006d8
 8002874:	200006dc 	.word	0x200006dc

08002878 <EDO_7>:
void EDO_7(short btnU, short btnD, short btnL, short btnR, short btnC){
 8002878:	b590      	push	{r4, r7, lr}
 800287a:	b085      	sub	sp, #20
 800287c:	af02      	add	r7, sp, #8
 800287e:	4604      	mov	r4, r0
 8002880:	4608      	mov	r0, r1
 8002882:	4611      	mov	r1, r2
 8002884:	461a      	mov	r2, r3
 8002886:	4623      	mov	r3, r4
 8002888:	80fb      	strh	r3, [r7, #6]
 800288a:	4603      	mov	r3, r0
 800288c:	80bb      	strh	r3, [r7, #4]
 800288e:	460b      	mov	r3, r1
 8002890:	807b      	strh	r3, [r7, #2]
 8002892:	4613      	mov	r3, r2
 8002894:	803b      	strh	r3, [r7, #0]
	//Intervalos pastillas
	if (first==0)
 8002896:	4b37      	ldr	r3, [pc, #220]	; (8002974 <EDO_7+0xfc>)
 8002898:	f9b3 3000 	ldrsh.w	r3, [r3]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d143      	bne.n	8002928 <EDO_7+0xb0>
	{
		HAL_LCD_Write_AsciiString(word[w_alarms],42,0);
 80028a0:	2200      	movs	r2, #0
 80028a2:	212a      	movs	r1, #42	; 0x2a
 80028a4:	4834      	ldr	r0, [pc, #208]	; (8002978 <EDO_7+0x100>)
 80028a6:	f001 fd47 	bl	8004338 <HAL_LCD_Write_AsciiString>
		HAL_LCD_Write_AsciiString(word[w_red],30,1);
 80028aa:	2201      	movs	r2, #1
 80028ac:	211e      	movs	r1, #30
 80028ae:	4833      	ldr	r0, [pc, #204]	; (800297c <EDO_7+0x104>)
 80028b0:	f001 fd42 	bl	8004338 <HAL_LCD_Write_AsciiString>
		HAL_LCD_Write_AsciiString(word[w_green],30,2);
 80028b4:	2202      	movs	r2, #2
 80028b6:	211e      	movs	r1, #30
 80028b8:	4831      	ldr	r0, [pc, #196]	; (8002980 <EDO_7+0x108>)
 80028ba:	f001 fd3d 	bl	8004338 <HAL_LCD_Write_AsciiString>
		HAL_LCD_Write_AsciiString(word[w_blue],30,3);
 80028be:	2203      	movs	r2, #3
 80028c0:	211e      	movs	r1, #30
 80028c2:	4830      	ldr	r0, [pc, #192]	; (8002984 <EDO_7+0x10c>)
 80028c4:	f001 fd38 	bl	8004338 <HAL_LCD_Write_AsciiString>
		HAL_LCD_Write_ascii(':',78,1);
 80028c8:	2201      	movs	r2, #1
 80028ca:	214e      	movs	r1, #78	; 0x4e
 80028cc:	203a      	movs	r0, #58	; 0x3a
 80028ce:	f001 fccb 	bl	8004268 <HAL_LCD_Write_ascii>
		HAL_LCD_Write_ascii(':',78,2);
 80028d2:	2202      	movs	r2, #2
 80028d4:	214e      	movs	r1, #78	; 0x4e
 80028d6:	203a      	movs	r0, #58	; 0x3a
 80028d8:	f001 fcc6 	bl	8004268 <HAL_LCD_Write_ascii>
		HAL_LCD_Write_ascii(':',78,3);
 80028dc:	2203      	movs	r2, #3
 80028de:	214e      	movs	r1, #78	; 0x4e
 80028e0:	203a      	movs	r0, #58	; 0x3a
 80028e2:	f001 fcc1 	bl	8004268 <HAL_LCD_Write_ascii>
		HAL_LCD_Write_Number(&IntervaloH1,66,1);
 80028e6:	2201      	movs	r2, #1
 80028e8:	2142      	movs	r1, #66	; 0x42
 80028ea:	4827      	ldr	r0, [pc, #156]	; (8002988 <EDO_7+0x110>)
 80028ec:	f001 fd54 	bl	8004398 <HAL_LCD_Write_Number>
		HAL_LCD_Write_Number(&IntervaloM1,84,1);
 80028f0:	2201      	movs	r2, #1
 80028f2:	2154      	movs	r1, #84	; 0x54
 80028f4:	4825      	ldr	r0, [pc, #148]	; (800298c <EDO_7+0x114>)
 80028f6:	f001 fd4f 	bl	8004398 <HAL_LCD_Write_Number>
		HAL_LCD_Write_Number(&IntervaloH2,66,2);
 80028fa:	2202      	movs	r2, #2
 80028fc:	2142      	movs	r1, #66	; 0x42
 80028fe:	4824      	ldr	r0, [pc, #144]	; (8002990 <EDO_7+0x118>)
 8002900:	f001 fd4a 	bl	8004398 <HAL_LCD_Write_Number>
		HAL_LCD_Write_Number(&IntervaloM2,84,2);
 8002904:	2202      	movs	r2, #2
 8002906:	2154      	movs	r1, #84	; 0x54
 8002908:	4822      	ldr	r0, [pc, #136]	; (8002994 <EDO_7+0x11c>)
 800290a:	f001 fd45 	bl	8004398 <HAL_LCD_Write_Number>
		HAL_LCD_Write_Number(&IntervaloH3,66,3);
 800290e:	2203      	movs	r2, #3
 8002910:	2142      	movs	r1, #66	; 0x42
 8002912:	4821      	ldr	r0, [pc, #132]	; (8002998 <EDO_7+0x120>)
 8002914:	f001 fd40 	bl	8004398 <HAL_LCD_Write_Number>
		HAL_LCD_Write_Number(&IntervaloM3,84,3);
 8002918:	2203      	movs	r2, #3
 800291a:	2154      	movs	r1, #84	; 0x54
 800291c:	481f      	ldr	r0, [pc, #124]	; (800299c <EDO_7+0x124>)
 800291e:	f001 fd3b 	bl	8004398 <HAL_LCD_Write_Number>
		first=1;
 8002922:	4b14      	ldr	r3, [pc, #80]	; (8002974 <EDO_7+0xfc>)
 8002924:	2201      	movs	r2, #1
 8002926:	801a      	strh	r2, [r3, #0]
	}

	if(btnC == 1 && btnC != btnCa){
 8002928:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800292c:	2b01      	cmp	r3, #1
 800292e:	d10e      	bne.n	800294e <EDO_7+0xd6>
 8002930:	4b1b      	ldr	r3, [pc, #108]	; (80029a0 <EDO_7+0x128>)
 8002932:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002936:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800293a:	429a      	cmp	r2, r3
 800293c:	d007      	beq.n	800294e <EDO_7+0xd6>
		// Cambio de estado
		first = 0;
 800293e:	4b0d      	ldr	r3, [pc, #52]	; (8002974 <EDO_7+0xfc>)
 8002940:	2200      	movs	r2, #0
 8002942:	801a      	strh	r2, [r3, #0]
		HAL_LCD_Clear();
 8002944:	f001 fc39 	bl	80041ba <HAL_LCD_Clear>
		EA=E3;
 8002948:	4b16      	ldr	r3, [pc, #88]	; (80029a4 <EDO_7+0x12c>)
 800294a:	2203      	movs	r2, #3
 800294c:	701a      	strb	r2, [r3, #0]
	}
	estado_Anterior(btnU, btnD, btnL, btnR, btnC);
 800294e:	f9b7 4000 	ldrsh.w	r4, [r7]
 8002952:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002956:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800295a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800295e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002962:	9300      	str	r3, [sp, #0]
 8002964:	4623      	mov	r3, r4
 8002966:	f7ff f9a5 	bl	8001cb4 <estado_Anterior>
}
 800296a:	bf00      	nop
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	bd90      	pop	{r4, r7, pc}
 8002972:	bf00      	nop
 8002974:	200006dc 	.word	0x200006dc
 8002978:	20000165 	.word	0x20000165
 800297c:	20000111 	.word	0x20000111
 8002980:	20000126 	.word	0x20000126
 8002984:	2000013b 	.word	0x2000013b
 8002988:	200006fa 	.word	0x200006fa
 800298c:	200006f9 	.word	0x200006f9
 8002990:	200006fc 	.word	0x200006fc
 8002994:	200006fd 	.word	0x200006fd
 8002998:	20000700 	.word	0x20000700
 800299c:	200006f7 	.word	0x200006f7
 80029a0:	200006ec 	.word	0x200006ec
 80029a4:	200006d8 	.word	0x200006d8

080029a8 <fsm>:
		{E5,EDO_5},
		{E6,EDO_6},
		{E7,EDO_7}
};

void fsm(short btnU, short btnD,short btnL, short btnR, short btnC){
 80029a8:	b5b0      	push	{r4, r5, r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af02      	add	r7, sp, #8
 80029ae:	4604      	mov	r4, r0
 80029b0:	4608      	mov	r0, r1
 80029b2:	4611      	mov	r1, r2
 80029b4:	461a      	mov	r2, r3
 80029b6:	4623      	mov	r3, r4
 80029b8:	80fb      	strh	r3, [r7, #6]
 80029ba:	4603      	mov	r3, r0
 80029bc:	80bb      	strh	r3, [r7, #4]
 80029be:	460b      	mov	r3, r1
 80029c0:	807b      	strh	r3, [r7, #2]
 80029c2:	4613      	mov	r3, r2
 80029c4:	803b      	strh	r3, [r7, #0]
	MDE[EA].func(btnU, btnD, btnL, btnR, btnC);
 80029c6:	4b0b      	ldr	r3, [pc, #44]	; (80029f4 <fsm+0x4c>)
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	4a0b      	ldr	r2, [pc, #44]	; (80029f8 <fsm+0x50>)
 80029cc:	00db      	lsls	r3, r3, #3
 80029ce:	4413      	add	r3, r2
 80029d0:	685c      	ldr	r4, [r3, #4]
 80029d2:	f9b7 5000 	ldrsh.w	r5, [r7]
 80029d6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80029da:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80029de:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80029e2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80029e6:	9300      	str	r3, [sp, #0]
 80029e8:	462b      	mov	r3, r5
 80029ea:	47a0      	blx	r4
}
 80029ec:	bf00      	nop
 80029ee:	3708      	adds	r7, #8
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bdb0      	pop	{r4, r5, r7, pc}
 80029f4:	200006d8 	.word	0x200006d8
 80029f8:	2000017c 	.word	0x2000017c

080029fc <LL_RCC_EnableRTC>:
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002a00:	4a05      	ldr	r2, [pc, #20]	; (8002a18 <LL_RCC_EnableRTC+0x1c>)
 8002a02:	4b05      	ldr	r3, [pc, #20]	; (8002a18 <LL_RCC_EnableRTC+0x1c>)
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a0a:	6213      	str	r3, [r2, #32]
}
 8002a0c:	bf00      	nop
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	40021000 	.word	0x40021000

08002a1c <LL_RTC_EnableInitMode>:
  * @rmtoll ISR          INIT          LL_RTC_EnableInitMode
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableInitMode(RTC_TypeDef *RTCx)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  /* Set the Initialization mode */
  WRITE_REG(RTCx->ISR, RTC_INIT_MASK);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f04f 32ff 	mov.w	r2, #4294967295
 8002a2a:	60da      	str	r2, [r3, #12]
}
 8002a2c:	bf00      	nop
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <LL_RTC_DisableInitMode>:
  * @rmtoll ISR          INIT          LL_RTC_DisableInitMode
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableInitMode(RTC_TypeDef *RTCx)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  /* Exit Initialization mode */
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a46:	60da      	str	r2, [r3, #12]
}
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <LL_RTC_SetAsynchPrescaler>:
  * @param  RTCx RTC Instance
  * @param  AsynchPrescaler Value between Min_Data = 0 and Max_Data = 0x7F
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetAsynchPrescaler(RTC_TypeDef *RTCx, uint32_t AsynchPrescaler)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_PRER_PREDIV_A_Pos);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	041b      	lsls	r3, r3, #16
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	611a      	str	r2, [r3, #16]
}
 8002a70:	bf00      	nop
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <LL_RTC_SetSynchPrescaler>:
  * @param  RTCx RTC Instance
  * @param  SynchPrescaler Value between Min_Data = 0 and Max_Data = 0x7FFF
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetSynchPrescaler(RTC_TypeDef *RTCx, uint32_t SynchPrescaler)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002a8e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002a92:	683a      	ldr	r2, [r7, #0]
 8002a94:	431a      	orrs	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	611a      	str	r2, [r3, #16]
}
 8002a9a:	bf00      	nop
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b083      	sub	sp, #12
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	22ff      	movs	r2, #255	; 0xff
 8002ab2:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002ab4:	bf00      	nop
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	22ca      	movs	r2, #202	; 0xca
 8002acc:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2253      	movs	r2, #83	; 0x53
 8002ad2:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002ad4:	bf00      	nop
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <LL_RTC_TIME_GetHour>:
  *         TR           HU            LL_RTC_TIME_GetHour
  * @param  RTCx RTC Instance
  * @retval Value between Min_Data=0x01 and Max_Data=0x12 or between Min_Data=0x00 and Max_Data=0x23
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetHour(RTC_TypeDef *RTCx)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RTCx->TR, (RTC_TR_HT | RTC_TR_HU))) >> RTC_TR_HU_Pos);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	0c1b      	lsrs	r3, r3, #16
 8002aee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr

08002afe <LL_RTC_TIME_GetMinute>:
  *         TR           MNU           LL_RTC_TIME_GetMinute
  * @param  RTCx RTC Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0x59
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetMinute(RTC_TypeDef *RTCx)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b083      	sub	sp, #12
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->TR, (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	0a1b      	lsrs	r3, r3, #8
 8002b0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <LL_RTC_TIME_GetSecond>:
  *         TR           SU            LL_RTC_TIME_GetSecond
  * @param  RTCx RTC Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0x59
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSecond(RTC_TypeDef *RTCx)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->TR, (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <LL_RTC_TIME_Config>:
  * @param  Minutes Value between Min_Data=0x00 and Max_Data=0x59
  * @param  Seconds Value between Min_Data=0x00 and Max_Data=0x59
  * @retval None
  */
__STATIC_INLINE void LL_RTC_TIME_Config(RTC_TypeDef *RTCx, uint32_t Format12_24, uint32_t Hours, uint32_t Minutes, uint32_t Seconds)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b087      	sub	sp, #28
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	607a      	str	r2, [r7, #4]
 8002b44:	603b      	str	r3, [r7, #0]
  uint32_t temp = 0U;
 8002b46:	2300      	movs	r3, #0
 8002b48:	617b      	str	r3, [r7, #20]

  temp = Format12_24                                                                                    | \
         (((Hours & 0xF0U) << (RTC_TR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_TR_HU_Pos))     | \
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	041b      	lsls	r3, r3, #16
 8002b4e:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
  temp = Format12_24                                                                                    | \
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	431a      	orrs	r2, r3
         (((Minutes & 0xF0U) << (RTC_TR_MNT_Pos - 4U)) | ((Minutes & 0x0FU) << RTC_TR_MNU_Pos)) | \
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	021b      	lsls	r3, r3, #8
 8002b5a:	b29b      	uxth	r3, r3
         (((Hours & 0xF0U) << (RTC_TR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_TR_HU_Pos))     | \
 8002b5c:	431a      	orrs	r2, r3
         (((Seconds & 0xF0U) << (RTC_TR_ST_Pos - 4U)) | ((Seconds & 0x0FU) << RTC_TR_SU_Pos));
 8002b5e:	6a3b      	ldr	r3, [r7, #32]
 8002b60:	b2db      	uxtb	r3, r3
  temp = Format12_24                                                                                    | \
 8002b62:	4313      	orrs	r3, r2
 8002b64:	617b      	str	r3, [r7, #20]
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
 8002b6e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	431a      	orrs	r2, r3
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	601a      	str	r2, [r3, #0]
}
 8002b7a:	bf00      	nop
 8002b7c:	371c      	adds	r7, #28
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr

08002b86 <LL_RTC_BAK_SetRegister>:
  *         (*) value not defined in all devices.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_RTC_BAK_SetRegister(RTC_TypeDef *RTCx, uint32_t BackupRegister, uint32_t Data)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b087      	sub	sp, #28
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	60f8      	str	r0, [r7, #12]
 8002b8e:	60b9      	str	r1, [r7, #8]
 8002b90:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8002b92:	2300      	movs	r3, #0
 8002b94:	617b      	str	r3, [r7, #20]

  tmp = (uint32_t)(&(RTCx->BKP0R));
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	3350      	adds	r3, #80	; 0x50
 8002b9a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	697a      	ldr	r2, [r7, #20]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	601a      	str	r2, [r3, #0]
}
 8002bac:	bf00      	nop
 8002bae:	371c      	adds	r7, #28
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <LL_RTC_BAK_GetRegister>:
  *
  *         (*) value not defined in all devices.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_BAK_GetRegister(RTC_TypeDef *RTCx, uint32_t BackupRegister)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60fb      	str	r3, [r7, #12]

  tmp = (uint32_t)(&(RTCx->BKP0R));
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	3350      	adds	r3, #80	; 0x50
 8002bca:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3714      	adds	r7, #20
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <LL_RTC_IsActiveFlag_INIT>:
  * @rmtoll ISR          INITF         LL_RTC_IsActiveFlag_INIT
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_INIT(RTC_TypeDef *RTCx)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b083      	sub	sp, #12
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF));
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bf6:	2b40      	cmp	r3, #64	; 0x40
 8002bf8:	bf0c      	ite	eq
 8002bfa:	2301      	moveq	r3, #1
 8002bfc:	2300      	movne	r3, #0
 8002bfe:	b2db      	uxtb	r3, r3
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <LL_RTC_IsActiveFlag_RS>:
  * @rmtoll ISR          RSF           LL_RTC_IsActiveFlag_RS
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_RS(RTC_TypeDef *RTCx)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ISR, RTC_ISR_RSF) == (RTC_ISR_RSF));
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	f003 0320 	and.w	r3, r3, #32
 8002c1c:	2b20      	cmp	r3, #32
 8002c1e:	bf0c      	ite	eq
 8002c20:	2301      	moveq	r3, #1
 8002c22:	2300      	movne	r3, #0
 8002c24:	b2db      	uxtb	r3, r3
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <LL_RTC_ClearFlag_RS>:
  * @rmtoll ISR          RSF           LL_RTC_ClearFlag_RS
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_ClearFlag_RS(RTC_TypeDef *RTCx)
{
 8002c32:	b480      	push	{r7}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, (~((RTC_ISR_RSF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTCx->ISR & RTC_ISR_INIT)));
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c42:	f063 02a0 	orn	r2, r3, #160	; 0xa0
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	60da      	str	r2, [r3, #12]
}
 8002c4a:	bf00      	nop
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
	...

08002c58 <MX_RTC_Init>:

/* USER CODE END 0 */

/* RTC init function */
void MX_RTC_Init(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  LL_RTC_InitTypeDef RTC_InitStruct = {0};
 8002c5e:	f107 030c 	add.w	r3, r7, #12
 8002c62:	2200      	movs	r2, #0
 8002c64:	601a      	str	r2, [r3, #0]
 8002c66:	605a      	str	r2, [r3, #4]
 8002c68:	609a      	str	r2, [r3, #8]
  LL_RTC_TimeTypeDef RTC_TimeStruct = {0};
 8002c6a:	1d3b      	adds	r3, r7, #4
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	601a      	str	r2, [r3, #0]
 8002c70:	605a      	str	r2, [r3, #4]
  LL_RTC_DateTypeDef RTC_DateStruct = {0};
 8002c72:	2300      	movs	r3, #0
 8002c74:	603b      	str	r3, [r7, #0]

  /* Peripheral clock enable */
  LL_RCC_EnableRTC();
 8002c76:	f7ff fec1 	bl	80029fc <LL_RCC_EnableRTC>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC and set the Time and Date
  */
  RTC_InitStruct.HourFormat = LL_RTC_HOURFORMAT_24HOUR;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	60fb      	str	r3, [r7, #12]
  RTC_InitStruct.AsynchPrescaler = 127;
 8002c7e:	237f      	movs	r3, #127	; 0x7f
 8002c80:	613b      	str	r3, [r7, #16]
  RTC_InitStruct.SynchPrescaler = 255;
 8002c82:	23ff      	movs	r3, #255	; 0xff
 8002c84:	617b      	str	r3, [r7, #20]
  LL_RTC_Init(RTC, &RTC_InitStruct);
 8002c86:	f107 030c 	add.w	r3, r7, #12
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	481f      	ldr	r0, [pc, #124]	; (8002d0c <MX_RTC_Init+0xb4>)
 8002c8e:	f000 ff15 	bl	8003abc <LL_RTC_Init>
  LL_RTC_SetAsynchPrescaler(RTC, 127);
 8002c92:	217f      	movs	r1, #127	; 0x7f
 8002c94:	481d      	ldr	r0, [pc, #116]	; (8002d0c <MX_RTC_Init+0xb4>)
 8002c96:	f7ff fedd 	bl	8002a54 <LL_RTC_SetAsynchPrescaler>
  LL_RTC_SetSynchPrescaler(RTC, 255);
 8002c9a:	21ff      	movs	r1, #255	; 0xff
 8002c9c:	481b      	ldr	r0, [pc, #108]	; (8002d0c <MX_RTC_Init+0xb4>)
 8002c9e:	f7ff feed 	bl	8002a7c <LL_RTC_SetSynchPrescaler>
  /** Initialize RTC and set the Time and Date
  */
  if(LL_RTC_BAK_GetRegister(RTC, LL_RTC_BKP_DR0) != 0x32F2){
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	4819      	ldr	r0, [pc, #100]	; (8002d0c <MX_RTC_Init+0xb4>)
 8002ca6:	f7ff ff87 	bl	8002bb8 <LL_RTC_BAK_GetRegister>
 8002caa:	4602      	mov	r2, r0
 8002cac:	f243 23f2 	movw	r3, #13042	; 0x32f2
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d01d      	beq.n	8002cf0 <MX_RTC_Init+0x98>

  RTC_TimeStruct.Hours = 0;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	723b      	strb	r3, [r7, #8]
  RTC_TimeStruct.Minutes = 0;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	727b      	strb	r3, [r7, #9]
  RTC_TimeStruct.Seconds = 0;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	72bb      	strb	r3, [r7, #10]
  LL_RTC_TIME_Init(RTC, LL_RTC_FORMAT_BIN, &RTC_TimeStruct);
 8002cc0:	1d3b      	adds	r3, r7, #4
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	2100      	movs	r1, #0
 8002cc6:	4811      	ldr	r0, [pc, #68]	; (8002d0c <MX_RTC_Init+0xb4>)
 8002cc8:	f000 ff28 	bl	8003b1c <LL_RTC_TIME_Init>
  RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_MONDAY;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	703b      	strb	r3, [r7, #0]
  RTC_DateStruct.Month = LL_RTC_MONTH_JANUARY;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	707b      	strb	r3, [r7, #1]
  RTC_DateStruct.Year = 0;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	70fb      	strb	r3, [r7, #3]
  LL_RTC_DATE_Init(RTC, LL_RTC_FORMAT_BIN, &RTC_DateStruct);
 8002cd8:	463b      	mov	r3, r7
 8002cda:	461a      	mov	r2, r3
 8002cdc:	2100      	movs	r1, #0
 8002cde:	480b      	ldr	r0, [pc, #44]	; (8002d0c <MX_RTC_Init+0xb4>)
 8002ce0:	f000 ffc2 	bl	8003c68 <LL_RTC_DATE_Init>
    LL_RTC_BAK_SetRegister(RTC,LL_RTC_BKP_DR0,0x32F2);
 8002ce4:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8002ce8:	2100      	movs	r1, #0
 8002cea:	4808      	ldr	r0, [pc, #32]	; (8002d0c <MX_RTC_Init+0xb4>)
 8002cec:	f7ff ff4b 	bl	8002b86 <LL_RTC_BAK_SetRegister>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  LL_RTC_DisableWriteProtection(RTC);
 8002cf0:	4806      	ldr	r0, [pc, #24]	; (8002d0c <MX_RTC_Init+0xb4>)
 8002cf2:	f7ff fee5 	bl	8002ac0 <LL_RTC_DisableWriteProtection>
  MX_RTC_Enter_InitMode();
 8002cf6:	f000 f80b 	bl	8002d10 <MX_RTC_Enter_InitMode>

  MX_RTC_Exit_InitMode();
 8002cfa:	f000 f819 	bl	8002d30 <MX_RTC_Exit_InitMode>
  LL_RTC_EnableWriteProtection(RTC);
 8002cfe:	4803      	ldr	r0, [pc, #12]	; (8002d0c <MX_RTC_Init+0xb4>)
 8002d00:	f7ff fed1 	bl	8002aa6 <LL_RTC_EnableWriteProtection>
  /* USER CODE END RTC_Init 2 */

}
 8002d04:	bf00      	nop
 8002d06:	3718      	adds	r7, #24
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	40002800 	.word	0x40002800

08002d10 <MX_RTC_Enter_InitMode>:

/* USER CODE BEGIN 1 */

/*This functions is to start the RTC initialization mode*/
void MX_RTC_Enter_InitMode(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
	LL_RTC_EnableInitMode(RTC);
 8002d14:	4805      	ldr	r0, [pc, #20]	; (8002d2c <MX_RTC_Enter_InitMode+0x1c>)
 8002d16:	f7ff fe81 	bl	8002a1c <LL_RTC_EnableInitMode>
	while (!LL_RTC_IsActiveFlag_INIT(RTC));
 8002d1a:	bf00      	nop
 8002d1c:	4803      	ldr	r0, [pc, #12]	; (8002d2c <MX_RTC_Enter_InitMode+0x1c>)
 8002d1e:	f7ff ff62 	bl	8002be6 <LL_RTC_IsActiveFlag_INIT>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d0f9      	beq.n	8002d1c <MX_RTC_Enter_InitMode+0xc>

	return;
 8002d28:	bf00      	nop
}
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	40002800 	.word	0x40002800

08002d30 <MX_RTC_Exit_InitMode>:

/*This functions is to finish the RTC initialization mode*/
void MX_RTC_Exit_InitMode (void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
	LL_RTC_DisableInitMode(RTC);
 8002d34:	4807      	ldr	r0, [pc, #28]	; (8002d54 <MX_RTC_Exit_InitMode+0x24>)
 8002d36:	f7ff fe7f 	bl	8002a38 <LL_RTC_DisableInitMode>
	LL_RTC_ClearFlag_RS(RTC);
 8002d3a:	4806      	ldr	r0, [pc, #24]	; (8002d54 <MX_RTC_Exit_InitMode+0x24>)
 8002d3c:	f7ff ff79 	bl	8002c32 <LL_RTC_ClearFlag_RS>
	while (!LL_RTC_IsActiveFlag_RS(RTC));
 8002d40:	bf00      	nop
 8002d42:	4804      	ldr	r0, [pc, #16]	; (8002d54 <MX_RTC_Exit_InitMode+0x24>)
 8002d44:	f7ff ff62 	bl	8002c0c <LL_RTC_IsActiveFlag_RS>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d0f9      	beq.n	8002d42 <MX_RTC_Exit_InitMode+0x12>
}
 8002d4e:	bf00      	nop
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	40002800 	.word	0x40002800

08002d58 <MX_RTC_GetTime>:

/*This function returns the actual time*/
void MX_RTC_GetTime(uint8_t *hours, uint8_t *minutes, uint8_t *seconds)
{
 8002d58:	b590      	push	{r4, r7, lr}
 8002d5a:	b085      	sub	sp, #20
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
	*hours   = __LL_RTC_CONVERT_BCD2BIN (LL_RTC_TIME_GetHour(RTC));
 8002d64:	482a      	ldr	r0, [pc, #168]	; (8002e10 <MX_RTC_GetTime+0xb8>)
 8002d66:	f7ff febb 	bl	8002ae0 <LL_RTC_TIME_GetHour>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	111b      	asrs	r3, r3, #4
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	f003 030f 	and.w	r3, r3, #15
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	461a      	mov	r2, r3
 8002d7a:	0092      	lsls	r2, r2, #2
 8002d7c:	4413      	add	r3, r2
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	b2dc      	uxtb	r4, r3
 8002d82:	4823      	ldr	r0, [pc, #140]	; (8002e10 <MX_RTC_GetTime+0xb8>)
 8002d84:	f7ff feac 	bl	8002ae0 <LL_RTC_TIME_GetHour>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	f003 030f 	and.w	r3, r3, #15
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	4423      	add	r3, r4
 8002d94:	b2da      	uxtb	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	701a      	strb	r2, [r3, #0]
	*minutes = __LL_RTC_CONVERT_BCD2BIN (LL_RTC_TIME_GetMinute(RTC));
 8002d9a:	481d      	ldr	r0, [pc, #116]	; (8002e10 <MX_RTC_GetTime+0xb8>)
 8002d9c:	f7ff feaf 	bl	8002afe <LL_RTC_TIME_GetMinute>
 8002da0:	4603      	mov	r3, r0
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	111b      	asrs	r3, r3, #4
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	f003 030f 	and.w	r3, r3, #15
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	461a      	mov	r2, r3
 8002db0:	0092      	lsls	r2, r2, #2
 8002db2:	4413      	add	r3, r2
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	b2dc      	uxtb	r4, r3
 8002db8:	4815      	ldr	r0, [pc, #84]	; (8002e10 <MX_RTC_GetTime+0xb8>)
 8002dba:	f7ff fea0 	bl	8002afe <LL_RTC_TIME_GetMinute>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	f003 030f 	and.w	r3, r3, #15
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	4423      	add	r3, r4
 8002dca:	b2da      	uxtb	r2, r3
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	701a      	strb	r2, [r3, #0]
	*seconds = __LL_RTC_CONVERT_BCD2BIN (LL_RTC_TIME_GetSecond(RTC));
 8002dd0:	480f      	ldr	r0, [pc, #60]	; (8002e10 <MX_RTC_GetTime+0xb8>)
 8002dd2:	f7ff fea3 	bl	8002b1c <LL_RTC_TIME_GetSecond>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	111b      	asrs	r3, r3, #4
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	f003 030f 	and.w	r3, r3, #15
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	461a      	mov	r2, r3
 8002de6:	0092      	lsls	r2, r2, #2
 8002de8:	4413      	add	r3, r2
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	b2dc      	uxtb	r4, r3
 8002dee:	4808      	ldr	r0, [pc, #32]	; (8002e10 <MX_RTC_GetTime+0xb8>)
 8002df0:	f7ff fe94 	bl	8002b1c <LL_RTC_TIME_GetSecond>
 8002df4:	4603      	mov	r3, r0
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	f003 030f 	and.w	r3, r3, #15
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	4423      	add	r3, r4
 8002e00:	b2da      	uxtb	r2, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	701a      	strb	r2, [r3, #0]
	return;
 8002e06:	bf00      	nop
}
 8002e08:	3714      	adds	r7, #20
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd90      	pop	{r4, r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	40002800 	.word	0x40002800

08002e14 <MX_RTC_SetTime>:
	return;
}

/*This function allows to set manually actual time*/
void MX_RTC_SetTime(uint8_t hour, uint8_t minutes, uint8_t seconds)
{
 8002e14:	b5b0      	push	{r4, r5, r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af02      	add	r7, sp, #8
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	71fb      	strb	r3, [r7, #7]
 8002e1e:	460b      	mov	r3, r1
 8002e20:	71bb      	strb	r3, [r7, #6]
 8002e22:	4613      	mov	r3, r2
 8002e24:	717b      	strb	r3, [r7, #5]
	LL_RTC_DisableWriteProtection(RTC);
 8002e26:	482b      	ldr	r0, [pc, #172]	; (8002ed4 <MX_RTC_SetTime+0xc0>)
 8002e28:	f7ff fe4a 	bl	8002ac0 <LL_RTC_DisableWriteProtection>
	MX_RTC_Enter_InitMode();
 8002e2c:	f7ff ff70 	bl	8002d10 <MX_RTC_Enter_InitMode>
	LL_RTC_TIME_Config(RTC,LL_RTC_HOURFORMAT_24HOUR, __LL_RTC_CONVERT_BIN2BCD (hour), __LL_RTC_CONVERT_BIN2BCD (minutes), __LL_RTC_CONVERT_BIN2BCD (seconds));
 8002e30:	79fb      	ldrb	r3, [r7, #7]
 8002e32:	4a29      	ldr	r2, [pc, #164]	; (8002ed8 <MX_RTC_SetTime+0xc4>)
 8002e34:	fba2 2303 	umull	r2, r3, r2, r3
 8002e38:	08db      	lsrs	r3, r3, #3
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	011b      	lsls	r3, r3, #4
 8002e3e:	b2d8      	uxtb	r0, r3
 8002e40:	79fa      	ldrb	r2, [r7, #7]
 8002e42:	4b25      	ldr	r3, [pc, #148]	; (8002ed8 <MX_RTC_SetTime+0xc4>)
 8002e44:	fba3 1302 	umull	r1, r3, r3, r2
 8002e48:	08d9      	lsrs	r1, r3, #3
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	440b      	add	r3, r1
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	4303      	orrs	r3, r0
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	461c      	mov	r4, r3
 8002e5c:	79bb      	ldrb	r3, [r7, #6]
 8002e5e:	4a1e      	ldr	r2, [pc, #120]	; (8002ed8 <MX_RTC_SetTime+0xc4>)
 8002e60:	fba2 2303 	umull	r2, r3, r2, r3
 8002e64:	08db      	lsrs	r3, r3, #3
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	011b      	lsls	r3, r3, #4
 8002e6a:	b2d8      	uxtb	r0, r3
 8002e6c:	79ba      	ldrb	r2, [r7, #6]
 8002e6e:	4b1a      	ldr	r3, [pc, #104]	; (8002ed8 <MX_RTC_SetTime+0xc4>)
 8002e70:	fba3 1302 	umull	r1, r3, r3, r2
 8002e74:	08d9      	lsrs	r1, r3, #3
 8002e76:	460b      	mov	r3, r1
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	440b      	add	r3, r1
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	4303      	orrs	r3, r0
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	461d      	mov	r5, r3
 8002e88:	797b      	ldrb	r3, [r7, #5]
 8002e8a:	4a13      	ldr	r2, [pc, #76]	; (8002ed8 <MX_RTC_SetTime+0xc4>)
 8002e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e90:	08db      	lsrs	r3, r3, #3
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	011b      	lsls	r3, r3, #4
 8002e96:	b2d8      	uxtb	r0, r3
 8002e98:	797a      	ldrb	r2, [r7, #5]
 8002e9a:	4b0f      	ldr	r3, [pc, #60]	; (8002ed8 <MX_RTC_SetTime+0xc4>)
 8002e9c:	fba3 1302 	umull	r1, r3, r3, r2
 8002ea0:	08d9      	lsrs	r1, r3, #3
 8002ea2:	460b      	mov	r3, r1
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	440b      	add	r3, r1
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	4303      	orrs	r3, r0
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	9300      	str	r3, [sp, #0]
 8002eb4:	462b      	mov	r3, r5
 8002eb6:	4622      	mov	r2, r4
 8002eb8:	2100      	movs	r1, #0
 8002eba:	4806      	ldr	r0, [pc, #24]	; (8002ed4 <MX_RTC_SetTime+0xc0>)
 8002ebc:	f7ff fe3c 	bl	8002b38 <LL_RTC_TIME_Config>
	MX_RTC_Exit_InitMode();
 8002ec0:	f7ff ff36 	bl	8002d30 <MX_RTC_Exit_InitMode>
	LL_RTC_EnableWriteProtection(RTC);
 8002ec4:	4803      	ldr	r0, [pc, #12]	; (8002ed4 <MX_RTC_SetTime+0xc0>)
 8002ec6:	f7ff fdee 	bl	8002aa6 <LL_RTC_EnableWriteProtection>
	return;
 8002eca:	bf00      	nop
}
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bdb0      	pop	{r4, r5, r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	40002800 	.word	0x40002800
 8002ed8:	cccccccd 	.word	0xcccccccd

08002edc <LL_AHB1_GRP1_EnableClock>:
{
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8002ee4:	4908      	ldr	r1, [pc, #32]	; (8002f08 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002ee6:	4b08      	ldr	r3, [pc, #32]	; (8002f08 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002ee8:	695a      	ldr	r2, [r3, #20]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8002ef0:	4b05      	ldr	r3, [pc, #20]	; (8002f08 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002ef2:	695a      	ldr	r2, [r3, #20]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002efa:	68fb      	ldr	r3, [r7, #12]
}
 8002efc:	bf00      	nop
 8002efe:	3714      	adds	r7, #20
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr
 8002f08:	40021000 	.word	0x40021000

08002f0c <LL_APB2_GRP1_EnableClock>:
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b085      	sub	sp, #20
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002f14:	4908      	ldr	r1, [pc, #32]	; (8002f38 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002f16:	4b08      	ldr	r3, [pc, #32]	; (8002f38 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002f18:	699a      	ldr	r2, [r3, #24]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002f20:	4b05      	ldr	r3, [pc, #20]	; (8002f38 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002f22:	699a      	ldr	r2, [r3, #24]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4013      	ands	r3, r2
 8002f28:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
}
 8002f2c:	bf00      	nop
 8002f2e:	3714      	adds	r7, #20
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr
 8002f38:	40021000 	.word	0x40021000

08002f3c <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	601a      	str	r2, [r3, #0]
}
 8002f50:	bf00      	nop
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f023 0210 	bic.w	r2, r3, #16
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	431a      	orrs	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	605a      	str	r2, [r3, #4]
}
 8002f76:	bf00      	nop
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr

08002f82 <LL_SPI_DisableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_DisableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 8002f82:	b480      	push	{r7}
 8002f84:	b083      	sub	sp, #12
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f023 0208 	bic.w	r2, r3, #8
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	605a      	str	r2, [r3, #4]
}
 8002f96:	bf00      	nop
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr

08002fa2 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	b083      	sub	sp, #12
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d101      	bne.n	8002fba <LL_SPI_IsActiveFlag_TXE+0x18>
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e000      	b.n	8002fbc <LL_SPI_IsActiveFlag_TXE+0x1a>
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <LL_SPI_IsActiveFlag_BSY>:
  * @rmtoll SR           BSY           LL_SPI_IsActiveFlag_BSY
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_BSY(SPI_TypeDef *SPIx)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fd8:	2b80      	cmp	r3, #128	; 0x80
 8002fda:	d101      	bne.n	8002fe0 <LL_SPI_IsActiveFlag_BSY+0x18>
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e000      	b.n	8002fe2 <LL_SPI_IsActiveFlag_BSY+0x1a>
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr

08002fee <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8002fee:	b480      	push	{r7}
 8002ff0:	b085      	sub	sp, #20
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	330c      	adds	r3, #12
 8002ffe:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	78fa      	ldrb	r2, [r7, #3]
 8003004:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8003006:	bf00      	nop
 8003008:	3714      	adds	r7, #20
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr

08003012 <LL_GPIO_SetOutputPin>:
{
 8003012:	b480      	push	{r7}
 8003014:	b083      	sub	sp, #12
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
 800301a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	683a      	ldr	r2, [r7, #0]
 8003020:	619a      	str	r2, [r3, #24]
}
 8003022:	bf00      	nop
 8003024:	370c      	adds	r7, #12
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr

0800302e <LL_GPIO_ResetOutputPin>:
{
 800302e:	b480      	push	{r7}
 8003030:	b083      	sub	sp, #12
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
 8003036:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800303e:	bf00      	nop
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
	...

0800304c <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b090      	sub	sp, #64	; 0x40
 8003050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8003052:	f107 0318 	add.w	r3, r7, #24
 8003056:	2228      	movs	r2, #40	; 0x28
 8003058:	2100      	movs	r1, #0
 800305a:	4618      	mov	r0, r3
 800305c:	f001 fad8 	bl	8004610 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003060:	463b      	mov	r3, r7
 8003062:	2200      	movs	r2, #0
 8003064:	601a      	str	r2, [r3, #0]
 8003066:	605a      	str	r2, [r3, #4]
 8003068:	609a      	str	r2, [r3, #8]
 800306a:	60da      	str	r2, [r3, #12]
 800306c:	611a      	str	r2, [r3, #16]
 800306e:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8003070:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003074:	f7ff ff4a 	bl	8002f0c <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8003078:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800307c:	f7ff ff2e 	bl	8002edc <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8003080:	2320      	movs	r3, #32
 8003082:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003084:	2302      	movs	r3, #2
 8003086:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8003088:	2303      	movs	r3, #3
 800308a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800308c:	2300      	movs	r3, #0
 800308e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8003090:	2301      	movs	r3, #1
 8003092:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8003094:	2305      	movs	r3, #5
 8003096:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003098:	463b      	mov	r3, r7
 800309a:	4619      	mov	r1, r3
 800309c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030a0:	f000 fa8b 	bl	80035ba <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 80030a4:	2380      	movs	r3, #128	; 0x80
 80030a6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80030a8:	2302      	movs	r3, #2
 80030aa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80030ac:	2303      	movs	r3, #3
 80030ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80030b0:	2300      	movs	r3, #0
 80030b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80030b4:	2302      	movs	r3, #2
 80030b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80030b8:	2305      	movs	r3, #5
 80030ba:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030bc:	463b      	mov	r3, r7
 80030be:	4619      	mov	r1, r3
 80030c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030c4:	f000 fa79 	bl	80035ba <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80030c8:	2300      	movs	r3, #0
 80030ca:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80030cc:	f44f 7382 	mov.w	r3, #260	; 0x104
 80030d0:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80030d2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80030d6:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80030d8:	2302      	movs	r3, #2
 80030da:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80030dc:	2301      	movs	r3, #1
 80030de:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80030e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV256;
 80030e6:	2338      	movs	r3, #56	; 0x38
 80030e8:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80030ea:	2300      	movs	r3, #0
 80030ec:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80030ee:	2300      	movs	r3, #0
 80030f0:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 80030f2:	2307      	movs	r3, #7
 80030f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 80030f6:	f107 0318 	add.w	r3, r7, #24
 80030fa:	4619      	mov	r1, r3
 80030fc:	4808      	ldr	r0, [pc, #32]	; (8003120 <MX_SPI1_Init+0xd4>)
 80030fe:	f000 ff13 	bl	8003f28 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8003102:	2100      	movs	r1, #0
 8003104:	4806      	ldr	r0, [pc, #24]	; (8003120 <MX_SPI1_Init+0xd4>)
 8003106:	f7ff ff29 	bl	8002f5c <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI1);
 800310a:	4805      	ldr	r0, [pc, #20]	; (8003120 <MX_SPI1_Init+0xd4>)
 800310c:	f7ff ff39 	bl	8002f82 <LL_SPI_DisableNSSPulseMgt>
  /* USER CODE BEGIN SPI1_Init 2 */
 LL_SPI_Enable(SPI1);
 8003110:	4803      	ldr	r0, [pc, #12]	; (8003120 <MX_SPI1_Init+0xd4>)
 8003112:	f7ff ff13 	bl	8002f3c <LL_SPI_Enable>
  /* USER CODE END SPI1_Init 2 */

}
 8003116:	bf00      	nop
 8003118:	3740      	adds	r7, #64	; 0x40
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	40013000 	.word	0x40013000

08003124 <MX_SPI1_Send>:

/* USER CODE BEGIN 1 */
void MX_SPI1_Send(uint8_t tx)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	4603      	mov	r3, r0
 800312c:	71fb      	strb	r3, [r7, #7]
	/*This functions sends a command/data of 8 bits, if A0=0, we send a command
	, if A0=1, we send a data*/

	/*Check BSY flag, SPI is not busy */
	while (LL_SPI_IsActiveFlag_BSY(SPI1));
 800312e:	bf00      	nop
 8003130:	480a      	ldr	r0, [pc, #40]	; (800315c <MX_SPI1_Send+0x38>)
 8003132:	f7ff ff49 	bl	8002fc8 <LL_SPI_IsActiveFlag_BSY>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d1f9      	bne.n	8003130 <MX_SPI1_Send+0xc>

	/*Send data of 8 bits*/
	LL_SPI_TransmitData8(SPI1, tx);
 800313c:	79fb      	ldrb	r3, [r7, #7]
 800313e:	4619      	mov	r1, r3
 8003140:	4806      	ldr	r0, [pc, #24]	; (800315c <MX_SPI1_Send+0x38>)
 8003142:	f7ff ff54 	bl	8002fee <LL_SPI_TransmitData8>

	/*Wait until the Tx Buffer is empty*/
	while (!LL_SPI_IsActiveFlag_TXE(SPI1));
 8003146:	bf00      	nop
 8003148:	4804      	ldr	r0, [pc, #16]	; (800315c <MX_SPI1_Send+0x38>)
 800314a:	f7ff ff2a 	bl	8002fa2 <LL_SPI_IsActiveFlag_TXE>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d0f9      	beq.n	8003148 <MX_SPI1_Send+0x24>

	return;
 8003154:	bf00      	nop

}
 8003156:	3708      	adds	r7, #8
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	40013000 	.word	0x40013000

08003160 <MX_SPI1_CS_Enable>:
void MX_SPI1_CS_Enable(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
	/*Pin PB6 is configured as CHIP SELECT signal of SPI1,
	CPOL=1, therefore, it is active in LOW
	PB6   ------> SPI1_CS_N*/

	LL_GPIO_ResetOutputPin(LCD_CS_N_GPIO_Port,LCD_CS_N_Pin );
 8003164:	2140      	movs	r1, #64	; 0x40
 8003166:	4802      	ldr	r0, [pc, #8]	; (8003170 <MX_SPI1_CS_Enable+0x10>)
 8003168:	f7ff ff61 	bl	800302e <LL_GPIO_ResetOutputPin>
}
 800316c:	bf00      	nop
 800316e:	bd80      	pop	{r7, pc}
 8003170:	48000400 	.word	0x48000400

08003174 <MX_SPI1_CS_Disable>:
void MX_SPI1_CS_Disable(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	af00      	add	r7, sp, #0
	/*Pin PB6 is configured as CHIP SELECT signal of SPI1,
	CPOL=1, therefore, it is disable in HIGH
	PB6   ------> SPI1_CS_N*/

	LL_GPIO_SetOutputPin(LCD_CS_N_GPIO_Port,LCD_CS_N_Pin);
 8003178:	2140      	movs	r1, #64	; 0x40
 800317a:	4802      	ldr	r0, [pc, #8]	; (8003184 <MX_SPI1_CS_Disable+0x10>)
 800317c:	f7ff ff49 	bl	8003012 <LL_GPIO_SetOutputPin>
}
 8003180:	bf00      	nop
 8003182:	bd80      	pop	{r7, pc}
 8003184:	48000400 	.word	0x48000400

08003188 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800318c:	e7fe      	b.n	800318c <NMI_Handler+0x4>

0800318e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800318e:	b480      	push	{r7}
 8003190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003192:	e7fe      	b.n	8003192 <HardFault_Handler+0x4>

08003194 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003194:	b480      	push	{r7}
 8003196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003198:	e7fe      	b.n	8003198 <MemManage_Handler+0x4>

0800319a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800319a:	b480      	push	{r7}
 800319c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800319e:	e7fe      	b.n	800319e <BusFault_Handler+0x4>

080031a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031a0:	b480      	push	{r7}
 80031a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031a4:	e7fe      	b.n	80031a4 <UsageFault_Handler+0x4>

080031a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031a6:	b480      	push	{r7}
 80031a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031aa:	bf00      	nop
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031b8:	bf00      	nop
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031c2:	b480      	push	{r7}
 80031c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031c6:	bf00      	nop
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031d4:	bf00      	nop
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
	...

080031e0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031e4:	4a06      	ldr	r2, [pc, #24]	; (8003200 <SystemInit+0x20>)
 80031e6:	4b06      	ldr	r3, [pc, #24]	; (8003200 <SystemInit+0x20>)
 80031e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031f4:	bf00      	nop
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	e000ed00 	.word	0xe000ed00

08003204 <LL_ADC_REG_SetSequencerLength>:
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003212:	f023 020f 	bic.w	r2, r3, #15
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	431a      	orrs	r2, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800321e:	bf00      	nop
 8003220:	370c      	adds	r7, #12
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr

0800322a <LL_ADC_IsEnabled>:
{
 800322a:	b480      	push	{r7}
 800322c:	b083      	sub	sp, #12
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b01      	cmp	r3, #1
 800323c:	bf0c      	ite	eq
 800323e:	2301      	moveq	r3, #1
 8003240:	2300      	movne	r3, #0
 8003242:	b2db      	uxtb	r3, r3
}
 8003244:	4618      	mov	r0, r3
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8003250:	b590      	push	{r4, r7, lr}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800325a:	2300      	movs	r3, #0
 800325c:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 800325e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003262:	f7ff ffe2 	bl	800322a <LL_ADC_IsEnabled>
 8003266:	4604      	mov	r4, r0
 8003268:	4817      	ldr	r0, [pc, #92]	; (80032c8 <LL_ADC_CommonInit+0x78>)
 800326a:	f7ff ffde 	bl	800322a <LL_ADC_IsEnabled>
 800326e:	4603      	mov	r3, r0
 8003270:	4323      	orrs	r3, r4
 8003272:	2b00      	cmp	r3, #0
 8003274:	d120      	bne.n	80032b8 <LL_ADC_CommonInit+0x68>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d012      	beq.n	80032a4 <LL_ADC_CommonInit+0x54>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	689a      	ldr	r2, [r3, #8]
 8003282:	4b12      	ldr	r3, [pc, #72]	; (80032cc <LL_ADC_CommonInit+0x7c>)
 8003284:	4013      	ands	r3, r2
 8003286:	683a      	ldr	r2, [r7, #0]
 8003288:	6811      	ldr	r1, [r2, #0]
 800328a:	683a      	ldr	r2, [r7, #0]
 800328c:	6852      	ldr	r2, [r2, #4]
 800328e:	4311      	orrs	r1, r2
 8003290:	683a      	ldr	r2, [r7, #0]
 8003292:	6892      	ldr	r2, [r2, #8]
 8003294:	4311      	orrs	r1, r2
 8003296:	683a      	ldr	r2, [r7, #0]
 8003298:	68d2      	ldr	r2, [r2, #12]
 800329a:	430a      	orrs	r2, r1
 800329c:	431a      	orrs	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	609a      	str	r2, [r3, #8]
 80032a2:	e00b      	b.n	80032bc <LL_ADC_CommonInit+0x6c>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689a      	ldr	r2, [r3, #8]
 80032a8:	4b08      	ldr	r3, [pc, #32]	; (80032cc <LL_ADC_CommonInit+0x7c>)
 80032aa:	4013      	ands	r3, r2
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	6812      	ldr	r2, [r2, #0]
 80032b0:	431a      	orrs	r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	609a      	str	r2, [r3, #8]
 80032b6:	e001      	b.n	80032bc <LL_ADC_CommonInit+0x6c>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 80032bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3714      	adds	r7, #20
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd90      	pop	{r4, r7, pc}
 80032c6:	bf00      	nop
 80032c8:	50000100 	.word	0x50000100
 80032cc:	fffc30e0 	.word	0xfffc30e0

080032d0 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80032da:	2300      	movs	r3, #0
 80032dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f7ff ffa3 	bl	800322a <LL_ADC_IsEnabled>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d111      	bne.n	800330e <LL_ADC_Init+0x3e>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032f2:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80032f6:	683a      	ldr	r2, [r7, #0]
 80032f8:	6811      	ldr	r1, [r2, #0]
 80032fa:	683a      	ldr	r2, [r7, #0]
 80032fc:	6852      	ldr	r2, [r2, #4]
 80032fe:	4311      	orrs	r1, r2
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	6892      	ldr	r2, [r2, #8]
 8003304:	430a      	orrs	r2, r1
 8003306:	431a      	orrs	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	60da      	str	r2, [r3, #12]
 800330c:	e001      	b.n	8003312 <LL_ADC_Init+0x42>
    
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8003312:	7bfb      	ldrb	r3, [r7, #15]
}
 8003314:	4618      	mov	r0, r3
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003326:	2300      	movs	r3, #0
 8003328:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f7ff ff7d 	bl	800322a <LL_ADC_IsEnabled>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d132      	bne.n	800339c <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 serie, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d015      	beq.n	800336a <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	68da      	ldr	r2, [r3, #12]
 8003342:	4b1a      	ldr	r3, [pc, #104]	; (80033ac <LL_ADC_REG_Init+0x90>)
 8003344:	4013      	ands	r3, r2
 8003346:	683a      	ldr	r2, [r7, #0]
 8003348:	6811      	ldr	r1, [r2, #0]
 800334a:	683a      	ldr	r2, [r7, #0]
 800334c:	6892      	ldr	r2, [r2, #8]
 800334e:	4311      	orrs	r1, r2
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	68d2      	ldr	r2, [r2, #12]
 8003354:	4311      	orrs	r1, r2
 8003356:	683a      	ldr	r2, [r7, #0]
 8003358:	6912      	ldr	r2, [r2, #16]
 800335a:	4311      	orrs	r1, r2
 800335c:	683a      	ldr	r2, [r7, #0]
 800335e:	6952      	ldr	r2, [r2, #20]
 8003360:	430a      	orrs	r2, r1
 8003362:	431a      	orrs	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	60da      	str	r2, [r3, #12]
 8003368:	e011      	b.n	800338e <LL_ADC_REG_Init+0x72>
                 | ADC_REG_InitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	68da      	ldr	r2, [r3, #12]
 800336e:	4b0f      	ldr	r3, [pc, #60]	; (80033ac <LL_ADC_REG_Init+0x90>)
 8003370:	4013      	ands	r3, r2
 8003372:	683a      	ldr	r2, [r7, #0]
 8003374:	6811      	ldr	r1, [r2, #0]
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	68d2      	ldr	r2, [r2, #12]
 800337a:	4311      	orrs	r1, r2
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	6912      	ldr	r2, [r2, #16]
 8003380:	4311      	orrs	r1, r2
 8003382:	683a      	ldr	r2, [r7, #0]
 8003384:	6952      	ldr	r2, [r2, #20]
 8003386:	430a      	orrs	r2, r1
 8003388:	431a      	orrs	r2, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	60da      	str	r2, [r3, #12]
                 | ADC_REG_InitStruct->Overrun
                );
    }
    
    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	4619      	mov	r1, r3
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f7ff ff35 	bl	8003204 <LL_ADC_REG_SetSequencerLength>
 800339a:	e001      	b.n	80033a0 <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80033a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	fff0c03c 	.word	0xfff0c03c

080033b0 <LL_GPIO_SetPinMode>:
{
 80033b0:	b480      	push	{r7}
 80033b2:	b089      	sub	sp, #36	; 0x24
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	fa93 f3a3 	rbit	r3, r3
 80033ca:	613b      	str	r3, [r7, #16]
  return result;
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	fab3 f383 	clz	r3, r3
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	005b      	lsls	r3, r3, #1
 80033d6:	2103      	movs	r1, #3
 80033d8:	fa01 f303 	lsl.w	r3, r1, r3
 80033dc:	43db      	mvns	r3, r3
 80033de:	401a      	ands	r2, r3
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	fa93 f3a3 	rbit	r3, r3
 80033ea:	61bb      	str	r3, [r7, #24]
  return result;
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	fab3 f383 	clz	r3, r3
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	6879      	ldr	r1, [r7, #4]
 80033f8:	fa01 f303 	lsl.w	r3, r1, r3
 80033fc:	431a      	orrs	r2, r3
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	601a      	str	r2, [r3, #0]
}
 8003402:	bf00      	nop
 8003404:	3724      	adds	r7, #36	; 0x24
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr

0800340e <LL_GPIO_SetPinOutputType>:
{
 800340e:	b480      	push	{r7}
 8003410:	b085      	sub	sp, #20
 8003412:	af00      	add	r7, sp, #0
 8003414:	60f8      	str	r0, [r7, #12]
 8003416:	60b9      	str	r1, [r7, #8]
 8003418:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	685a      	ldr	r2, [r3, #4]
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	43db      	mvns	r3, r3
 8003422:	401a      	ands	r2, r3
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	6879      	ldr	r1, [r7, #4]
 8003428:	fb01 f303 	mul.w	r3, r1, r3
 800342c:	431a      	orrs	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	605a      	str	r2, [r3, #4]
}
 8003432:	bf00      	nop
 8003434:	3714      	adds	r7, #20
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr

0800343e <LL_GPIO_SetPinSpeed>:
{
 800343e:	b480      	push	{r7}
 8003440:	b089      	sub	sp, #36	; 0x24
 8003442:	af00      	add	r7, sp, #0
 8003444:	60f8      	str	r0, [r7, #12]
 8003446:	60b9      	str	r1, [r7, #8]
 8003448:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	689a      	ldr	r2, [r3, #8]
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	fa93 f3a3 	rbit	r3, r3
 8003458:	613b      	str	r3, [r7, #16]
  return result;
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	fab3 f383 	clz	r3, r3
 8003460:	b2db      	uxtb	r3, r3
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	2103      	movs	r1, #3
 8003466:	fa01 f303 	lsl.w	r3, r1, r3
 800346a:	43db      	mvns	r3, r3
 800346c:	401a      	ands	r2, r3
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	fa93 f3a3 	rbit	r3, r3
 8003478:	61bb      	str	r3, [r7, #24]
  return result;
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	fab3 f383 	clz	r3, r3
 8003480:	b2db      	uxtb	r3, r3
 8003482:	005b      	lsls	r3, r3, #1
 8003484:	6879      	ldr	r1, [r7, #4]
 8003486:	fa01 f303 	lsl.w	r3, r1, r3
 800348a:	431a      	orrs	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	609a      	str	r2, [r3, #8]
}
 8003490:	bf00      	nop
 8003492:	3724      	adds	r7, #36	; 0x24
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <LL_GPIO_SetPinPull>:
{
 800349c:	b480      	push	{r7}
 800349e:	b089      	sub	sp, #36	; 0x24
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	68da      	ldr	r2, [r3, #12]
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	fa93 f3a3 	rbit	r3, r3
 80034b6:	613b      	str	r3, [r7, #16]
  return result;
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	fab3 f383 	clz	r3, r3
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	2103      	movs	r1, #3
 80034c4:	fa01 f303 	lsl.w	r3, r1, r3
 80034c8:	43db      	mvns	r3, r3
 80034ca:	401a      	ands	r2, r3
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	fa93 f3a3 	rbit	r3, r3
 80034d6:	61bb      	str	r3, [r7, #24]
  return result;
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	fab3 f383 	clz	r3, r3
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	6879      	ldr	r1, [r7, #4]
 80034e4:	fa01 f303 	lsl.w	r3, r1, r3
 80034e8:	431a      	orrs	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	60da      	str	r2, [r3, #12]
}
 80034ee:	bf00      	nop
 80034f0:	3724      	adds	r7, #36	; 0x24
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr

080034fa <LL_GPIO_SetAFPin_0_7>:
{
 80034fa:	b480      	push	{r7}
 80034fc:	b089      	sub	sp, #36	; 0x24
 80034fe:	af00      	add	r7, sp, #0
 8003500:	60f8      	str	r0, [r7, #12]
 8003502:	60b9      	str	r1, [r7, #8]
 8003504:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6a1a      	ldr	r2, [r3, #32]
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	fa93 f3a3 	rbit	r3, r3
 8003514:	613b      	str	r3, [r7, #16]
  return result;
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	fab3 f383 	clz	r3, r3
 800351c:	b2db      	uxtb	r3, r3
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	210f      	movs	r1, #15
 8003522:	fa01 f303 	lsl.w	r3, r1, r3
 8003526:	43db      	mvns	r3, r3
 8003528:	401a      	ands	r2, r3
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	fa93 f3a3 	rbit	r3, r3
 8003534:	61bb      	str	r3, [r7, #24]
  return result;
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	fab3 f383 	clz	r3, r3
 800353c:	b2db      	uxtb	r3, r3
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	6879      	ldr	r1, [r7, #4]
 8003542:	fa01 f303 	lsl.w	r3, r1, r3
 8003546:	431a      	orrs	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	621a      	str	r2, [r3, #32]
}
 800354c:	bf00      	nop
 800354e:	3724      	adds	r7, #36	; 0x24
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <LL_GPIO_SetAFPin_8_15>:
{
 8003558:	b480      	push	{r7}
 800355a:	b089      	sub	sp, #36	; 0x24
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	0a1b      	lsrs	r3, r3, #8
 800356c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	fa93 f3a3 	rbit	r3, r3
 8003574:	613b      	str	r3, [r7, #16]
  return result;
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	fab3 f383 	clz	r3, r3
 800357c:	b2db      	uxtb	r3, r3
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	210f      	movs	r1, #15
 8003582:	fa01 f303 	lsl.w	r3, r1, r3
 8003586:	43db      	mvns	r3, r3
 8003588:	401a      	ands	r2, r3
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	0a1b      	lsrs	r3, r3, #8
 800358e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	fa93 f3a3 	rbit	r3, r3
 8003596:	61bb      	str	r3, [r7, #24]
  return result;
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	fab3 f383 	clz	r3, r3
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	6879      	ldr	r1, [r7, #4]
 80035a4:	fa01 f303 	lsl.w	r3, r1, r3
 80035a8:	431a      	orrs	r2, r3
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	625a      	str	r2, [r3, #36]	; 0x24
}
 80035ae:	bf00      	nop
 80035b0:	3724      	adds	r7, #36	; 0x24
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr

080035ba <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b088      	sub	sp, #32
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
 80035c2:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	fa93 f3a3 	rbit	r3, r3
 80035d0:	613b      	str	r3, [r7, #16]
  return result;
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	fab3 f383 	clz	r3, r3
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80035dc:	e051      	b.n	8003682 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	2101      	movs	r1, #1
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	fa01 f303 	lsl.w	r3, r1, r3
 80035ea:	4013      	ands	r3, r2
 80035ec:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d043      	beq.n	800367c <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d003      	beq.n	8003604 <LL_GPIO_Init+0x4a>
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	2b02      	cmp	r3, #2
 8003602:	d10e      	bne.n	8003622 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	461a      	mov	r2, r3
 800360a:	69b9      	ldr	r1, [r7, #24]
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f7ff ff16 	bl	800343e <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	6819      	ldr	r1, [r3, #0]
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	461a      	mov	r2, r3
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f7ff fef6 	bl	800340e <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	461a      	mov	r2, r3
 8003628:	69b9      	ldr	r1, [r7, #24]
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f7ff ff36 	bl	800349c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	2b02      	cmp	r3, #2
 8003636:	d11a      	bne.n	800366e <LL_GPIO_Init+0xb4>
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	fa93 f3a3 	rbit	r3, r3
 8003642:	60bb      	str	r3, [r7, #8]
  return result;
 8003644:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8003646:	fab3 f383 	clz	r3, r3
 800364a:	b2db      	uxtb	r3, r3
 800364c:	2b07      	cmp	r3, #7
 800364e:	d807      	bhi.n	8003660 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	695b      	ldr	r3, [r3, #20]
 8003654:	461a      	mov	r2, r3
 8003656:	69b9      	ldr	r1, [r7, #24]
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f7ff ff4e 	bl	80034fa <LL_GPIO_SetAFPin_0_7>
 800365e:	e006      	b.n	800366e <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	695b      	ldr	r3, [r3, #20]
 8003664:	461a      	mov	r2, r3
 8003666:	69b9      	ldr	r1, [r7, #24]
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f7ff ff75 	bl	8003558 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	461a      	mov	r2, r3
 8003674:	69b9      	ldr	r1, [r7, #24]
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f7ff fe9a 	bl	80033b0 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	3301      	adds	r3, #1
 8003680:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	fa22 f303 	lsr.w	r3, r2, r3
 800368c:	2b00      	cmp	r3, #0
 800368e:	d1a6      	bne.n	80035de <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3720      	adds	r7, #32
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <LL_I2C_Enable>:
{
 800369a:	b480      	push	{r7}
 800369c:	b083      	sub	sp, #12
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f043 0201 	orr.w	r2, r3, #1
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	601a      	str	r2, [r3, #0]
}
 80036ae:	bf00      	nop
 80036b0:	370c      	adds	r7, #12
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr

080036ba <LL_I2C_Disable>:
{
 80036ba:	b480      	push	{r7}
 80036bc:	b083      	sub	sp, #12
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f023 0201 	bic.w	r2, r3, #1
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	601a      	str	r2, [r3, #0]
}
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr

080036da <LL_I2C_ConfigFilters>:
{
 80036da:	b480      	push	{r7}
 80036dc:	b085      	sub	sp, #20
 80036de:	af00      	add	r7, sp, #0
 80036e0:	60f8      	str	r0, [r7, #12]
 80036e2:	60b9      	str	r1, [r7, #8]
 80036e4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	0219      	lsls	r1, r3, #8
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	430b      	orrs	r3, r1
 80036f6:	431a      	orrs	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	601a      	str	r2, [r3, #0]
}
 80036fc:	bf00      	nop
 80036fe:	3714      	adds	r7, #20
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <LL_I2C_SetOwnAddress1>:
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800371c:	f023 0307 	bic.w	r3, r3, #7
 8003720:	68b9      	ldr	r1, [r7, #8]
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	430a      	orrs	r2, r1
 8003726:	431a      	orrs	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	609a      	str	r2, [r3, #8]
}
 800372c:	bf00      	nop
 800372e:	3714      	adds	r7, #20
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <LL_I2C_EnableOwnAddress1>:
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	609a      	str	r2, [r3, #8]
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <LL_I2C_DisableOwnAddress1>:
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	609a      	str	r2, [r3, #8]
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <LL_I2C_SetTiming>:
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	683a      	ldr	r2, [r7, #0]
 8003786:	611a      	str	r2, [r3, #16]
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <LL_I2C_SetMode>:
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	431a      	orrs	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	601a      	str	r2, [r3, #0]
}
 80037ae:	bf00      	nop
 80037b0:	370c      	adds	r7, #12
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr

080037ba <LL_I2C_AcknowledgeNextData>:
{
 80037ba:	b480      	push	{r7}
 80037bc:	b083      	sub	sp, #12
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
 80037c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	431a      	orrs	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	605a      	str	r2, [r3, #4]
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f7ff ff65 	bl	80036ba <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	6899      	ldr	r1, [r3, #8]
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	461a      	mov	r2, r3
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f7ff ff6d 	bl	80036da <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	4619      	mov	r1, r3
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f7ff ffb6 	bl	8003778 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f7ff ff44 	bl	800369a <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f7ff ffa0 	bl	8003758 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	6919      	ldr	r1, [r3, #16]
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	461a      	mov	r2, r3
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f7ff ff70 	bl	8003708 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d002      	beq.n	8003836 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f7ff ff81 	bl	8003738 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4619      	mov	r1, r3
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f7ff ffa9 	bl	8003794 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	4619      	mov	r1, r3
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f7ff ffb6 	bl	80037ba <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3708      	adds	r7, #8
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <LL_RTC_SetHourFormat>:
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_FMT, HourFormat);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	431a      	orrs	r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	609a      	str	r2, [r3, #8]
}
 8003872:	bf00      	nop
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr

0800387e <LL_RTC_GetHourFormat>:
{
 800387e:	b480      	push	{r7}
 8003880:	b083      	sub	sp, #12
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->CR, RTC_CR_FMT));
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
 800388e:	4618      	mov	r0, r3
 8003890:	370c      	adds	r7, #12
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr

0800389a <LL_RTC_EnableInitMode>:
{
 800389a:	b480      	push	{r7}
 800389c:	b083      	sub	sp, #12
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, RTC_INIT_MASK);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f04f 32ff 	mov.w	r2, #4294967295
 80038a8:	60da      	str	r2, [r3, #12]
}
 80038aa:	bf00      	nop
 80038ac:	370c      	adds	r7, #12
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr

080038b6 <LL_RTC_DisableInitMode>:
{
 80038b6:	b480      	push	{r7}
 80038b8:	b083      	sub	sp, #12
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038c4:	60da      	str	r2, [r3, #12]
}
 80038c6:	bf00      	nop
 80038c8:	370c      	adds	r7, #12
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr

080038d2 <LL_RTC_IsShadowRegBypassEnabled>:
{
 80038d2:	b480      	push	{r7}
 80038d4:	b083      	sub	sp, #12
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->CR, RTC_CR_BYPSHAD) == (RTC_CR_BYPSHAD));
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f003 0320 	and.w	r3, r3, #32
 80038e2:	2b20      	cmp	r3, #32
 80038e4:	bf0c      	ite	eq
 80038e6:	2301      	moveq	r3, #1
 80038e8:	2300      	movne	r3, #0
 80038ea:	b2db      	uxtb	r3, r3
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <LL_RTC_SetAsynchPrescaler>:
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_PRER_PREDIV_A_Pos);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	041b      	lsls	r3, r3, #16
 800390e:	431a      	orrs	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	611a      	str	r2, [r3, #16]
}
 8003914:	bf00      	nop
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <LL_RTC_SetSynchPrescaler>:
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003932:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003936:	683a      	ldr	r2, [r7, #0]
 8003938:	431a      	orrs	r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	611a      	str	r2, [r3, #16]
}
 800393e:	bf00      	nop
 8003940:	370c      	adds	r7, #12
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr

0800394a <LL_RTC_EnableWriteProtection>:
{
 800394a:	b480      	push	{r7}
 800394c:	b083      	sub	sp, #12
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	22ff      	movs	r2, #255	; 0xff
 8003956:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <LL_RTC_DisableWriteProtection>:
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	22ca      	movs	r2, #202	; 0xca
 8003970:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2253      	movs	r2, #83	; 0x53
 8003976:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <LL_RTC_TIME_Config>:
{
 8003984:	b480      	push	{r7}
 8003986:	b087      	sub	sp, #28
 8003988:	af00      	add	r7, sp, #0
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	607a      	str	r2, [r7, #4]
 8003990:	603b      	str	r3, [r7, #0]
  uint32_t temp = 0U;
 8003992:	2300      	movs	r3, #0
 8003994:	617b      	str	r3, [r7, #20]
         (((Hours & 0xF0U) << (RTC_TR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_TR_HU_Pos))     | \
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	041b      	lsls	r3, r3, #16
 800399a:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
  temp = Format12_24                                                                                    | \
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	431a      	orrs	r2, r3
         (((Minutes & 0xF0U) << (RTC_TR_MNT_Pos - 4U)) | ((Minutes & 0x0FU) << RTC_TR_MNU_Pos)) | \
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	021b      	lsls	r3, r3, #8
 80039a6:	b29b      	uxth	r3, r3
         (((Hours & 0xF0U) << (RTC_TR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_TR_HU_Pos))     | \
 80039a8:	431a      	orrs	r2, r3
         (((Seconds & 0xF0U) << (RTC_TR_ST_Pos - 4U)) | ((Seconds & 0x0FU) << RTC_TR_SU_Pos));
 80039aa:	6a3b      	ldr	r3, [r7, #32]
 80039ac:	b2db      	uxtb	r3, r3
  temp = Format12_24                                                                                    | \
 80039ae:	4313      	orrs	r3, r2
 80039b0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
 80039ba:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	431a      	orrs	r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	601a      	str	r2, [r3, #0]
}
 80039c6:	bf00      	nop
 80039c8:	371c      	adds	r7, #28
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
	...

080039d4 <LL_RTC_DATE_Config>:
{
 80039d4:	b480      	push	{r7}
 80039d6:	b087      	sub	sp, #28
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
 80039e0:	603b      	str	r3, [r7, #0]
  uint32_t temp = 0U;
 80039e2:	2300      	movs	r3, #0
 80039e4:	617b      	str	r3, [r7, #20]
  temp = (WeekDay << RTC_DR_WDU_Pos)                                                        | \
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	035a      	lsls	r2, r3, #13
         (((Year & 0xF0U) << (RTC_DR_YT_Pos - 4U)) | ((Year & 0x0FU) << RTC_DR_YU_Pos))   | \
 80039ea:	6a3b      	ldr	r3, [r7, #32]
 80039ec:	041b      	lsls	r3, r3, #16
 80039ee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  temp = (WeekDay << RTC_DR_WDU_Pos)                                                        | \
 80039f2:	431a      	orrs	r2, r3
         (((Month & 0xF0U) << (RTC_DR_MT_Pos - 4U)) | ((Month & 0x0FU) << RTC_DR_MU_Pos)) | \
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	021b      	lsls	r3, r3, #8
 80039f8:	b29b      	uxth	r3, r3
         (((Year & 0xF0U) << (RTC_DR_YT_Pos - 4U)) | ((Year & 0x0FU) << RTC_DR_YU_Pos))   | \
 80039fa:	431a      	orrs	r2, r3
         (((Day & 0xF0U) << (RTC_DR_DT_Pos - 4U)) | ((Day & 0x0FU) << RTC_DR_DU_Pos));
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	b2db      	uxtb	r3, r3
  temp = (WeekDay << RTC_DR_WDU_Pos)                                                        | \
 8003a00:	4313      	orrs	r3, r2
 8003a02:	617b      	str	r3, [r7, #20]
  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	685a      	ldr	r2, [r3, #4]
 8003a08:	4b05      	ldr	r3, [pc, #20]	; (8003a20 <LL_RTC_DATE_Config+0x4c>)
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	697a      	ldr	r2, [r7, #20]
 8003a0e:	431a      	orrs	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	605a      	str	r2, [r3, #4]
}
 8003a14:	bf00      	nop
 8003a16:	371c      	adds	r7, #28
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr
 8003a20:	ff0000c0 	.word	0xff0000c0

08003a24 <LL_RTC_IsActiveFlag_INIT>:
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF));
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a34:	2b40      	cmp	r3, #64	; 0x40
 8003a36:	bf0c      	ite	eq
 8003a38:	2301      	moveq	r3, #1
 8003a3a:	2300      	movne	r3, #0
 8003a3c:	b2db      	uxtb	r3, r3
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr

08003a4a <LL_RTC_IsActiveFlag_RS>:
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	b083      	sub	sp, #12
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ISR, RTC_ISR_RSF) == (RTC_ISR_RSF));
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	f003 0320 	and.w	r3, r3, #32
 8003a5a:	2b20      	cmp	r3, #32
 8003a5c:	bf0c      	ite	eq
 8003a5e:	2301      	moveq	r3, #1
 8003a60:	2300      	movne	r3, #0
 8003a62:	b2db      	uxtb	r3, r3
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <LL_RTC_ClearFlag_RS>:
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, (~((RTC_ISR_RSF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTCx->ISR & RTC_ISR_INIT)));
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a80:	f063 02a0 	orn	r2, r3, #160	; 0xa0
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	60da      	str	r2, [r3, #12]
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <LL_SYSTICK_IsActiveCounterFlag>:
  * @note   It can be used in timeout function on application side.
  * @rmtoll STK_CTRL     COUNTFLAG     LL_SYSTICK_IsActiveCounterFlag
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 8003a98:	4b07      	ldr	r3, [pc, #28]	; (8003ab8 <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aa4:	bf0c      	ite	eq
 8003aa6:	2301      	moveq	r3, #1
 8003aa8:	2300      	movne	r3, #0
 8003aaa:	b2db      	uxtb	r3, r3
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	e000e010 	.word	0xe000e010

08003abc <LL_RTC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized
  */
ErrorStatus LL_RTC_Init(RTC_TypeDef *RTCx, LL_RTC_InitTypeDef *RTC_InitStruct)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_RTC_HOURFORMAT(RTC_InitStruct->HourFormat));
  assert_param(IS_LL_RTC_ASYNCH_PREDIV(RTC_InitStruct->AsynchPrescaler));
  assert_param(IS_LL_RTC_SYNCH_PREDIV(RTC_InitStruct->SynchPrescaler));

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f7ff ff4a 	bl	8003964 <LL_RTC_DisableWriteProtection>

  /* Set Initialization mode */
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f000 f96d 	bl	8003db0 <LL_RTC_EnterInitMode>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d016      	beq.n	8003b0a <LL_RTC_Init+0x4e>
  {
    /* Set Hour Format */
    LL_RTC_SetHourFormat(RTCx, RTC_InitStruct->HourFormat);
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f7ff feb8 	bl	8003858 <LL_RTC_SetHourFormat>

    /* Configure Synchronous and Asynchronous prescaler factor */
    LL_RTC_SetSynchPrescaler(RTCx, RTC_InitStruct->SynchPrescaler);
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	4619      	mov	r1, r3
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f7ff ff16 	bl	8003920 <LL_RTC_SetSynchPrescaler>
    LL_RTC_SetAsynchPrescaler(RTCx, RTC_InitStruct->AsynchPrescaler);
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	4619      	mov	r1, r3
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f7ff fefc 	bl	80038f8 <LL_RTC_SetAsynchPrescaler>

    /* Exit Initialization mode */
    LL_RTC_DisableInitMode(RTCx);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f7ff fed8 	bl	80038b6 <LL_RTC_DisableInitMode>

    status = SUCCESS;
 8003b06:	2300      	movs	r3, #0
 8003b08:	73fb      	strb	r3, [r7, #15]
  }
  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f7ff ff1d 	bl	800394a <LL_RTC_EnableWriteProtection>

  return status;
 8003b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3710      	adds	r7, #16
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
	...

08003b1c <LL_RTC_TIME_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Time register is configured
  *          - ERROR: RTC Time register is not configured
  */
ErrorStatus LL_RTC_TIME_Init(RTC_TypeDef *RTCx, uint32_t RTC_Format, LL_RTC_TimeTypeDef *RTC_TimeStruct)
{
 8003b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b1e:	b089      	sub	sp, #36	; 0x24
 8003b20:	af02      	add	r7, sp, #8
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
  ErrorStatus status = ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));
  assert_param(IS_LL_RTC_FORMAT(RTC_Format));

  if (RTC_Format == LL_RTC_FORMAT_BIN)
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d109      	bne.n	8003b46 <LL_RTC_TIME_Init+0x2a>
  {
    if (LL_RTC_GetHourFormat(RTCx) != LL_RTC_HOURFORMAT_24HOUR)
 8003b32:	68f8      	ldr	r0, [r7, #12]
 8003b34:	f7ff fea3 	bl	800387e <LL_RTC_GetHourFormat>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d10c      	bne.n	8003b58 <LL_RTC_TIME_Init+0x3c>
      assert_param(IS_LL_RTC_HOUR12(RTC_TimeStruct->Hours));
      assert_param(IS_LL_RTC_TIME_FORMAT(RTC_TimeStruct->TimeFormat));
    }
    else
    {
      RTC_TimeStruct->TimeFormat = 0x00U;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	601a      	str	r2, [r3, #0]
 8003b44:	e008      	b.n	8003b58 <LL_RTC_TIME_Init+0x3c>
    assert_param(IS_LL_RTC_MINUTES(RTC_TimeStruct->Minutes));
    assert_param(IS_LL_RTC_SECONDS(RTC_TimeStruct->Seconds));
  }
  else
  {
    if (LL_RTC_GetHourFormat(RTCx) != LL_RTC_HOURFORMAT_24HOUR)
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	f7ff fe99 	bl	800387e <LL_RTC_GetHourFormat>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d102      	bne.n	8003b58 <LL_RTC_TIME_Init+0x3c>
      assert_param(IS_LL_RTC_HOUR12(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Hours)));
      assert_param(IS_LL_RTC_TIME_FORMAT(RTC_TimeStruct->TimeFormat));
    }
    else
    {
      RTC_TimeStruct->TimeFormat = 0x00U;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	601a      	str	r2, [r3, #0]
    assert_param(IS_LL_RTC_MINUTES(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Minutes)));
    assert_param(IS_LL_RTC_SECONDS(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Seconds)));
  }

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f7ff ff03 	bl	8003964 <LL_RTC_DisableWriteProtection>

  /* Set Initialization mode */
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8003b5e:	68f8      	ldr	r0, [r7, #12]
 8003b60:	f000 f926 	bl	8003db0 <LL_RTC_EnterInitMode>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d073      	beq.n	8003c52 <LL_RTC_TIME_Init+0x136>
  {
    /* Check the input parameters format */
    if (RTC_Format != LL_RTC_FORMAT_BIN)
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00f      	beq.n	8003b90 <LL_RTC_TIME_Init+0x74>
    {
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, RTC_TimeStruct->Hours,
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6819      	ldr	r1, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	791b      	ldrb	r3, [r3, #4]
 8003b78:	461a      	mov	r2, r3
                         RTC_TimeStruct->Minutes, RTC_TimeStruct->Seconds);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	795b      	ldrb	r3, [r3, #5]
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, RTC_TimeStruct->Hours,
 8003b7e:	4618      	mov	r0, r3
                         RTC_TimeStruct->Minutes, RTC_TimeStruct->Seconds);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	799b      	ldrb	r3, [r3, #6]
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, RTC_TimeStruct->Hours,
 8003b84:	9300      	str	r3, [sp, #0]
 8003b86:	4603      	mov	r3, r0
 8003b88:	68f8      	ldr	r0, [r7, #12]
 8003b8a:	f7ff fefb 	bl	8003984 <LL_RTC_TIME_Config>
 8003b8e:	e04f      	b.n	8003c30 <LL_RTC_TIME_Init+0x114>
    }
    else
    {
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681c      	ldr	r4, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	791b      	ldrb	r3, [r3, #4]
 8003b98:	4a32      	ldr	r2, [pc, #200]	; (8003c64 <LL_RTC_TIME_Init+0x148>)
 8003b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9e:	08db      	lsrs	r3, r3, #3
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	011b      	lsls	r3, r3, #4
 8003ba4:	b2d8      	uxtb	r0, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	791a      	ldrb	r2, [r3, #4]
 8003baa:	4b2e      	ldr	r3, [pc, #184]	; (8003c64 <LL_RTC_TIME_Init+0x148>)
 8003bac:	fba3 1302 	umull	r1, r3, r3, r2
 8003bb0:	08d9      	lsrs	r1, r3, #3
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	440b      	add	r3, r1
 8003bb8:	005b      	lsls	r3, r3, #1
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	4303      	orrs	r3, r0
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	461d      	mov	r5, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Minutes),
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	795b      	ldrb	r3, [r3, #5]
 8003bc8:	4a26      	ldr	r2, [pc, #152]	; (8003c64 <LL_RTC_TIME_Init+0x148>)
 8003bca:	fba2 2303 	umull	r2, r3, r2, r3
 8003bce:	08db      	lsrs	r3, r3, #3
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	011b      	lsls	r3, r3, #4
 8003bd4:	b2d8      	uxtb	r0, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	795a      	ldrb	r2, [r3, #5]
 8003bda:	4b22      	ldr	r3, [pc, #136]	; (8003c64 <LL_RTC_TIME_Init+0x148>)
 8003bdc:	fba3 1302 	umull	r1, r3, r3, r2
 8003be0:	08d9      	lsrs	r1, r3, #3
 8003be2:	460b      	mov	r3, r1
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	440b      	add	r3, r1
 8003be8:	005b      	lsls	r3, r3, #1
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	4303      	orrs	r3, r0
 8003bf0:	b2db      	uxtb	r3, r3
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 8003bf2:	461e      	mov	r6, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Seconds));
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	799b      	ldrb	r3, [r3, #6]
 8003bf8:	4a1a      	ldr	r2, [pc, #104]	; (8003c64 <LL_RTC_TIME_Init+0x148>)
 8003bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8003bfe:	08db      	lsrs	r3, r3, #3
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	011b      	lsls	r3, r3, #4
 8003c04:	b2d8      	uxtb	r0, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	799a      	ldrb	r2, [r3, #6]
 8003c0a:	4b16      	ldr	r3, [pc, #88]	; (8003c64 <LL_RTC_TIME_Init+0x148>)
 8003c0c:	fba3 1302 	umull	r1, r3, r3, r2
 8003c10:	08d9      	lsrs	r1, r3, #3
 8003c12:	460b      	mov	r3, r1
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	440b      	add	r3, r1
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	4303      	orrs	r3, r0
 8003c20:	b2db      	uxtb	r3, r3
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 8003c22:	9300      	str	r3, [sp, #0]
 8003c24:	4633      	mov	r3, r6
 8003c26:	462a      	mov	r2, r5
 8003c28:	4621      	mov	r1, r4
 8003c2a:	68f8      	ldr	r0, [r7, #12]
 8003c2c:	f7ff feaa 	bl	8003984 <LL_RTC_TIME_Config>
    }

    /* Exit Initialization mode */
    LL_RTC_DisableInitMode(RTCx);
 8003c30:	68f8      	ldr	r0, [r7, #12]
 8003c32:	f7ff fe40 	bl	80038b6 <LL_RTC_DisableInitMode>

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if (LL_RTC_IsShadowRegBypassEnabled(RTCx) == 0U)
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	f7ff fe4b 	bl	80038d2 <LL_RTC_IsShadowRegBypassEnabled>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d105      	bne.n	8003c4e <LL_RTC_TIME_Init+0x132>
    {
      status = LL_RTC_WaitForSynchro(RTCx);
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f000 f8e9 	bl	8003e1a <LL_RTC_WaitForSynchro>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	75fb      	strb	r3, [r7, #23]
 8003c4c:	e001      	b.n	8003c52 <LL_RTC_TIME_Init+0x136>
    }
    else
    {
      status = SUCCESS;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	75fb      	strb	r3, [r7, #23]
    }
  }
  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);
 8003c52:	68f8      	ldr	r0, [r7, #12]
 8003c54:	f7ff fe79 	bl	800394a <LL_RTC_EnableWriteProtection>

  return status;
 8003c58:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	371c      	adds	r7, #28
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c62:	bf00      	nop
 8003c64:	cccccccd 	.word	0xcccccccd

08003c68 <LL_RTC_DATE_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Day register is configured
  *          - ERROR: RTC Day register is not configured
  */
ErrorStatus LL_RTC_DATE_Init(RTC_TypeDef *RTCx, uint32_t RTC_Format, LL_RTC_DateTypeDef *RTC_DateStruct)
{
 8003c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c6a:	b089      	sub	sp, #36	; 0x24
 8003c6c:	af02      	add	r7, sp, #8
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
  ErrorStatus status = ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));
  assert_param(IS_LL_RTC_FORMAT(RTC_Format));

  if ((RTC_Format == LL_RTC_FORMAT_BIN) && ((RTC_DateStruct->Month & 0x10U) == 0x10U))
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10e      	bne.n	8003c9c <LL_RTC_DATE_Init+0x34>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	785b      	ldrb	r3, [r3, #1]
 8003c82:	f003 0310 	and.w	r3, r3, #16
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d008      	beq.n	8003c9c <LL_RTC_DATE_Init+0x34>
  {
    RTC_DateStruct->Month = (RTC_DateStruct->Month & (uint32_t)~(0x10U)) + 0x0AU;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	785b      	ldrb	r3, [r3, #1]
 8003c8e:	f023 0310 	bic.w	r3, r3, #16
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	330a      	adds	r3, #10
 8003c96:	b2da      	uxtb	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	705a      	strb	r2, [r3, #1]
    assert_param(IS_LL_RTC_DAY(__LL_RTC_CONVERT_BCD2BIN(RTC_DateStruct->Day)));
  }
  assert_param(IS_LL_RTC_WEEKDAY(RTC_DateStruct->WeekDay));

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
 8003c9c:	68f8      	ldr	r0, [r7, #12]
 8003c9e:	f7ff fe61 	bl	8003964 <LL_RTC_DisableWriteProtection>

  /* Set Initialization mode */
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8003ca2:	68f8      	ldr	r0, [r7, #12]
 8003ca4:	f000 f884 	bl	8003db0 <LL_RTC_EnterInitMode>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d075      	beq.n	8003d9a <LL_RTC_DATE_Init+0x132>
  {
    /* Check the input parameters format */
    if (RTC_Format != LL_RTC_FORMAT_BIN)
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d010      	beq.n	8003cd6 <LL_RTC_DATE_Init+0x6e>
    {
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, RTC_DateStruct->Day, RTC_DateStruct->Month, RTC_DateStruct->Year);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	4619      	mov	r1, r3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	789b      	ldrb	r3, [r3, #2]
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	785b      	ldrb	r3, [r3, #1]
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	78db      	ldrb	r3, [r3, #3]
 8003cca:	9300      	str	r3, [sp, #0]
 8003ccc:	4603      	mov	r3, r0
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	f7ff fe80 	bl	80039d4 <LL_RTC_DATE_Config>
 8003cd4:	e050      	b.n	8003d78 <LL_RTC_DATE_Init+0x110>
    }
    else
    {
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	461c      	mov	r4, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	789b      	ldrb	r3, [r3, #2]
 8003ce0:	4a32      	ldr	r2, [pc, #200]	; (8003dac <LL_RTC_DATE_Init+0x144>)
 8003ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce6:	08db      	lsrs	r3, r3, #3
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	011b      	lsls	r3, r3, #4
 8003cec:	b2d8      	uxtb	r0, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	789a      	ldrb	r2, [r3, #2]
 8003cf2:	4b2e      	ldr	r3, [pc, #184]	; (8003dac <LL_RTC_DATE_Init+0x144>)
 8003cf4:	fba3 1302 	umull	r1, r3, r3, r2
 8003cf8:	08d9      	lsrs	r1, r3, #3
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	440b      	add	r3, r1
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	4303      	orrs	r3, r0
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	461d      	mov	r5, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Month), __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Year));
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	785b      	ldrb	r3, [r3, #1]
 8003d10:	4a26      	ldr	r2, [pc, #152]	; (8003dac <LL_RTC_DATE_Init+0x144>)
 8003d12:	fba2 2303 	umull	r2, r3, r2, r3
 8003d16:	08db      	lsrs	r3, r3, #3
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	011b      	lsls	r3, r3, #4
 8003d1c:	b2d8      	uxtb	r0, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	785a      	ldrb	r2, [r3, #1]
 8003d22:	4b22      	ldr	r3, [pc, #136]	; (8003dac <LL_RTC_DATE_Init+0x144>)
 8003d24:	fba3 1302 	umull	r1, r3, r3, r2
 8003d28:	08d9      	lsrs	r1, r3, #3
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	440b      	add	r3, r1
 8003d30:	005b      	lsls	r3, r3, #1
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	4303      	orrs	r3, r0
 8003d38:	b2db      	uxtb	r3, r3
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 8003d3a:	461e      	mov	r6, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Month), __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Year));
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	78db      	ldrb	r3, [r3, #3]
 8003d40:	4a1a      	ldr	r2, [pc, #104]	; (8003dac <LL_RTC_DATE_Init+0x144>)
 8003d42:	fba2 2303 	umull	r2, r3, r2, r3
 8003d46:	08db      	lsrs	r3, r3, #3
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	011b      	lsls	r3, r3, #4
 8003d4c:	b2d8      	uxtb	r0, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	78da      	ldrb	r2, [r3, #3]
 8003d52:	4b16      	ldr	r3, [pc, #88]	; (8003dac <LL_RTC_DATE_Init+0x144>)
 8003d54:	fba3 1302 	umull	r1, r3, r3, r2
 8003d58:	08d9      	lsrs	r1, r3, #3
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	440b      	add	r3, r1
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	4303      	orrs	r3, r0
 8003d68:	b2db      	uxtb	r3, r3
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 8003d6a:	9300      	str	r3, [sp, #0]
 8003d6c:	4633      	mov	r3, r6
 8003d6e:	462a      	mov	r2, r5
 8003d70:	4621      	mov	r1, r4
 8003d72:	68f8      	ldr	r0, [r7, #12]
 8003d74:	f7ff fe2e 	bl	80039d4 <LL_RTC_DATE_Config>
    }

    /* Exit Initialization mode */
    LL_RTC_DisableInitMode(RTCx);
 8003d78:	68f8      	ldr	r0, [r7, #12]
 8003d7a:	f7ff fd9c 	bl	80038b6 <LL_RTC_DisableInitMode>

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if (LL_RTC_IsShadowRegBypassEnabled(RTCx) == 0U)
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	f7ff fda7 	bl	80038d2 <LL_RTC_IsShadowRegBypassEnabled>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d105      	bne.n	8003d96 <LL_RTC_DATE_Init+0x12e>
    {
      status = LL_RTC_WaitForSynchro(RTCx);
 8003d8a:	68f8      	ldr	r0, [r7, #12]
 8003d8c:	f000 f845 	bl	8003e1a <LL_RTC_WaitForSynchro>
 8003d90:	4603      	mov	r3, r0
 8003d92:	75fb      	strb	r3, [r7, #23]
 8003d94:	e001      	b.n	8003d9a <LL_RTC_DATE_Init+0x132>
    }
    else
    {
      status = SUCCESS;
 8003d96:	2300      	movs	r3, #0
 8003d98:	75fb      	strb	r3, [r7, #23]
    }
  }
  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f7ff fdd5 	bl	800394a <LL_RTC_EnableWriteProtection>

  return status;
 8003da0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	371c      	adds	r7, #28
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003daa:	bf00      	nop
 8003dac:	cccccccd 	.word	0xcccccccd

08003db0 <LL_RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode
  */
ErrorStatus LL_RTC_EnterInitMode(RTC_TypeDef *RTCx)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b086      	sub	sp, #24
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  __IO uint32_t timeout = RTC_INITMODE_TIMEOUT;
 8003db8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003dbc:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = SUCCESS;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp = 0U;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	613b      	str	r3, [r7, #16]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Check if the Initialization mode is set */
  if (LL_RTC_IsActiveFlag_INIT(RTCx) == 0U)
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f7ff fe2c 	bl	8003a24 <LL_RTC_IsActiveFlag_INIT>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d11e      	bne.n	8003e10 <LL_RTC_EnterInitMode+0x60>
  {
    /* Set the Initialization mode */
    LL_RTC_EnableInitMode(RTCx);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f7ff fd61 	bl	800389a <LL_RTC_EnableInitMode>

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f7ff fe23 	bl	8003a24 <LL_RTC_IsActiveFlag_INIT>
 8003dde:	6138      	str	r0, [r7, #16]
    while ((timeout != 0U) && (tmp != 1U))
 8003de0:	e010      	b.n	8003e04 <LL_RTC_EnterInitMode+0x54>
    {
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8003de2:	f7ff fe57 	bl	8003a94 <LL_SYSTICK_IsActiveCounterFlag>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d102      	bne.n	8003df2 <LL_RTC_EnterInitMode+0x42>
      {
        timeout --;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	3b01      	subs	r3, #1
 8003df0:	60fb      	str	r3, [r7, #12]
      }
      tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f7ff fe16 	bl	8003a24 <LL_RTC_IsActiveFlag_INIT>
 8003df8:	6138      	str	r0, [r7, #16]
      if (timeout == 0U)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d101      	bne.n	8003e04 <LL_RTC_EnterInitMode+0x54>
      {
        status = ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	75fb      	strb	r3, [r7, #23]
    while ((timeout != 0U) && (tmp != 1U))
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d002      	beq.n	8003e10 <LL_RTC_EnterInitMode+0x60>
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d1e8      	bne.n	8003de2 <LL_RTC_EnterInitMode+0x32>
      }
    }
  }
  return status;
 8003e10:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3718      	adds	r7, #24
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <LL_RTC_WaitForSynchro>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus LL_RTC_WaitForSynchro(RTC_TypeDef *RTCx)
{
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b086      	sub	sp, #24
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
  __IO uint32_t timeout = RTC_SYNCHRO_TIMEOUT;
 8003e22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e26:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = SUCCESS;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp = 0U;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	613b      	str	r3, [r7, #16]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Clear RSF flag */
  LL_RTC_ClearFlag_RS(RTCx);
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f7ff fe1d 	bl	8003a70 <LL_RTC_ClearFlag_RS>

  /* Wait the registers to be synchronised */
  tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f7ff fe07 	bl	8003a4a <LL_RTC_IsActiveFlag_RS>
 8003e3c:	6138      	str	r0, [r7, #16]
  while ((timeout != 0U) && (tmp != 0U))
 8003e3e:	e010      	b.n	8003e62 <LL_RTC_WaitForSynchro+0x48>
  {
    if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8003e40:	f7ff fe28 	bl	8003a94 <LL_SYSTICK_IsActiveCounterFlag>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d102      	bne.n	8003e50 <LL_RTC_WaitForSynchro+0x36>
    {
      timeout--;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	60fb      	str	r3, [r7, #12]
    }
    tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f7ff fdfa 	bl	8003a4a <LL_RTC_IsActiveFlag_RS>
 8003e56:	6138      	str	r0, [r7, #16]
    if (timeout == 0U)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <LL_RTC_WaitForSynchro+0x48>
    {
      status = ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	75fb      	strb	r3, [r7, #23]
  while ((timeout != 0U) && (tmp != 0U))
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d002      	beq.n	8003e6e <LL_RTC_WaitForSynchro+0x54>
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1e8      	bne.n	8003e40 <LL_RTC_WaitForSynchro+0x26>
    }
  }

  if (status != ERROR)
 8003e6e:	7dfb      	ldrb	r3, [r7, #23]
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d01e      	beq.n	8003eb2 <LL_RTC_WaitForSynchro+0x98>
  {
    timeout = RTC_SYNCHRO_TIMEOUT;
 8003e74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e78:	60fb      	str	r3, [r7, #12]
    tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f7ff fde5 	bl	8003a4a <LL_RTC_IsActiveFlag_RS>
 8003e80:	6138      	str	r0, [r7, #16]
    while ((timeout != 0U) && (tmp != 1U))
 8003e82:	e010      	b.n	8003ea6 <LL_RTC_WaitForSynchro+0x8c>
    {
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8003e84:	f7ff fe06 	bl	8003a94 <LL_SYSTICK_IsActiveCounterFlag>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d102      	bne.n	8003e94 <LL_RTC_WaitForSynchro+0x7a>
      {
        timeout--;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	3b01      	subs	r3, #1
 8003e92:	60fb      	str	r3, [r7, #12]
      }
      tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f7ff fdd8 	bl	8003a4a <LL_RTC_IsActiveFlag_RS>
 8003e9a:	6138      	str	r0, [r7, #16]
      if (timeout == 0U)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d101      	bne.n	8003ea6 <LL_RTC_WaitForSynchro+0x8c>
      {
        status = ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	75fb      	strb	r3, [r7, #23]
    while ((timeout != 0U) && (tmp != 1U))
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d002      	beq.n	8003eb2 <LL_RTC_WaitForSynchro+0x98>
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d1e8      	bne.n	8003e84 <LL_RTC_WaitForSynchro+0x6a>
      }
    }
  }

  return (status);
 8003eb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3718      	adds	r7, #24
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <LL_SPI_IsEnabled>:
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ecc:	2b40      	cmp	r3, #64	; 0x40
 8003ece:	d101      	bne.n	8003ed4 <LL_SPI_IsEnabled+0x18>
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e000      	b.n	8003ed6 <LL_SPI_IsEnabled+0x1a>
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	370c      	adds	r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr

08003ee2 <LL_SPI_SetRxFIFOThreshold>:
{
 8003ee2:	b480      	push	{r7}
 8003ee4:	b083      	sub	sp, #12
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
 8003eea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	431a      	orrs	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	605a      	str	r2, [r3, #4]
}
 8003efc:	bf00      	nop
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <LL_SPI_SetCRCPolynomial>:
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	461a      	mov	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	611a      	str	r2, [r3, #16]
}
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f7ff ffc0 	bl	8003ebc <LL_SPI_IsEnabled>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d145      	bne.n	8003fce <LL_SPI_Init+0xa6>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f4a:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8003f4e:	683a      	ldr	r2, [r7, #0]
 8003f50:	6811      	ldr	r1, [r2, #0]
 8003f52:	683a      	ldr	r2, [r7, #0]
 8003f54:	6852      	ldr	r2, [r2, #4]
 8003f56:	4311      	orrs	r1, r2
 8003f58:	683a      	ldr	r2, [r7, #0]
 8003f5a:	68d2      	ldr	r2, [r2, #12]
 8003f5c:	4311      	orrs	r1, r2
 8003f5e:	683a      	ldr	r2, [r7, #0]
 8003f60:	6912      	ldr	r2, [r2, #16]
 8003f62:	4311      	orrs	r1, r2
 8003f64:	683a      	ldr	r2, [r7, #0]
 8003f66:	6952      	ldr	r2, [r2, #20]
 8003f68:	4311      	orrs	r1, r2
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	6992      	ldr	r2, [r2, #24]
 8003f6e:	4311      	orrs	r1, r2
 8003f70:	683a      	ldr	r2, [r7, #0]
 8003f72:	69d2      	ldr	r2, [r2, #28]
 8003f74:	4311      	orrs	r1, r2
 8003f76:	683a      	ldr	r2, [r7, #0]
 8003f78:	6a12      	ldr	r2, [r2, #32]
 8003f7a:	430a      	orrs	r2, r1
 8003f7c:	431a      	orrs	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003f8a:	f023 0304 	bic.w	r3, r3, #4
 8003f8e:	683a      	ldr	r2, [r7, #0]
 8003f90:	6891      	ldr	r1, [r2, #8]
 8003f92:	683a      	ldr	r2, [r7, #0]
 8003f94:	6952      	ldr	r2, [r2, #20]
 8003f96:	0c12      	lsrs	r2, r2, #16
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	431a      	orrs	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	605a      	str	r2, [r3, #4]
               SPI_CR2_DS | SPI_CR2_SSOE,
               SPI_InitStruct->DataWidth | (SPI_InitStruct->NSS >> 16U));

    /* Set Rx FIFO to Quarter (1 Byte) in case of 8 Bits mode. No DataPacking by default */
    if (SPI_InitStruct->DataWidth < LL_SPI_DATAWIDTH_9BIT)
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fa8:	d204      	bcs.n	8003fb4 <LL_SPI_Init+0x8c>
    {
      LL_SPI_SetRxFIFOThreshold(SPIx, LL_SPI_RX_FIFO_TH_QUARTER);
 8003faa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f7ff ff97 	bl	8003ee2 <LL_SPI_SetRxFIFOThreshold>

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	6a1b      	ldr	r3, [r3, #32]
 8003fb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fbc:	d105      	bne.n	8003fca <LL_SPI_Init+0xa2>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f7ff ff9f 	bl	8003f08 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	73fb      	strb	r3, [r7, #15]

#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2S_SUPPORT */
  return status;
 8003fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3710      	adds	r7, #16
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8003fe2:	4909      	ldr	r1, [pc, #36]	; (8004008 <LL_InitTick+0x30>)
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fec:	3b01      	subs	r3, #1
 8003fee:	604b      	str	r3, [r1, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8003ff0:	4b05      	ldr	r3, [pc, #20]	; (8004008 <LL_InitTick+0x30>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ff6:	4b04      	ldr	r3, [pc, #16]	; (8004008 <LL_InitTick+0x30>)
 8003ff8:	2205      	movs	r2, #5
 8003ffa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8003ffc:	bf00      	nop
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr
 8004008:	e000e010 	.word	0xe000e010

0800400c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8004014:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f7ff ffdd 	bl	8003fd8 <LL_InitTick>
}
 800401e:	bf00      	nop
 8004020:	3708      	adds	r7, #8
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
	...

08004028 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8004030:	4b0e      	ldr	r3, [pc, #56]	; (800406c <LL_mDelay+0x44>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8004036:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800403e:	d00c      	beq.n	800405a <LL_mDelay+0x32>
  {
    Delay++;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	3301      	adds	r3, #1
 8004044:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8004046:	e008      	b.n	800405a <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8004048:	4b08      	ldr	r3, [pc, #32]	; (800406c <LL_mDelay+0x44>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d002      	beq.n	800405a <LL_mDelay+0x32>
    {
      Delay--;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	3b01      	subs	r3, #1
 8004058:	607b      	str	r3, [r7, #4]
  while (Delay)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d1f3      	bne.n	8004048 <LL_mDelay+0x20>
    }
  }
}
 8004060:	bf00      	nop
 8004062:	3714      	adds	r7, #20
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr
 800406c:	e000e010 	.word	0xe000e010

08004070 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8004078:	4a04      	ldr	r2, [pc, #16]	; (800408c <LL_SetSystemCoreClock+0x1c>)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6013      	str	r3, [r2, #0]
}
 800407e:	bf00      	nop
 8004080:	370c      	adds	r7, #12
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	200001bc 	.word	0x200001bc

08004090 <LL_GPIO_SetOutputPin>:
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	683a      	ldr	r2, [r7, #0]
 800409e:	619a      	str	r2, [r3, #24]
}
 80040a0:	bf00      	nop
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <LL_GPIO_ResetOutputPin>:
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	683a      	ldr	r2, [r7, #0]
 80040ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <HAL_LCD_Init>:




void HAL_LCD_Init(void)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	af00      	add	r7, sp, #0
	/* This function initialize the LCD, this function must be call first
	before performing any operation in the LCD, the used GPIOs were initialized in the main */

	/*Before starting sending information to the LCD,
	it is necessary to initialize the SPI communication*/
	MX_SPI1_Init();
 80040cc:	f7fe ffbe 	bl	800304c <MX_SPI1_Init>

	/*We need to make sure the LCD reaches 3.3V, therefore we make a delay of 1ms after reseting the LCD
	to start sending information*/
	HAL_LCD_Reset();
 80040d0:	f000 f822 	bl	8004118 <HAL_LCD_Reset>
	LL_mDelay(1);
 80040d4:	2001      	movs	r0, #1
 80040d6:	f7ff ffa7 	bl	8004028 <LL_mDelay>

	/*These commands are necessary to initialize the LCD, you can find
	them in the datasheet of the LCD NHD-C12832A1Z-FSW-FBW-3V3 or chip on glass ST7565R */

	/*We set the segment (columns) order to NORMAL*/
	HAL_LCD_Send_Command(CMD_ADC_SELECT(ADC_NORMAL));
 80040da:	20a0      	movs	r0, #160	; 0xa0
 80040dc:	f000 f841 	bl	8004162 <HAL_LCD_Send_Command>

	 /*TURNS OFF the display*/
	HAL_LCD_Send_Command(CMD_DISPLAY_ON_OFF(DISPLAY_OFF));
 80040e0:	20ae      	movs	r0, #174	; 0xae
 80040e2:	f000 f83e 	bl	8004162 <HAL_LCD_Send_Command>

	/*Selects COM output scan direction to normal direction*/
	HAL_LCD_Send_Command(CMD_COM_DIRECTION(COM_DIRECTION_REVERSE));
 80040e6:	20c8      	movs	r0, #200	; 0xc8
 80040e8:	f000 f83b 	bl	8004162 <HAL_LCD_Send_Command>

	/*Sets the LCD drive voltage bias ratio to 1/9*/
	HAL_LCD_Send_Command(CMD_BIAS_RATIO(CMD_BIAS_19));
 80040ec:	20a2      	movs	r0, #162	; 0xa2
 80040ee:	f000 f838 	bl	8004162 <HAL_LCD_Send_Command>

	/*Select internal power supply 111*/
	HAL_LCD_Send_Command(CMD_PWR_CONTROL(PWR_INTERNAL_SUPPLY));
 80040f2:	202f      	movs	r0, #47	; 0x2f
 80040f4:	f000 f835 	bl	8004162 <HAL_LCD_Send_Command>

	/*Select internal resistor ratio 001 */
	HAL_LCD_Send_Command(CMD_RES_RATIO(RES_RATIO_35));
 80040f8:	2021      	movs	r0, #33	; 0x21
 80040fa:	f000 f832 	bl	8004162 <HAL_LCD_Send_Command>

	/*Electronic volume mode  */
	HAL_LCD_Send_Command(CMD_ELEC_VOL_MODE);
 80040fe:	2081      	movs	r0, #129	; 0x81
 8004100:	f000 f82f 	bl	8004162 <HAL_LCD_Send_Command>

	/*SET electronic volume (contrast), please NOTE this value is different from the datasheet,
	the datasheet specifies to configure a 3F, however, the contrast is to high and we would have
	problems to see the configured pixel in further LCD configurations*/
	HAL_LCD_Send_Command(CMD_ELEC_VOL_SET_LOW);
 8004104:	201f      	movs	r0, #31
 8004106:	f000 f82c 	bl	8004162 <HAL_LCD_Send_Command>

	/* End of the initialization commands from datasheet, the following commands are just to prepare the
	 LCD before start implementing functions */

	/* With this command we want to set all the points in the LCD to work normal*/
	HAL_LCD_Send_Command(CMD_LCD_POINTS(LCD_POINTS_NORMAL));
 800410a:	20a4      	movs	r0, #164	; 0xa4
 800410c:	f000 f829 	bl	8004162 <HAL_LCD_Send_Command>

	/*After initializating the LCD, it is necessary to clear all display because
	it could have information in RAM after it was turned off*/
	HAL_LCD_Clear();
 8004110:	f000 f853 	bl	80041ba <HAL_LCD_Clear>

	return;
 8004114:	bf00      	nop
}
 8004116:	bd80      	pop	{r7, pc}

08004118 <HAL_LCD_Reset>:
void HAL_LCD_Reset(void)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	af00      	add	r7, sp, #0
	/*Pin PA6 is configured as RESET signal of LCD,
	when the reset signal is inactive, it is HIGH, if we want to reset the LCD
	, we reset the signal to LOW and release
	PA6   ------> LCD_RESET*/

	LL_GPIO_ResetOutputPin(LCD_RESET_GPIO_Port,LCD_RESET_Pin);
 800411c:	2140      	movs	r1, #64	; 0x40
 800411e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004122:	f7ff ffc3 	bl	80040ac <LL_GPIO_ResetOutputPin>
	LL_mDelay(1);
 8004126:	2001      	movs	r0, #1
 8004128:	f7ff ff7e 	bl	8004028 <LL_mDelay>
	LL_GPIO_SetOutputPin(LCD_RESET_GPIO_Port,LCD_RESET_Pin);
 800412c:	2140      	movs	r1, #64	; 0x40
 800412e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004132:	f7ff ffad 	bl	8004090 <LL_GPIO_SetOutputPin>

	return;
 8004136:	bf00      	nop
}
 8004138:	bd80      	pop	{r7, pc}

0800413a <HAL_LCD_A0_Data>:

void HAL_LCD_A0_Data(void)
{
 800413a:	b580      	push	{r7, lr}
 800413c:	af00      	add	r7, sp, #0
	/*Pin PA8 is configured as A0 signal of LCD,
	when the A0 is HIGH, the information is a DATA
	PA8   ------> LCD_A0*/
	LL_GPIO_SetOutputPin(LCD_A0_GPIO_Port,LCD_A0_Pin);
 800413e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004142:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004146:	f7ff ffa3 	bl	8004090 <LL_GPIO_SetOutputPin>

	return;
 800414a:	bf00      	nop
}
 800414c:	bd80      	pop	{r7, pc}

0800414e <HAL_LCD_A0_Command>:
void HAL_LCD_A0_Command(void)
{
 800414e:	b580      	push	{r7, lr}
 8004150:	af00      	add	r7, sp, #0
	/*Pin PA8 is configured as A0 signal of LCD,
	when the A0 is LOW, the information is a COMMAND
	PA8   ------> LCD_A0*/
	LL_GPIO_ResetOutputPin(LCD_A0_GPIO_Port,LCD_A0_Pin);
 8004152:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004156:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800415a:	f7ff ffa7 	bl	80040ac <LL_GPIO_ResetOutputPin>

	return;
 800415e:	bf00      	nop
}
 8004160:	bd80      	pop	{r7, pc}

08004162 <HAL_LCD_Send_Command>:

void HAL_LCD_Send_Command(uint8_t command)
{
 8004162:	b580      	push	{r7, lr}
 8004164:	b082      	sub	sp, #8
 8004166:	af00      	add	r7, sp, #0
 8004168:	4603      	mov	r3, r0
 800416a:	71fb      	strb	r3, [r7, #7]
	/*Function to send a command through SPI1, it configures automatically the A0=0
	therefore, it is a command. It enables CHIP SELECT signal and disables it after transmission is done */
	MX_SPI1_CS_Enable();
 800416c:	f7fe fff8 	bl	8003160 <MX_SPI1_CS_Enable>
	HAL_LCD_A0_Command();
 8004170:	f7ff ffed 	bl	800414e <HAL_LCD_A0_Command>
	MX_SPI1_Send(command);
 8004174:	79fb      	ldrb	r3, [r7, #7]
 8004176:	4618      	mov	r0, r3
 8004178:	f7fe ffd4 	bl	8003124 <MX_SPI1_Send>
	LL_mDelay(1);
 800417c:	2001      	movs	r0, #1
 800417e:	f7ff ff53 	bl	8004028 <LL_mDelay>
	MX_SPI1_CS_Disable();
 8004182:	f7fe fff7 	bl	8003174 <MX_SPI1_CS_Disable>

	return;
 8004186:	bf00      	nop
}
 8004188:	3708      	adds	r7, #8
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}

0800418e <HAL_LCD_Send_Data>:

void HAL_LCD_Send_Data(uint8_t data)
{
 800418e:	b580      	push	{r7, lr}
 8004190:	b082      	sub	sp, #8
 8004192:	af00      	add	r7, sp, #0
 8004194:	4603      	mov	r3, r0
 8004196:	71fb      	strb	r3, [r7, #7]
	/*Function to send a data through SPI1, it configures automatically the A0=1
	therefore, it is a data. It enables CHIP SELECT signal and disables it after transmission is done */
	MX_SPI1_CS_Enable();
 8004198:	f7fe ffe2 	bl	8003160 <MX_SPI1_CS_Enable>
	HAL_LCD_A0_Data();
 800419c:	f7ff ffcd 	bl	800413a <HAL_LCD_A0_Data>
	MX_SPI1_Send(data);
 80041a0:	79fb      	ldrb	r3, [r7, #7]
 80041a2:	4618      	mov	r0, r3
 80041a4:	f7fe ffbe 	bl	8003124 <MX_SPI1_Send>
	LL_mDelay(1);
 80041a8:	2001      	movs	r0, #1
 80041aa:	f7ff ff3d 	bl	8004028 <LL_mDelay>
	MX_SPI1_CS_Disable();
 80041ae:	f7fe ffe1 	bl	8003174 <MX_SPI1_CS_Disable>

	return;
 80041b2:	bf00      	nop
}
 80041b4:	3708      	adds	r7, #8
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <HAL_LCD_Clear>:

void HAL_LCD_Clear(void)
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b082      	sub	sp, #8
 80041be:	af00      	add	r7, sp, #0
	/*Function to clear ALL LCD, from page=0, column =0,
	to page = 3, column = 127, after clear, the cursor
	is set at page=0, column=0*/
	HAL_LCD_Send_Command(CMD_DISPLAY_ON_OFF(DISPLAY_OFF));
 80041c0:	20ae      	movs	r0, #174	; 0xae
 80041c2:	f7ff ffce 	bl	8004162 <HAL_LCD_Send_Command>
	for (uint8_t page=0 ; page <= MAX_PAGES ; page++)
 80041c6:	2300      	movs	r3, #0
 80041c8:	71fb      	strb	r3, [r7, #7]
 80041ca:	e014      	b.n	80041f6 <HAL_LCD_Clear+0x3c>
	{

		HAL_LCD_Set_Position(0,page);
 80041cc:	79fb      	ldrb	r3, [r7, #7]
 80041ce:	4619      	mov	r1, r3
 80041d0:	2000      	movs	r0, #0
 80041d2:	f000 f81e 	bl	8004212 <HAL_LCD_Set_Position>
		for(uint8_t column=0;column<= MAX_WIDHT ; column++)
 80041d6:	2300      	movs	r3, #0
 80041d8:	71bb      	strb	r3, [r7, #6]
 80041da:	e005      	b.n	80041e8 <HAL_LCD_Clear+0x2e>
		{
			HAL_LCD_Send_Data(ERASE_BYTE);
 80041dc:	2000      	movs	r0, #0
 80041de:	f7ff ffd6 	bl	800418e <HAL_LCD_Send_Data>
		for(uint8_t column=0;column<= MAX_WIDHT ; column++)
 80041e2:	79bb      	ldrb	r3, [r7, #6]
 80041e4:	3301      	adds	r3, #1
 80041e6:	71bb      	strb	r3, [r7, #6]
 80041e8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	daf5      	bge.n	80041dc <HAL_LCD_Clear+0x22>
	for (uint8_t page=0 ; page <= MAX_PAGES ; page++)
 80041f0:	79fb      	ldrb	r3, [r7, #7]
 80041f2:	3301      	adds	r3, #1
 80041f4:	71fb      	strb	r3, [r7, #7]
 80041f6:	79fb      	ldrb	r3, [r7, #7]
 80041f8:	2b03      	cmp	r3, #3
 80041fa:	d9e7      	bls.n	80041cc <HAL_LCD_Clear+0x12>
		}
	}
	HAL_LCD_Set_Position(0,0);
 80041fc:	2100      	movs	r1, #0
 80041fe:	2000      	movs	r0, #0
 8004200:	f000 f807 	bl	8004212 <HAL_LCD_Set_Position>
	HAL_LCD_Send_Command(CMD_DISPLAY_ON_OFF(DISPLAY_ON));
 8004204:	20af      	movs	r0, #175	; 0xaf
 8004206:	f7ff ffac 	bl	8004162 <HAL_LCD_Send_Command>

	return;
 800420a:	bf00      	nop
}
 800420c:	3708      	adds	r7, #8
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <HAL_LCD_Set_Position>:

void HAL_LCD_Set_Position(uint8_t column, uint8_t page)
{
 8004212:	b580      	push	{r7, lr}
 8004214:	b082      	sub	sp, #8
 8004216:	af00      	add	r7, sp, #0
 8004218:	4603      	mov	r3, r0
 800421a:	460a      	mov	r2, r1
 800421c:	71fb      	strb	r3, [r7, #7]
 800421e:	4613      	mov	r3, r2
 8004220:	71bb      	strb	r3, [r7, #6]
	/*This function sets the position of the cursor, remember that
	MAX COLUMN = 127 and MAX PAGE = 3, the cursor is not explicit showed in the LCD,
	it is just a reference word to understand where the LCD starting is*/
	HAL_LCD_Send_Command(CMD_COLUMN_MSB(column));
 8004222:	79fb      	ldrb	r3, [r7, #7]
 8004224:	091b      	lsrs	r3, r3, #4
 8004226:	b2db      	uxtb	r3, r3
 8004228:	b25b      	sxtb	r3, r3
 800422a:	f043 0310 	orr.w	r3, r3, #16
 800422e:	b25b      	sxtb	r3, r3
 8004230:	b2db      	uxtb	r3, r3
 8004232:	4618      	mov	r0, r3
 8004234:	f7ff ff95 	bl	8004162 <HAL_LCD_Send_Command>
	HAL_LCD_Send_Command(CMD_COLUMN_LSB(column));
 8004238:	79fb      	ldrb	r3, [r7, #7]
 800423a:	f003 030f 	and.w	r3, r3, #15
 800423e:	b2db      	uxtb	r3, r3
 8004240:	4618      	mov	r0, r3
 8004242:	f7ff ff8e 	bl	8004162 <HAL_LCD_Send_Command>
	HAL_LCD_Send_Command(CMD_PAGE(page));
 8004246:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800424a:	f003 030f 	and.w	r3, r3, #15
 800424e:	b25b      	sxtb	r3, r3
 8004250:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8004254:	b25b      	sxtb	r3, r3
 8004256:	b2db      	uxtb	r3, r3
 8004258:	4618      	mov	r0, r3
 800425a:	f7ff ff82 	bl	8004162 <HAL_LCD_Send_Command>

	return;
 800425e:	bf00      	nop
}
 8004260:	3708      	adds	r7, #8
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
	...

08004268 <HAL_LCD_Write_ascii>:
void HAL_LCD_Write_ascii(uint8_t ascii, uint8_t column, uint8_t page)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	4603      	mov	r3, r0
 8004270:	71fb      	strb	r3, [r7, #7]
 8004272:	460b      	mov	r3, r1
 8004274:	71bb      	strb	r3, [r7, #6]
 8004276:	4613      	mov	r3, r2
 8004278:	717b      	strb	r3, [r7, #5]
	/*This function requires a byte to print a single ascii character in the LCD,
	this function also requires the exact page and column to print the ascii character in the lcd
	remember that, MAX_WIDTH = 127, MAX_PAGE = 3 */
	HAL_LCD_Send_Command(CMD_DISPLAY_ON_OFF(DISPLAY_ON));
 800427a:	20af      	movs	r0, #175	; 0xaf
 800427c:	f7ff ff71 	bl	8004162 <HAL_LCD_Send_Command>
	HAL_LCD_Set_Position(column,page);
 8004280:	797a      	ldrb	r2, [r7, #5]
 8004282:	79bb      	ldrb	r3, [r7, #6]
 8004284:	4611      	mov	r1, r2
 8004286:	4618      	mov	r0, r3
 8004288:	f7ff ffc3 	bl	8004212 <HAL_LCD_Set_Position>

	for (uint8_t i=0; i<MAX_PIXEL_WIDTH ; i++)
 800428c:	2300      	movs	r3, #0
 800428e:	73fb      	strb	r3, [r7, #15]
 8004290:	e011      	b.n	80042b6 <HAL_LCD_Write_ascii+0x4e>
	{
		HAL_LCD_Send_Data(HAL_REVERSE_BYTE(font[(ascii*5)+i]));
 8004292:	79fa      	ldrb	r2, [r7, #7]
 8004294:	4613      	mov	r3, r2
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	441a      	add	r2, r3
 800429a:	7bfb      	ldrb	r3, [r7, #15]
 800429c:	4413      	add	r3, r2
 800429e:	4a0b      	ldr	r2, [pc, #44]	; (80042cc <HAL_LCD_Write_ascii+0x64>)
 80042a0:	5cd3      	ldrb	r3, [r2, r3]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f000 f814 	bl	80042d0 <HAL_REVERSE_BYTE>
 80042a8:	4603      	mov	r3, r0
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7ff ff6f 	bl	800418e <HAL_LCD_Send_Data>
	for (uint8_t i=0; i<MAX_PIXEL_WIDTH ; i++)
 80042b0:	7bfb      	ldrb	r3, [r7, #15]
 80042b2:	3301      	adds	r3, #1
 80042b4:	73fb      	strb	r3, [r7, #15]
 80042b6:	7bfb      	ldrb	r3, [r7, #15]
 80042b8:	2b04      	cmp	r3, #4
 80042ba:	d9ea      	bls.n	8004292 <HAL_LCD_Write_ascii+0x2a>
	}

	HAL_LCD_Send_Data(LETTER_SEPARATOR_BYTE);
 80042bc:	2000      	movs	r0, #0
 80042be:	f7ff ff66 	bl	800418e <HAL_LCD_Send_Data>

	return;
 80042c2:	bf00      	nop
}
 80042c4:	3710      	adds	r7, #16
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	200001c0 	.word	0x200001c0

080042d0 <HAL_REVERSE_BYTE>:
uint8_t HAL_REVERSE_BYTE(uint8_t byte)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	4603      	mov	r3, r0
 80042d8:	71fb      	strb	r3, [r7, #7]
	/*This function reverse a single BYTE, why do we need this function?
	remember when we reversed the COMs in the HAL_LCD_Init() function, due this
	the line address of the pages was flip, this means that the MSB line of each page was in the bottom
	and the LSB was at the top. You need a function to reverse the data byte */
	byte = (byte & 0xF0) >> 4 | (byte & 0x0F) << 4;
 80042da:	79fb      	ldrb	r3, [r7, #7]
 80042dc:	091b      	lsrs	r3, r3, #4
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	b25a      	sxtb	r2, r3
 80042e2:	79fb      	ldrb	r3, [r7, #7]
 80042e4:	011b      	lsls	r3, r3, #4
 80042e6:	b25b      	sxtb	r3, r3
 80042e8:	4313      	orrs	r3, r2
 80042ea:	b25b      	sxtb	r3, r3
 80042ec:	71fb      	strb	r3, [r7, #7]
	byte = (byte & 0xCC) >> 2 | (byte & 0x33) << 2;
 80042ee:	79fb      	ldrb	r3, [r7, #7]
 80042f0:	109b      	asrs	r3, r3, #2
 80042f2:	b25b      	sxtb	r3, r3
 80042f4:	f003 0333 	and.w	r3, r3, #51	; 0x33
 80042f8:	b25a      	sxtb	r2, r3
 80042fa:	79fb      	ldrb	r3, [r7, #7]
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	b25b      	sxtb	r3, r3
 8004300:	f023 0333 	bic.w	r3, r3, #51	; 0x33
 8004304:	b25b      	sxtb	r3, r3
 8004306:	4313      	orrs	r3, r2
 8004308:	b25b      	sxtb	r3, r3
 800430a:	71fb      	strb	r3, [r7, #7]
	byte = (byte & 0xAA) >> 1 | (byte & 0x55) << 1;
 800430c:	79fb      	ldrb	r3, [r7, #7]
 800430e:	105b      	asrs	r3, r3, #1
 8004310:	b25b      	sxtb	r3, r3
 8004312:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8004316:	b25a      	sxtb	r2, r3
 8004318:	79fb      	ldrb	r3, [r7, #7]
 800431a:	005b      	lsls	r3, r3, #1
 800431c:	b25b      	sxtb	r3, r3
 800431e:	f023 0355 	bic.w	r3, r3, #85	; 0x55
 8004322:	b25b      	sxtb	r3, r3
 8004324:	4313      	orrs	r3, r2
 8004326:	b25b      	sxtb	r3, r3
 8004328:	71fb      	strb	r3, [r7, #7]

	return byte;
 800432a:	79fb      	ldrb	r3, [r7, #7]
}
 800432c:	4618      	mov	r0, r3
 800432e:	370c      	adds	r7, #12
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <HAL_LCD_Write_AsciiString>:

void HAL_LCD_Write_AsciiString(uint8_t word[21], uint8_t column, uint8_t page)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	460b      	mov	r3, r1
 8004342:	70fb      	strb	r3, [r7, #3]
 8004344:	4613      	mov	r3, r2
 8004346:	70bb      	strb	r3, [r7, #2]
	/*This function writes a ascii string on the display, it could be a string like
	"Hello", "123", "Hello123" or "Hello 123", this function considers also spaces*/
	HAL_LCD_Set_Position(column,page);
 8004348:	78ba      	ldrb	r2, [r7, #2]
 800434a:	78fb      	ldrb	r3, [r7, #3]
 800434c:	4611      	mov	r1, r2
 800434e:	4618      	mov	r0, r3
 8004350:	f7ff ff5f 	bl	8004212 <HAL_LCD_Set_Position>
	for (uint8_t i=0;i<21;i++)
 8004354:	2300      	movs	r3, #0
 8004356:	73fb      	strb	r3, [r7, #15]
 8004358:	e014      	b.n	8004384 <HAL_LCD_Write_AsciiString+0x4c>
	{
		if (word[i]=='\0')
 800435a:	7bfb      	ldrb	r3, [r7, #15]
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	4413      	add	r3, r2
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d013      	beq.n	800438e <HAL_LCD_Write_AsciiString+0x56>
		{
			return;
		}
		HAL_LCD_Write_ascii(word[i],column,page);
 8004366:	7bfb      	ldrb	r3, [r7, #15]
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	4413      	add	r3, r2
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	78ba      	ldrb	r2, [r7, #2]
 8004370:	78f9      	ldrb	r1, [r7, #3]
 8004372:	4618      	mov	r0, r3
 8004374:	f7ff ff78 	bl	8004268 <HAL_LCD_Write_ascii>
		column+=6;
 8004378:	78fb      	ldrb	r3, [r7, #3]
 800437a:	3306      	adds	r3, #6
 800437c:	70fb      	strb	r3, [r7, #3]
	for (uint8_t i=0;i<21;i++)
 800437e:	7bfb      	ldrb	r3, [r7, #15]
 8004380:	3301      	adds	r3, #1
 8004382:	73fb      	strb	r3, [r7, #15]
 8004384:	7bfb      	ldrb	r3, [r7, #15]
 8004386:	2b14      	cmp	r3, #20
 8004388:	d9e7      	bls.n	800435a <HAL_LCD_Write_AsciiString+0x22>

	}

	return;
 800438a:	bf00      	nop
 800438c:	e000      	b.n	8004390 <HAL_LCD_Write_AsciiString+0x58>
			return;
 800438e:	bf00      	nop


}
 8004390:	3710      	adds	r7, #16
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
	...

08004398 <HAL_LCD_Write_Number>:

void HAL_LCD_Write_Number(uint8_t *number, uint8_t column, uint8_t page)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	460b      	mov	r3, r1
 80043a2:	70fb      	strb	r3, [r7, #3]
 80043a4:	4613      	mov	r3, r2
 80043a6:	70bb      	strb	r3, [r7, #2]
	/*This function writes a number of 2 digits, it also needs the column and page where you want the
	number, if the number is less than two digits, it will print 0#. Ex. If you want to print 9, the LCD
	will print 09*/
	uint8_t AsciiFirstDigit=*number/10+ADD_VALUE_TO_ASCII;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	4a12      	ldr	r2, [pc, #72]	; (80043f8 <HAL_LCD_Write_Number+0x60>)
 80043ae:	fba2 2303 	umull	r2, r3, r2, r3
 80043b2:	08db      	lsrs	r3, r3, #3
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	3330      	adds	r3, #48	; 0x30
 80043b8:	73fb      	strb	r3, [r7, #15]
	uint8_t AsciiSecondDigit = *number%10+ADD_VALUE_TO_ASCII;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	781a      	ldrb	r2, [r3, #0]
 80043be:	4b0e      	ldr	r3, [pc, #56]	; (80043f8 <HAL_LCD_Write_Number+0x60>)
 80043c0:	fba3 1302 	umull	r1, r3, r3, r2
 80043c4:	08d9      	lsrs	r1, r3, #3
 80043c6:	460b      	mov	r3, r1
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	440b      	add	r3, r1
 80043cc:	005b      	lsls	r3, r3, #1
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	3330      	adds	r3, #48	; 0x30
 80043d4:	73bb      	strb	r3, [r7, #14]
	uint8_t numberAscii [3]= {AsciiFirstDigit, AsciiSecondDigit,'\0'};
 80043d6:	7bfb      	ldrb	r3, [r7, #15]
 80043d8:	723b      	strb	r3, [r7, #8]
 80043da:	7bbb      	ldrb	r3, [r7, #14]
 80043dc:	727b      	strb	r3, [r7, #9]
 80043de:	2300      	movs	r3, #0
 80043e0:	72bb      	strb	r3, [r7, #10]
	HAL_LCD_Write_AsciiString(numberAscii,column,page);
 80043e2:	78ba      	ldrb	r2, [r7, #2]
 80043e4:	78f9      	ldrb	r1, [r7, #3]
 80043e6:	f107 0308 	add.w	r3, r7, #8
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7ff ffa4 	bl	8004338 <HAL_LCD_Write_AsciiString>

	return;
 80043f0:	bf00      	nop
}
 80043f2:	3710      	adds	r7, #16
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	cccccccd 	.word	0xcccccccd

080043fc <HAL_POT_Init>:
 */
#include "HAL_POT.h"

/*This function initialize the ADC*/
void HAL_POT_Init(void)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	af00      	add	r7, sp, #0
	MX_ADC1_Init();
 8004400:	f7fc fc3c 	bl	8000c7c <MX_ADC1_Init>
	MX_ADC1_Calibration();
 8004404:	f7fc fce6 	bl	8000dd4 <MX_ADC1_Calibration>
	MX_ADC1_Enable();
 8004408:	f7fc fcd4 	bl	8000db4 <MX_ADC1_Enable>
}
 800440c:	bf00      	nop
 800440e:	bd80      	pop	{r7, pc}

08004410 <HAL_POT_GetBinaryValue>:

/*This function returns the ADC value i an 8 bits format*/
uint16_t HAL_POT_GetBinaryValue (uint32_t Channel)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
	uint16_t POT_value = 0;
 8004418:	2300      	movs	r3, #0
 800441a:	81fb      	strh	r3, [r7, #14]
	MX_ADC1_SetChannel(Channel);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f7fc fceb 	bl	8000df8 <MX_ADC1_SetChannel>
	MX_ADC1_StartConversion();
 8004422:	f7fc fd0d 	bl	8000e40 <MX_ADC1_StartConversion>
	POT_value = MX_ADC1_GetValue();
 8004426:	f7fc fd1f 	bl	8000e68 <MX_ADC1_GetValue>
 800442a:	4603      	mov	r3, r0
 800442c:	81fb      	strh	r3, [r7, #14]
	LL_mDelay(10);
 800442e:	200a      	movs	r0, #10
 8004430:	f7ff fdfa 	bl	8004028 <LL_mDelay>

	return POT_value;
 8004434:	89fb      	ldrh	r3, [r7, #14]
}
 8004436:	4618      	mov	r0, r3
 8004438:	3710      	adds	r7, #16
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
	...

08004440 <HAL_POT_Percentage>:
	return POT_VoltageValue;
}

/*This function returns the value of the potentiometer as a percentage*/
uint8_t HAL_POT_Percentage (uint32_t Channel)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
	uint8_t POT_Percent = 0;
 8004448:	2300      	movs	r3, #0
 800444a:	73fb      	strb	r3, [r7, #15]
	uint16_t measure = 0;
 800444c:	2300      	movs	r3, #0
 800444e:	81bb      	strh	r3, [r7, #12]

	measure = HAL_POT_GetBinaryValue(Channel);
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f7ff ffdd 	bl	8004410 <HAL_POT_GetBinaryValue>
 8004456:	4603      	mov	r3, r0
 8004458:	81bb      	strh	r3, [r7, #12]
	POT_Percent = (measure * 100)/POT_MAX_Count;
 800445a:	89bb      	ldrh	r3, [r7, #12]
 800445c:	2264      	movs	r2, #100	; 0x64
 800445e:	fb02 f303 	mul.w	r3, r2, r3
 8004462:	4a06      	ldr	r2, [pc, #24]	; (800447c <HAL_POT_Percentage+0x3c>)
 8004464:	fb82 1203 	smull	r1, r2, r2, r3
 8004468:	441a      	add	r2, r3
 800446a:	11d2      	asrs	r2, r2, #7
 800446c:	17db      	asrs	r3, r3, #31
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	73fb      	strb	r3, [r7, #15]

	return POT_Percent;
 8004472:	7bfb      	ldrb	r3, [r7, #15]
}
 8004474:	4618      	mov	r0, r3
 8004476:	3710      	adds	r7, #16
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	80808081 	.word	0x80808081

08004480 <HAL_RTC_Init>:
 */
#include "HAL_RTC.h"

/*This function initialize the RTC module*/
void HAL_RTC_Init(void)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	af00      	add	r7, sp, #0
	MX_RTC_Init();
 8004484:	f7fe fbe8 	bl	8002c58 <MX_RTC_Init>
	return;
 8004488:	bf00      	nop
}
 800448a:	bd80      	pop	{r7, pc}

0800448c <HAL_Get_ActualTime>:

/*This function returns the actual time, the pointers should be put in the argument as following: hour, minutes, seconds*/
void HAL_Get_ActualTime(uint8_t *hh, uint8_t *mm, uint8_t *ss)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	607a      	str	r2, [r7, #4]
	MX_RTC_GetTime(hh, mm, ss);
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	68b9      	ldr	r1, [r7, #8]
 800449c:	68f8      	ldr	r0, [r7, #12]
 800449e:	f7fe fc5b 	bl	8002d58 <MX_RTC_GetTime>
	LL_mDelay(50);
 80044a2:	2032      	movs	r0, #50	; 0x32
 80044a4:	f7ff fdc0 	bl	8004028 <LL_mDelay>
	return;
 80044a8:	bf00      	nop
}
 80044aa:	3710      	adds	r7, #16
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <HAL_Set_ActualTime>:
}

/*This function allow to configure a new actual time, the value of the new time should be put in the argument as
 * following: hour, minutes, seconds*/
void HAL_Set_ActualTime(uint8_t hh, uint8_t mm, uint8_t ss)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	4603      	mov	r3, r0
 80044b8:	71fb      	strb	r3, [r7, #7]
 80044ba:	460b      	mov	r3, r1
 80044bc:	71bb      	strb	r3, [r7, #6]
 80044be:	4613      	mov	r3, r2
 80044c0:	717b      	strb	r3, [r7, #5]
	MX_RTC_SetTime(hh, mm, ss);
 80044c2:	797a      	ldrb	r2, [r7, #5]
 80044c4:	79b9      	ldrb	r1, [r7, #6]
 80044c6:	79fb      	ldrb	r3, [r7, #7]
 80044c8:	4618      	mov	r0, r3
 80044ca:	f7fe fca3 	bl	8002e14 <MX_RTC_SetTime>
	LL_mDelay(50);
 80044ce:	2032      	movs	r0, #50	; 0x32
 80044d0:	f7ff fdaa 	bl	8004028 <LL_mDelay>
	return;
 80044d4:	bf00      	nop
}
 80044d6:	3708      	adds	r7, #8
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <HAL_TEMPSen_Init>:
 *      Author: carlo
 */
#include "HAL_TEMPSen.h"

void HAL_TEMPSen_Init()
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	af00      	add	r7, sp, #0
	MX_I2C1_Init();
 80044e0:	f7fc ff58 	bl	8001394 <MX_I2C1_Init>
	return;
 80044e4:	bf00      	nop
}
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <HAL_TEMPSen_ReadTemperature>:

uint8_t HAL_TEMPSen_ReadTemperature(void)
{
 80044e8:	b590      	push	{r4, r7, lr}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
	  uint16_t measure = 0x00;
 80044ee:	2300      	movs	r3, #0
 80044f0:	81fb      	strh	r3, [r7, #14]
	  uint8_t data[2];
	  uint8_t temp = 0;
 80044f2:	2300      	movs	r3, #0
 80044f4:	71fb      	strb	r3, [r7, #7]
	  data [0]= LM75B_CMD_Temp;
 80044f6:	2300      	movs	r3, #0
 80044f8:	713b      	strb	r3, [r7, #4]
	  MX_I2C1_Write(1, data, TEMP_Sens_ADDR);
 80044fa:	1d3b      	adds	r3, r7, #4
 80044fc:	2290      	movs	r2, #144	; 0x90
 80044fe:	4619      	mov	r1, r3
 8004500:	2001      	movs	r0, #1
 8004502:	f7fd f80d 	bl	8001520 <MX_I2C1_Write>
	  MX_I2C_Read(2, data, TEMP_Sens_ADDR);
 8004506:	1d3b      	adds	r3, r7, #4
 8004508:	2290      	movs	r2, #144	; 0x90
 800450a:	4619      	mov	r1, r3
 800450c:	2002      	movs	r0, #2
 800450e:	f7fc ffd3 	bl	80014b8 <MX_I2C_Read>

	  for (int i=0; i<2; i++)
 8004512:	2300      	movs	r3, #0
 8004514:	60bb      	str	r3, [r7, #8]
 8004516:	e010      	b.n	800453a <HAL_TEMPSen_ReadTemperature+0x52>
	  {
		  if(i==0)
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d105      	bne.n	800452a <HAL_TEMPSen_ReadTemperature+0x42>
		  {
			  measure = data[0];
 800451e:	793b      	ldrb	r3, [r7, #4]
 8004520:	81fb      	strh	r3, [r7, #14]
			  measure = measure << 8;
 8004522:	89fb      	ldrh	r3, [r7, #14]
 8004524:	021b      	lsls	r3, r3, #8
 8004526:	81fb      	strh	r3, [r7, #14]
 8004528:	e004      	b.n	8004534 <HAL_TEMPSen_ReadTemperature+0x4c>
		  }else
		  {
			  measure = measure | (data[1]);
 800452a:	797b      	ldrb	r3, [r7, #5]
 800452c:	b29a      	uxth	r2, r3
 800452e:	89fb      	ldrh	r3, [r7, #14]
 8004530:	4313      	orrs	r3, r2
 8004532:	81fb      	strh	r3, [r7, #14]
	  for (int i=0; i<2; i++)
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	3301      	adds	r3, #1
 8004538:	60bb      	str	r3, [r7, #8]
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	2b01      	cmp	r3, #1
 800453e:	ddeb      	ble.n	8004518 <HAL_TEMPSen_ReadTemperature+0x30>
		  }
	  }
	  measure = measure >> 5;
 8004540:	89fb      	ldrh	r3, [r7, #14]
 8004542:	095b      	lsrs	r3, r3, #5
 8004544:	81fb      	strh	r3, [r7, #14]
	  temp = (uint8_t)(measure * 0.125);
 8004546:	89fb      	ldrh	r3, [r7, #14]
 8004548:	4618      	mov	r0, r3
 800454a:	f7fb ff8f 	bl	800046c <__aeabi_i2d>
 800454e:	f04f 0200 	mov.w	r2, #0
 8004552:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004556:	f7fb ffef 	bl	8000538 <__aeabi_dmul>
 800455a:	4603      	mov	r3, r0
 800455c:	460c      	mov	r4, r1
 800455e:	4618      	mov	r0, r3
 8004560:	4621      	mov	r1, r4
 8004562:	f7fc f9fb 	bl	800095c <__aeabi_d2uiz>
 8004566:	4603      	mov	r3, r0
 8004568:	71fb      	strb	r3, [r7, #7]

	  return temp;
 800456a:	79fb      	ldrb	r3, [r7, #7]
}
 800456c:	4618      	mov	r0, r3
 800456e:	3714      	adds	r7, #20
 8004570:	46bd      	mov	sp, r7
 8004572:	bd90      	pop	{r4, r7, pc}

08004574 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004574:	f8df d034 	ldr.w	sp, [pc, #52]	; 80045ac <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004578:	480d      	ldr	r0, [pc, #52]	; (80045b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800457a:	490e      	ldr	r1, [pc, #56]	; (80045b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800457c:	4a0e      	ldr	r2, [pc, #56]	; (80045b8 <LoopForever+0xe>)
  movs r3, #0
 800457e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004580:	e002      	b.n	8004588 <LoopCopyDataInit>

08004582 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004582:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004584:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004586:	3304      	adds	r3, #4

08004588 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004588:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800458a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800458c:	d3f9      	bcc.n	8004582 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800458e:	4a0b      	ldr	r2, [pc, #44]	; (80045bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8004590:	4c0b      	ldr	r4, [pc, #44]	; (80045c0 <LoopForever+0x16>)
  movs r3, #0
 8004592:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004594:	e001      	b.n	800459a <LoopFillZerobss>

08004596 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004596:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004598:	3204      	adds	r2, #4

0800459a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800459a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800459c:	d3fb      	bcc.n	8004596 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800459e:	f7fe fe1f 	bl	80031e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80045a2:	f000 f811 	bl	80045c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80045a6:	f7fd fa5d 	bl	8001a64 <main>

080045aa <LoopForever>:

LoopForever:
    b LoopForever
 80045aa:	e7fe      	b.n	80045aa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80045ac:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80045b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80045b4:	200006bc 	.word	0x200006bc
  ldr r2, =_sidata
 80045b8:	08004668 	.word	0x08004668
  ldr r2, =_sbss
 80045bc:	200006bc 	.word	0x200006bc
  ldr r4, =_ebss
 80045c0:	20000704 	.word	0x20000704

080045c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80045c4:	e7fe      	b.n	80045c4 <ADC1_2_IRQHandler>
	...

080045c8 <__libc_init_array>:
 80045c8:	b570      	push	{r4, r5, r6, lr}
 80045ca:	4e0d      	ldr	r6, [pc, #52]	; (8004600 <__libc_init_array+0x38>)
 80045cc:	4c0d      	ldr	r4, [pc, #52]	; (8004604 <__libc_init_array+0x3c>)
 80045ce:	1ba4      	subs	r4, r4, r6
 80045d0:	10a4      	asrs	r4, r4, #2
 80045d2:	2500      	movs	r5, #0
 80045d4:	42a5      	cmp	r5, r4
 80045d6:	d109      	bne.n	80045ec <__libc_init_array+0x24>
 80045d8:	4e0b      	ldr	r6, [pc, #44]	; (8004608 <__libc_init_array+0x40>)
 80045da:	4c0c      	ldr	r4, [pc, #48]	; (800460c <__libc_init_array+0x44>)
 80045dc:	f000 f820 	bl	8004620 <_init>
 80045e0:	1ba4      	subs	r4, r4, r6
 80045e2:	10a4      	asrs	r4, r4, #2
 80045e4:	2500      	movs	r5, #0
 80045e6:	42a5      	cmp	r5, r4
 80045e8:	d105      	bne.n	80045f6 <__libc_init_array+0x2e>
 80045ea:	bd70      	pop	{r4, r5, r6, pc}
 80045ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80045f0:	4798      	blx	r3
 80045f2:	3501      	adds	r5, #1
 80045f4:	e7ee      	b.n	80045d4 <__libc_init_array+0xc>
 80045f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80045fa:	4798      	blx	r3
 80045fc:	3501      	adds	r5, #1
 80045fe:	e7f2      	b.n	80045e6 <__libc_init_array+0x1e>
 8004600:	08004660 	.word	0x08004660
 8004604:	08004660 	.word	0x08004660
 8004608:	08004660 	.word	0x08004660
 800460c:	08004664 	.word	0x08004664

08004610 <memset>:
 8004610:	4402      	add	r2, r0
 8004612:	4603      	mov	r3, r0
 8004614:	4293      	cmp	r3, r2
 8004616:	d100      	bne.n	800461a <memset+0xa>
 8004618:	4770      	bx	lr
 800461a:	f803 1b01 	strb.w	r1, [r3], #1
 800461e:	e7f9      	b.n	8004614 <memset+0x4>

08004620 <_init>:
 8004620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004622:	bf00      	nop
 8004624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004626:	bc08      	pop	{r3}
 8004628:	469e      	mov	lr, r3
 800462a:	4770      	bx	lr

0800462c <_fini>:
 800462c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800462e:	bf00      	nop
 8004630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004632:	bc08      	pop	{r3}
 8004634:	469e      	mov	lr, r3
 8004636:	4770      	bx	lr
